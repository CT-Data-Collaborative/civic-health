var app=angular.module("app",["ngAnimate","ui.bootstrap","ngLodash","ngRoute"]);angular.module("app").config(["$routeProvider","$locationProvider",function(t,e){t.when("/introduction",{templateUrl:"static/dist/templates/introduction.html",controller:"AboutPageController"}).when("/civic-engagement",{templateUrl:"static/dist/templates/civic-engagement.html",controller:"EngagementPageController"}).when("/political-participation",{templateUrl:"static/dist/templates/political-participation.html",controller:"ParticipationPageController"}).when("/community-cohesion",{templateUrl:"static/dist/templates/community-cohesion.html",controller:"CohesionPageController"}).when("/institutional-presence",{templateUrl:"static/dist/templates/institutional-presence.html",controller:"InstitutionPageController"}).when("/call-to-action",{templateUrl:"static/dist/templates/call-to-action.html",controller:"CallToActionPageController"}).when("/partners",{templateUrl:"static/dist/templates/partners.html",controller:"PartnersPageController"}).when("/raw-data",{templateUrl:"static/dist/templates/data.html",controller:"DataVizController"}).otherwise({redirectTo:"/introduction"})}]),angular.module("app").filter("suppressions",function(){return function(t){return"-9,999.0"===t||"-9999"===t?"&ddagger;":"-666,666.0"===t||"-666666"===t?"&dagger;":t}}).filter("percent",function(){return function(t){return parseInt(t)>0?t+"%":t}}).filter("anySuppressed",["lodash",function(t){return function(e,n){return e=t.flattenDeep(t.pluck(e,"data")),"undefined"!=typeof n?t.some(e,function(e){return e=t.values(e),-1!==t.indexOf(e,n)}):t.some(e,function(e){return e=t.values(e),-1!==t.indexOf(e,"-666666")||-1!==t.indexOf(e,"-9999")})}}]).filter("any",["lodash",function(t){return function(e,n){return"undefined"!=typeof n?t.some(e,n):t.some(e)}}]).filter("none",["lodash",function(t){return function(e,n){return"undefined"!=typeof n?!t.some(e,n):!t.some(e)}}]).filter("sluggify",function(){return function(t){return t.toLowerCase().replace(/[^a-zA-Z0-9_]/g,"_")}}).filter("safe",["$sce",function(t){return t.trustAsHtml}]),angular.module("app").controller("DataVizController",["$scope","$http","$log","$location","$filter","sidebarDisplay","categories",function(t,e,n,o,a,i,r){t.toggle=i.toggle;var l=r.getCategories("all");l.then(function(e){t.categories=r.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,i.section="Raw Data"})}]),angular.module("app").directive("dataviz",["$window","$http","timeseriesService",function(t,e,n){var o={line:n.chart};return{restrict:"E",scope:{which:"=which",type:"=type"},link:function(t,n,a){t.render=function(){t.data?o[t.type](n[0],result.data,{}):e.get("/static/dist/data/csv/"+t.which+".csv").then(function(e){t.data=e.data,o[t.type](n[0],t.data,{})})},t.$watchCollection("which",function(){t.render()})}}}]),angular.module("app").directive("simpletable",function(){var t=tableChart();return{restrict:"E",scope:{data:"=data"},link:function(e,n,o){e.$watchCollection("data",function(e){d3.select(n[0]).datum(e).call(t)})}}}),angular.module("app").service("timeseriesService",["$q","$http","lodash",function(t,e,n){var o={};return o.chart=function(t,e,o){function a(t){t.each(function(t){var e=this.getBoundingClientRect(),n={top:.01*e.height,right:.01*e.width,bottom:.01*e.height,left:.01*e.width},o=e.width-(n.left+n.right);height=e.height-(n.top+n.bottom),colors=d3.scale.ordinal().range(["#1EACF1","#B94A48"]).domain(t);var a=(d3.select(this).selectAll("div").data(t).enter().append("svg").attr("height",height).attr("width",o).append("g").classed("legend",!0).attr("height",height).attr("width",o).attr("transform","translate("+n.left+", "+n.top+")"),legend.selectAll("g.entry").data(legendData).enter().append("g").attr("data-class",function(t){return sluggify(t)}).attr("class",function(t){var e=["entry",sluggify(t)].join(" ");return e}).attr("transform",function(t,e){return"translate(0, "+19*e+")"}).datum(function(t){return t}));a.each(function(){var t=a.selectAll("tspan").size();d3.select(this).attr("transform",function(e,n){return"translate(0, "+19*n+19*(t-n)+")"}),d3.select(this).append("path").attr("fill",function(t,e){return colors(t)}).attr("stroke",function(t,e){return colors(t)}).attr("stroke-width",0).attr("d",d3.svg.symbol().type(function(t){return symbolScale(t)}).size(25)),d3.select(this).append("text").attr("fill","#4A4A4A").attr("y",6).attr("dx",8).tspans(function(t){return d3.wordwrap(t,20)})}),d3.selectAll("tspan").attr("dx",8)})}function i(t){t.each(function(t){var e=this.getBoundingClientRect(),o={top:.05*e.height,right:.05*e.width,bottom:.1*e.height,left:d3.max([.05*e.width,55])},a=e.width-(o.left+o.right);height=e.height-(o.top+o.bottom),svg=d3.select(this).append("svg").attr("height",e.height).attr("width",e.width),chart=svg.append("g").attr("height",height).attr("width",a).attr("transform","translate("+o.left+", "+o.top+")"),colors=d3.scale.ordinal().range(["#1EACF1","#B94A48"]).domain(r),symbolScale=d3.scale.ordinal().range(d3.svg.symbolTypes).domain(r),timeFormat=d3.time.format("%Y"),timeRange=n.chain(t).map(function(t){return t.Year}).value(),x=d3.time.scale().range([12,a]).domain(d3.extent(timeRange).map(function(t){return timeFormat.parse(t)})),y=d3.scale.linear().range([height,0]).domain(d3.extent(n.chain(t).map(function(t){return r.map(function(e){return+t[e]})}).flatten().unique().value())).nice(5,10),xAxis=d3.svg.axis().scale(x).orient("bottom").ticks(d3.time.year,1),yAxis=d3.svg.axis().scale(y).orient("left").innerTickSize(-a).tickPadding(10),line=d3.svg.line().x(function(t){return x(t.Year)}).y(function(t){return y(t.Value)}),t=r.map(function(e){return{Key:e,Values:n.map(t,function(t){return{Year:timeFormat.parse(t.Year),Value:+t[e]}})}}),chart.append("g").classed({"x-axis":!0,axis:!0}).attr("transform","translate(0, "+height+")").call(xAxis),chart.append("g").classed({"y-axis":!0,axis:!0}).attr("transform","translate(-12, 0)").call(yAxis),chart.selectAll("g.timeseries-lines").data(t).enter().append("g").classed("timeseries-lines",!0).append("path").classed("timeseries-path",!0).attr("d",function(t){return line(t.Values)}).attr("stroke",function(t,e){return colors(t.Key)});var i=t.map(function(t,e,n){return t.Values.map(function(e,n,o){return e.Key=t.Key,e})});i=n.flatten(i),chart.append("g").classed("timeseries-points",!0).selectAll("g").data(i).enter().append("path").attr("stroke",function(t,e){return colors(t.Key)}).attr("d",d3.svg.symbol().type("circle").size(65)).attr("transform",function(t){return"translate("+x(t.Year)+", "+y(t.Value)+")"})})}o.facet=n.difference(["structure","time"],[o.facet])[0],e=d3.csv.parse(e);var r=n.chain(e[0]).keys().filter(function(t){return"Year"!==t}).value();chartContainer=d3.select(t).append("div").classed("timeseries-container",!0).append("div").classed("timeseries-container-internal",!0).datum(e),legendContainer=d3.select(t).append("div").classed({"legend-container":!0,"timeseries-legend-container":!0}),i(chartContainer);var l=legendContainer.selectAll("div.legend").data([r]).enter().append("div").classed({legend:!0,"timeseries-legend":!0});a(l)},o}]),angular.module("app").controller("AboutPageController",["$scope","$http","$log","$location","$routeParams","sidebarDisplay","contributors",function(t,e,n,o,a,i,r){t.toggle=i.toggle;var l=r.getContributors("all");l.then(function(e){t.contributors=r.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!1,i.section="Introduction",t.nextSection="Civic Engagement",t.nextSectionTeaser="Testing",t.nextSectionURL="#/civic-engagement"})}]),angular.module("app").controller("CallToActionPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,o,a){t.toggle=a.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,a.section="Call To Action"})}]),angular.module("app").controller("CohesionPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,o,a){t.toggle=a.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,a.section="Social Networks and Community Cohesion",t.nextSection="Institutional Presence",t.nextSectionTeaser="Stuff about institutions",t.nextSectionURL="#/institutional-presence"})}]),angular.module("app").controller("EngagementPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,o,a){t.toggle=a.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,a.section="Civic Engagement",t.nextSection="Political Participation",t.nextSectionTeaser="Stuff about political participation",t.nextSectionURL="#/political-participation"})}]),angular.module("app").controller("ParticipationPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,o,a){t.toggle=a.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,a.section="Political Participation",t.nextSection="Community Cohesion",t.nextSectionTeaser="Stuff about cohesion",t.nextSectionURL="#/community-cohesion"})}]),angular.module("app").controller("PartnersPageController",["$scope","$http","$log","$location","$routeParams","sidebarDisplay","contributors",function(t,e,n,o,a,i,r){t.toggle=i.toggle;var l=r.getContributors("all");l.then(function(e){t.contributors=r.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,i.section="Partners",t.nextSection="Raw Data",t.nextSectionTeaser="Stuff about raw data",t.nextSectionURL="#/raw-data"})}]),angular.module("app").controller("InstitutionPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,o,a){t.toggle=a.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,a.section="Institutional Presence",t.nextSection="Call to Action",t.nextSectionTeaser="Stuff about call to action",t.nextSectionURL="#/call-to-action"})}]),angular.module("app").service("categories",["$http","$q","lodash",function(t,e,n){var o={};return o.list=[],o.toggle=function(t){position=n.findIndex(o.list,function(e){return e.name==t.name}),o.list[position].selected=!o.list[position].selected},o.getCategories=function(){return e(o.list.length>0?function(t){t(o)}:function(e,a){t.get("/static/dist/data/data.json").success(function(t){list=n.map(n.sortBy(t,"rank"),function(t){return t.data.forEach(function(e,o,a){t.data[o].data=n.sortByAll(t.data[o].data,"rank")}),t=n.extend({},t,{selected:!0})}),o.list=list,e(o)}).error(function(){a("There was an error getting categories")})})},o}]),angular.module("app").service("contributors",["$http","$q",function(t,e){var n={};return n.list=[],n.getContributors=function(){return e(n.list.length>0?function(t){t(n)}:function(e,o){t.get("/static/dist/data/contributors.json").success(function(t){n.list=t,e(n)}).error(function(){o("There was an error getting contributors")})})},n}]),angular.module("app").controller("SidebarController",["$scope","$log","lodash","categories","contributors",function(t,e,n,o,a){var i=o.getCategories();i.then(function(e){t.categories=o.list},function(t){alert("promise rejected!")});var r=a.getContributors();r.then(function(e){t.contributors=a.list},function(t){alert("promise rejected!")}),t.updateSelected=function(t){o.toggle(t)},t.checkSelected=function(t){return t?"selected":"deselected"},t.$watchCollection(function(){return t.toggle},function(){console.log("toggled triggered from sidebar"),console.log(t.toggle)})}]),angular.module("app").service("sidebarDisplay",function(){return{toggle:{open:!0},section:"Introduction"}}),angular.module("app").controller("WrapController",["$scope","sidebarDisplay",function(t,e){t.toggle=e.toggle,t.section=e.section,t.$watchCollection(function(){return t.toggle},function(){console.log("toggled triggered from wrap"),console.log(t.toggle)}),t.$watchCollection(function(){return e.section},function(){t.section=e.section})}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsInJvdXRlcy5qcyIsImZpbHRlcnMuanMiLCJkYXRhdml6L2RhdGF2aXouY29udHJvbGxlci5qcyIsImRhdGF2aXovZGF0YXZpei5kaXJlY3RpdmUuanMiLCJkYXRhdml6L3NpbXBsZXRhYmxlLmRpcmVjdGl2ZS5qcyIsImRhdGF2aXovdGltZXNlcmllcy5zZXJ2aWNlLmpzIiwicGFnZXMvYWJvdXRwYWdlLmNvbnRyb2xsZXIuanMiLCJwYWdlcy9jYWxsdG9hY3Rpb24uY29udHJvbGxlci5qcyIsInBhZ2VzL2NvaGVzaW9uLmNvbnRyb2xsZXIuanMiLCJwYWdlcy9lbmdhZ2VtZW50LmNvbnRyb2xsZXIuanMiLCJwYWdlcy9wYXJ0aWNpcGF0aW9uLmNvbnRyb2xsZXIuanMiLCJwYWdlcy9wYXJ0bmVycy5jb250cm9sbGVycy5qcyIsInBhZ2VzL3ByZXNlbmNlLmNvbnRyb2xsZXIuanMiLCJzaWRlYmFyL2NhdGVnb3JpZXMuc2VydmljZS5qcyIsInNpZGViYXIvY29udHJpYnV0b3JzLnNlcnZpY2UuanMiLCJzaWRlYmFyL3NpZGViYXIuY29udHJvbGxlci5qcyIsInNpZGViYXIvc2lkZWJhcmRpc3BsYXkuc2VydmljZS5qcyIsInNpZGViYXIvd3JhcC5jb250cm9sbGVyLmpzIl0sIm5hbWVzIjpbImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25maWciLCIkcm91dGVQcm92aWRlciIsIiRsb2NhdGlvblByb3ZpZGVyIiwid2hlbiIsInRlbXBsYXRlVXJsIiwiY29udHJvbGxlciIsIm90aGVyd2lzZSIsInJlZGlyZWN0VG8iLCJmaWx0ZXIiLCJpbnB1dCIsInN0ciIsInBhcnNlSW50IiwibG9kYXNoIiwiYXJyIiwic3VwcHJlc3Npb24iLCJmbGF0dGVuRGVlcCIsInBsdWNrIiwic29tZSIsIm8iLCJ2YWx1ZXMiLCJpbmRleE9mIiwicHJvcCIsInRvTG93ZXJDYXNlIiwicmVwbGFjZSIsIiRzY2UiLCJ0cnVzdEFzSHRtbCIsIiRzY29wZSIsIiRodHRwIiwiJGxvZyIsIiRsb2NhdGlvbiIsIiRmaWx0ZXIiLCJzaWRlYmFyRGlzcGxheSIsImNhdGVnb3JpZXMiLCJ0b2dnbGUiLCJwcm9taXNlIiwiZ2V0Q2F0ZWdvcmllcyIsInRoZW4iLCJyZXN1bHQiLCJsaXN0IiwicmVqZWN0aW9uIiwiYWxlcnQiLCIkb24iLCJldmVudCIsIm9wZW4iLCJzZWN0aW9uIiwiZGlyZWN0aXZlIiwiJHdpbmRvdyIsInRpbWVzZXJpZXNTZXJ2aWNlIiwiY2hhcnRzIiwibGluZSIsImNoYXJ0IiwicmVzdHJpY3QiLCJzY29wZSIsIndoaWNoIiwidHlwZSIsImxpbmsiLCJlbGVtZW50IiwiYXR0cnMiLCJyZW5kZXIiLCJkYXRhIiwiZ2V0IiwiJHdhdGNoQ29sbGVjdGlvbiIsInRhYmxlQ2hhcnQiLCJkMyIsInNlbGVjdCIsImRhdHVtIiwiY2FsbCIsInNlcnZpY2UiLCIkcSIsImNvbnRhaW5lciIsIm1ha2VMZWdlbmQiLCJzZWxlY3Rpb24iLCJlYWNoIiwiQkJveCIsInRoaXMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJtYXJnaW4iLCJ0b3AiLCJoZWlnaHQiLCJyaWdodCIsIndpZHRoIiwiYm90dG9tIiwibGVmdCIsImNvbG9ycyIsInNjYWxlIiwib3JkaW5hbCIsInJhbmdlIiwiZG9tYWluIiwibGVnZW5kR3JvdXBzIiwic2VsZWN0QWxsIiwiZW50ZXIiLCJhcHBlbmQiLCJhdHRyIiwiY2xhc3NlZCIsImxlZ2VuZCIsImxlZ2VuZERhdGEiLCJkIiwic2x1Z2dpZnkiLCJjbGFzc2VzIiwiam9pbiIsImkiLCJ0c3BhbkNvdW50Iiwic2l6ZSIsInN2ZyIsInN5bWJvbCIsInN5bWJvbFNjYWxlIiwidHNwYW5zIiwid29yZHdyYXAiLCJtYWtlVGltZVNlcmllcyIsIm1heCIsImxpbmVLZXlzIiwic3ltYm9sVHlwZXMiLCJ0aW1lRm9ybWF0IiwidGltZSIsImZvcm1hdCIsInRpbWVSYW5nZSIsImNoYWluIiwibWFwIiwiWWVhciIsInZhbHVlIiwieCIsImV4dGVudCIsInQiLCJwYXJzZSIsInkiLCJsaW5lYXIiLCJrIiwiZmxhdHRlbiIsInVuaXF1ZSIsIm5pY2UiLCJ4QXhpcyIsImF4aXMiLCJvcmllbnQiLCJ0aWNrcyIsInllYXIiLCJ5QXhpcyIsImlubmVyVGlja1NpemUiLCJ0aWNrUGFkZGluZyIsIlZhbHVlIiwiS2V5IiwiVmFsdWVzIiwieC1heGlzIiwieS1heGlzIiwicG9pbnREYXRhIiwiZGkiLCJkYSIsInYiLCJ2aSIsInZhIiwiZmFjZXQiLCJkaWZmZXJlbmNlIiwiY3N2Iiwia2V5cyIsImNoYXJ0Q29udGFpbmVyIiwibGVnZW5kQ29udGFpbmVyIiwibGVnZW5kLWNvbnRhaW5lciIsInRpbWVzZXJpZXMtbGVnZW5kLWNvbnRhaW5lciIsImxlZ2VuZERpdiIsInRpbWVzZXJpZXMtbGVnZW5kIiwiJHJvdXRlUGFyYW1zIiwiY29udHJpYnV0b3JzIiwiY29udHJpYnV0b3JQcm9taXNlIiwiZ2V0Q29udHJpYnV0b3JzIiwibmV4dFNlY3Rpb24iLCJuZXh0U2VjdGlvblRlYXNlciIsIm5leHRTZWN0aW9uVVJMIiwiY2F0ZWdvcnkiLCJwb3NpdGlvbiIsImZpbmRJbmRleCIsImxpc3RjYXQiLCJuYW1lIiwic2VsZWN0ZWQiLCJsZW5ndGgiLCJyZXNvbHZlIiwicmVqZWN0Iiwic3VjY2VzcyIsInJlc3BvbnNlIiwic29ydEJ5IiwiZm9yRWFjaCIsImluZGljYXRvciIsImlpIiwiaWEiLCJzb3J0QnlBbGwiLCJleHRlbmQiLCJlcnJvciIsImNhdGVnb3J5UHJvbWlzZSIsInVwZGF0ZVNlbGVjdGVkIiwiY2hlY2tTZWxlY3RlZCIsImJvb2wiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiQUFBQSxHQUFBQSxLQUFBQyxRQUFBQyxPQUFBLE9BQ0EsWUFDQSxlQUNBLFdBQ0EsV0NKQUQsU0FBQUMsT0FBQSxPQUNBQyxRQUFBLGlCQUFBLG9CQUFBLFNBQUFDLEVBQUFDLEdBQ0FELEVBQ0FFLEtBQUEsaUJBQ0FDLFlBQUEsMENBQ0FDLFdBQUEsd0JBRUFGLEtBQUEs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QUFBLHFCQUNBLFNBQUEsT0FBQSxTQUFBLGFBQUEsZUFDQSxTQUFBcUIsRUFBQUUsRUFBQWhCLEVBQUFvQixFQUFBZ0ksR0FLQSxHQUFBeUIsR0FBQXpKLEVBQUFHLGVBQ0FzSixHQUFBckosS0FBQSxTQUFBQyxHQUNBWCxFQUFBTSxXQUFBQSxFQUFBTSxNQUNBLFNBQUFDLEdBQ0FDLE1BQUEsc0JBR0EsSUFBQXlILEdBQUFELEVBQUFFLGlCQUNBRCxHQUFBN0gsS0FBQSxTQUFBQyxHQUNBWCxFQUFBc0ksYUFBQUEsRUFBQTFILE1BQ0EsU0FBQUMsR0FDQUMsTUFBQSx1QkFLQWQsRUFBQWdLLGVBQUEsU0FBQXBCLEdBQ0F0SSxFQUFBQyxPQUFBcUksSUFHQTVJLEVBQUFpSyxjQUFBLFNBQUFDLEdBQ0EsTUFBQUEsR0FDQSxXQUVBLGNBR0FsSyxFQUFBbUMsaUJBQUEsV0FDQSxNQUFBbkMsR0FBQU8sUUFDQSxXQUNBNEosUUFBQUMsSUFBQSxrQ0FDQUQsUUFBQUMsSUFBQXBLLEVBQUFPLGFDdkNBbkMsUUFBQUMsT0FBQSxPQUNBb0UsUUFBQSxpQkFBQSxXQUNBLE9BQ0FsQyxRQUFBVSxNQUFBLEdBQ0FDLFFBQUEsa0JDSkE5QyxRQUFBQyxPQUFBLE9BQ0FNLFdBQUEsa0JBQUEsU0FBQSxpQkFBQSxTQUFBcUIsRUFBQUssR0FDQUwsRUFBQU8sT0FBQUYsRUFBQUUsT0FDQVAsRUFBQWtCLFFBQUFiLEVBQUFhLFFBRUFsQixFQUFBbUMsaUJBQUEsV0FDQSxNQUFBbkMsR0FBQU8sUUFDQSxXQUNBNEosUUFBQUMsSUFBQSwrQkFDQUQsUUFBQUMsSUFBQXBLLEVBQUFPLFVBSUFQLEVBQUFtQyxpQkFBQSxXQUNBLE1BQUE5QixHQUFBYSxTQUNBLFdBQ0FsQixFQUFBa0IsUUFBQWIsRUFBQWEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXG4gICAgJ25nQW5pbWF0ZScsXG4gICAgJ3VpLmJvb3RzdHJhcCcsXG4gICAgJ25nTG9kYXNoJyxcbiAgICAnbmdSb3V0ZSdcbiAgICBdKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbmZpZyhmdW5jdGlvbigkcm91dGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcbiAgICAkcm91dGVQcm92aWRlclxuICAgICAgICAud2hlbignL2ludHJvZHVjdGlvbicsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3RhdGljL2Rpc3QvdGVtcGxhdGVzL2ludHJvZHVjdGlvbi5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdBYm91dFBhZ2VDb250cm9sbGVyJ1xuICAgICAgICB9KVxuICAgICAgICAud2hlbignL2NpdmljLWVuZ2FnZW1lbnQnLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0YXRpYy9kaXN0L3RlbXBsYXRlcy9jaXZpYy1lbmdhZ2VtZW50Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0VuZ2FnZW1lbnRQYWdlQ29udHJvbGxlcidcbiAgICAgICAgfSlcbiAgICAgICAgLndoZW4oJy9wb2xpdGljYWwtcGFydGljaXBhdGlvbicsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3RhdGljL2Rpc3QvdGVtcGxhdGVzL3BvbGl0aWNhbC1wYXJ0aWNpcGF0aW9uLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ1BhcnRpY2lwYXRpb25QYWdlQ29udHJvbGxlcidcbiAgICAgICAgfSlcbiAgICAgICAgLndoZW4oJy9jb21tdW5pdHktY29oZXNpb24nLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0YXRpYy9kaXN0L3RlbXBsYXRlcy9jb21tdW5pdHktY29oZXNpb24uaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQ29oZXNpb25QYWdlQ29udHJvbGxlcidcbiAgICAgICAgfSlcbiAgICAgICAgLndoZW4oJy9pbnN0aXR1dGlvbmFsLXByZXNlbmNlJywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdGF0aWMvZGlzdC90ZW1wbGF0ZXMvaW5zdGl0dXRpb25hbC1wcmVzZW5jZS5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdJbnN0aXR1dGlvblBhZ2VDb250cm9sbGVyJ1xuICAgICAgICB9KVxuICAgICAgICAud2hlbignL2NhbGwtdG8tYWN0aW9uJywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdGF0aWMvZGlzdC90ZW1wbGF0ZXMvY2FsbC10by1hY3Rpb24uaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQ2FsbFRvQWN0aW9uUGFnZUNvbnRyb2xsZXInXG4gICAgICAgIH0pXG4gICAgICAgIC53aGVuKCcvcGFydG5lcnMnLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0YXRpYy9kaXN0L3RlbXBsYXRlcy9wYXJ0bmVycy5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdQYXJ0bmVyc1BhZ2VDb250cm9sbGVyJ1xuICAgICAgICB9KVxuICAgICAgICAud2hlbignL3Jhdy1kYXRhJywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdGF0aWMvZGlzdC90ZW1wbGF0ZXMvZGF0YS5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdEYXRhVml6Q29udHJvbGxlcidcbiAgICAgICAgfSlcbiAgICAgICAgLm90aGVyd2lzZSh7XG4gICAgICAgICAgICByZWRpcmVjdFRvOiAnL2ludHJvZHVjdGlvbidcbiAgICAgICAgfSk7XG59KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmZpbHRlcignc3VwcHJlc3Npb25zJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBmdW5jdGlvbihpbnB1dCkge1xuICAgIGlmIChpbnB1dCA9PT0gXCItOSw5OTkuMFwiIHx8IGlucHV0ID09PSBcIi05OTk5XCIpIHtcbiAgICAgICAgcmV0dXJuICcmZGRhZ2dlcjsnO1xuICAgIH0gZWxzZSBpZiAoaW5wdXQgPT09IFwiLTY2Niw2NjYuMFwiIHx8IGlucHV0ID09PSBcIi02NjY2NjZcIikge1xuICAgICAgICByZXR1cm4gJyZkYWdnZXI7JztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICB9O1xufSlcbi5maWx0ZXIoJ3BlcmNlbnQnLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgIGlmIChwYXJzZUludChzdHIpID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0ciArIFwiJVwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICAgfVxuICAgIH1cbn0pXG4uZmlsdGVyKCdhbnlTdXBwcmVzc2VkJywgWydsb2Rhc2gnLCBmdW5jdGlvbihsb2Rhc2gpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXJyLCBzdXBwcmVzc2lvbikge1xuICAgICAgICBhcnIgPSBsb2Rhc2guZmxhdHRlbkRlZXAobG9kYXNoLnBsdWNrKGFyciwgXCJkYXRhXCIpKTtcblxuICAgICAgICBpZiAodHlwZW9mIHN1cHByZXNzaW9uICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImNoZWNraW5nIHN1cHByZXNzaW9uOiBcIitzdXBwcmVzc2lvbik7XG4gICAgICAgICAgICByZXR1cm4gbG9kYXNoLnNvbWUoYXJyLCBmdW5jdGlvbihvKSB7XG4gICAgICAgICAgICAgICAgbyA9IGxvZGFzaC52YWx1ZXMobyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvZGFzaC5pbmRleE9mKG8sIHN1cHByZXNzaW9uKSAhPT0gLTE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGFzc3VtZSB0byBjaGVjayBlaXRoZXIgc3VwcHJlc3Npb25cbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiY2hlY2tpbmcgYm90aCBzdXBwcmVzc2lvbiB0eXBlc1wiKTtcbiAgICAgICAgICAgIHJldHVybiBsb2Rhc2guc29tZShhcnIsIGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgICAgICAgICBvID0gbG9kYXNoLnZhbHVlcyhvKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9kYXNoLmluZGV4T2YobywgJy02NjY2NjYnKSAhPT0gLTEgfHwgbG9kYXNoLmluZGV4T2YobywgJy05OTk5JykgIT09IC0xO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XSlcbi5maWx0ZXIoJ2FueScsIFsnbG9kYXNoJywgZnVuY3Rpb24obG9kYXNoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFyciwgcHJvcCkge1xuICAgICAgICBpZiAodHlwZW9mIHByb3AgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2Rhc2guc29tZShhcnIsIHByb3ApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbG9kYXNoLnNvbWUoYXJyKVxuICAgICAgICB9XG4gICAgfVxufV0pXG4uZmlsdGVyKCdub25lJywgWydsb2Rhc2gnLCBmdW5jdGlvbihsb2Rhc2gpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXJyLCBwcm9wKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJvcCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgcmV0dXJuICFsb2Rhc2guc29tZShhcnIsIHByb3ApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gIWxvZGFzaC5zb21lKGFycilcbiAgICAgICAgfVxuICAgIH1cbn1dKVxuLmZpbHRlcignc2x1Z2dpZnknLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW15hLXpBLVowLTlfXS9nLCBcIl9cIilcbiAgICB9O1xufSlcbi5maWx0ZXIoJ3NhZmUnLCBbJyRzY2UnLCBmdW5jdGlvbigkc2NlKSB7XG4gICAgcmV0dXJuICRzY2UudHJ1c3RBc0h0bWw7XG59XSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ0RhdGFWaXpDb250cm9sbGVyJyxcbiAgICAgICAgWyckc2NvcGUnLCAnJGh0dHAnLCAnJGxvZycsICckbG9jYXRpb24nLCAnJGZpbHRlcicsICdzaWRlYmFyRGlzcGxheScsICdjYXRlZ29yaWVzJyxcbiAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwLCAkbG9nLCAkbG9jYXRpb24sICRmaWx0ZXIsIHNpZGViYXJEaXNwbGF5LCBjYXRlZ29yaWVzKSB7XG4gICAgICAgICAgICAgICAgJHNjb3BlLnRvZ2dsZSA9IHNpZGViYXJEaXNwbGF5LnRvZ2dsZTtcblxuICAgICAgICAgICAgICAgIHZhciBwcm9taXNlID0gY2F0ZWdvcmllcy5nZXRDYXRlZ29yaWVzKFwiYWxsXCIpO1xuICAgICAgICAgICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jYXRlZ29yaWVzID0gY2F0ZWdvcmllcy5saXN0O1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChyZWplY3Rpb24pIHtcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJwcm9taXNlIHJlamVjdGVkIVwiKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICRzY29wZS4kb24oJyR2aWV3Q29udGVudExvYWRlZCcsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG9nZ2xlLm9wZW4gPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICBzaWRlYmFyRGlzcGxheS5zZWN0aW9uID0gJ1JhdyBEYXRhJztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1dKVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uZGlyZWN0aXZlKCdkYXRhdml6JywgWyckd2luZG93JywgJyRodHRwJywgJ3RpbWVzZXJpZXNTZXJ2aWNlJywvKiAnYmFyQ2hhcnRTZXJ2aWNlJywgKi9mdW5jdGlvbigkd2luZG93LCAkaHR0cCwgdGltZXNlcmllc1NlcnZpY2UvKiwgYmFyQ2hhcnRTZXJ2aWNlKi8pIHtcbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHNob3VsZCByZWZsZWN0IHdoYXRldmVyIHlvdXIgZDMgZnVuY3Rpb24gaXMgY2FsbGVkLlxuICAgIHZhciBjaGFydHMgPSB7XG4gICAgICAgIFwibGluZVwiIDogdGltZXNlcmllc1NlcnZpY2UuY2hhcnQsXG4gICAgICAgIC8vIFwiYmFyXCIgOiBiYXJDaGFydFNlcnZpY2UuY2hhcnQsXG4gICAgICAgIC8vIFwiZ3JvdXBlZEJhclwiIDogZ3JvdXBlZEJhckNoYXJ0U2VydmljZS5jaGFydCxcbiAgICAgICAgLy8gXCJ0YWJsZVwiIDogdGFibGVTZXJ2aWNlLmNoYXJ0XG4gICAgfTtcbiAgICByZXR1cm4gIHtcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgIHdoaWNoOiBcIj13aGljaFwiLFxuICAgICAgICAgICAgdHlwZTogXCI9dHlwZVwiXG4gICAgICAgIH0sXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgICAgc2NvcGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgLy8gZGF0YSA9IHtcbiAgICAgICAgICAgICAgICAvLyAgICAgZGF0YSA6IHNjb3BlLmRhdGEsXG4gICAgICAgICAgICAgICAgLy8gICAgIGNvbmZpZyA6IHNjb3BlLmNvbmZpZ1xuICAgICAgICAgICAgICAgIC8vIH07XG5cbiAgICAgICAgICAgICAgICBpZiAoc2NvcGUuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBjaGFydHNbc2NvcGUudHlwZV0oZWxlbWVudFswXSwgcmVzdWx0LmRhdGEsIHt9KTsgLy9zY29wZS5jb25maWdcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkaHR0cC5nZXQoXCIvc3RhdGljL2Rpc3QvZGF0YS9jc3YvXCIgKyBzY29wZS53aGljaCArIFwiLmNzdlwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuZGF0YSA9IHJlc3VsdC5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0c1tzY29wZS50eXBlXShlbGVtZW50WzBdLCBzY29wZS5kYXRhLCB7fSk7IC8vc2NvcGUuY29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oJ3doaWNoJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUucmVuZGVyKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgVGhpcyBjb2RlIGlzIGludGVuZGVkIHRvIGdldCB0aGUgY2hhcnQgdG8gcmVkcmF3IHdoZW4gdGhlIHdpbmRvdyBpcyByZXNpemVkXG4gICAgICAgICAgICAgICAgQnV0IGFzIGl0IHN0YW5kcywgc29tZWhvdyB0aGlzIG92ZXJyaWRlcyB0aGUgZGF0YSBhbmQgdGhlIGNoYXJ0IGJlY29tZXMgdXNlbGVzcy5cbiAgICAgICAgICAgICAgICBJIGRvbid0IHRoaW5rIHRoaXMgZmVhdHVyZSBpcyB3b3J0aCB0aGUgZGVidWcgdGltZSBub3csIGJ1dCBpdCdzIHdvcnRoIGtlZXBpbmcgaW4gbWluZCBmb3IgdGhlIGZ1dHVyZS5cbiAgICAgICAgICAgICoqL1xuICAgICAgICAgICAgLy8gJHdpbmRvdy5vbnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gICAgIHNjb3BlLnJlbmRlcigpXG4gICAgICAgICAgICAvLyB9O1xuXG4gICAgICAgICAgICAvLyBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKCdkYXRhJywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgLy8gICAgIHNjb3BlLnJlbmRlcihkYXRhKTtcbiAgICAgICAgICAgIC8vIH0pO1xuXG4gICAgICAgIH1cbiAgICB9XG59XSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmRpcmVjdGl2ZSgnc2ltcGxldGFibGUnLCBmdW5jdGlvbigpIHtcbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHNob3VsZCByZWZsZWN0IHdoYXRldmVyIHlvdXIgZDMgdGFibGUgZnVuY3Rpb24gaXMgY2FsbGVkLlxuICAgIHZhciBjaGFydCA9IHRhYmxlQ2hhcnQoKTtcbiAgICByZXR1cm4gIHtcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgIGRhdGE6IFwiPWRhdGFcIiAvLyBXZSBjYW4gY2FsbCB0aGlzIHcvZSB3ZSB3YW50LlxuICAgICAgICB9LFxuICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgICAgIHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oJ2RhdGEnLCBmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgZDMuc2VsZWN0KGVsZW1lbnRbMF0pLmRhdHVtKGRhdGEpLmNhbGwoY2hhcnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59KVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgndGltZXNlcmllc1NlcnZpY2UnLCBbJyRxJywgJyRodHRwJywgJ2xvZGFzaCcsIGZ1bmN0aW9uKCRxLCAkaHR0cCwgbG9kYXNoKSB7XG4gICAgdmFyIHRpbWVzZXJpZXNTZXJ2aWNlID0ge307XG5cbiAgICB0aW1lc2VyaWVzU2VydmljZS5jaGFydCA9IGZ1bmN0aW9uKGNvbnRhaW5lciwgZGF0YSwgY29uZmlnKSB7XG4gICAgICAgIHZhciB0aW1lRm9ybWF0cyA9IHtcbiAgICAgICAgICAgIFwieWVhclwiIDogXCJZWVlZXCIsXG4gICAgICAgICAgICBcInF1YXJ0ZXJcIiA6IFwiW1FdUSBZWVlZXCIsXG4gICAgICAgICAgICBcIm1vbnRoXCIgOiBcIk1NTSBZWVlZXCJcbiAgICAgICAgfTtcblxuICAgICAgICBjb25maWcuZmFjZXQgPSBsb2Rhc2guZGlmZmVyZW5jZShbXCJzdHJ1Y3R1cmVcIiwgXCJ0aW1lXCJdLCBbY29uZmlnLmZhY2V0XSlbMF1cblxuICAgICAgICAvLyBjb252ZXJ0IGRhdGEgZnJvbSBzdHJpbmcgLT4gYXJyYXkgb2Ygb2JqXG4gICAgICAgIGRhdGEgPSBkMy5jc3YucGFyc2UoZGF0YSk7XG5cbiAgICAgICAgLy8ga2V5cyBmb3IgY29sb3IgYW5kIHNoYXBlIHNjYWxlc1xuICAgICAgICB2YXIgbGluZUtleXMgPSBsb2Rhc2guY2hhaW4oZGF0YVswXSlcbiAgICAgICAgICAgIC5rZXlzKClcbiAgICAgICAgICAgIC5maWx0ZXIoZnVuY3Rpb24oaykgeyByZXR1cm4gayAhPT0gXCJZZWFyXCI7IH0pXG4gICAgICAgICAgICAudmFsdWUoKTtcblxuICAgICAgICAvLyBjcmVhdGUgY29udGFpbmVyIGZvciBtYXBzXG4gICAgICAgIGNoYXJ0Q29udGFpbmVyID0gZDMuc2VsZWN0KGNvbnRhaW5lcilcbiAgICAgICAgICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgICAgICAgICAuY2xhc3NlZChcInRpbWVzZXJpZXMtY29udGFpbmVyXCIsIHRydWUpXG4gICAgICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJ0aW1lc2VyaWVzLWNvbnRhaW5lci1pbnRlcm5hbFwiLCB0cnVlKVxuICAgICAgICAgICAgICAgIC5kYXR1bShkYXRhKTtcblxuICAgICAgICAvLyBjcmVhdGUgY29udGFpbmVyIGZvciBsZWdlbmRzXG4gICAgICAgIGxlZ2VuZENvbnRhaW5lciA9IGQzLnNlbGVjdChjb250YWluZXIpXG4gICAgICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgICAgICAuY2xhc3NlZCh7XG4gICAgICAgICAgICAgICAgXCJsZWdlbmQtY29udGFpbmVyXCIgOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwidGltZXNlcmllcy1sZWdlbmQtY29udGFpbmVyXCIgOiB0cnVlLFxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gY2hhcnRDb250YWluZXIuYXBwZW5kKFwicHJlXCIpXG4gICAgICAgICAgICAvLyAudGV4dChKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCA0KSk7XG4gICAgICAgICAgICAvLyAudGV4dChKU09OLnN0cmluZ2lmeShjb25maWcsIG51bGwsIDQpKTtcbiAgICAgICAgLy8gcmV0dXJuO1xuXG4gICAgICAgIG1ha2VUaW1lU2VyaWVzKGNoYXJ0Q29udGFpbmVyKTtcblxuICAgICAgICB2YXIgbGVnZW5kRGl2ID0gbGVnZW5kQ29udGFpbmVyLnNlbGVjdEFsbChcImRpdi5sZWdlbmRcIilcbiAgICAgICAgICAgIC5kYXRhKFtsaW5lS2V5c10pXG4gICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgICAgICAgICAgICAgXCJsZWdlbmRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgXCJ0aW1lc2VyaWVzLWxlZ2VuZFwiOiB0cnVlXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICBtYWtlTGVnZW5kKGxlZ2VuZERpdik7XG5cbiAgICAgICAgLy8gLyoqIFNUQVJUIFNDUk9MTCBOT1RJQ0UgKiovXG4gICAgICAgIC8vIC8vIGlmIHdlIGFyZSB1bmRlciBhIGNlcnRhaW4gcGl4ZWwgc2l6ZSwgdGhlcmUgd2lsbCBiZSBob3Jpem9udGFsIHNjcm9sbGluZ1xuICAgICAgICAvLyB2YXIgaW50ZXJuYWxDb250YWluZXJTaXplID0gZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0KFwiZGl2LnRpbWVzZXJpZXMtY29udGFpbmVyLWludGVybmFsXCIpLm5vZGUoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgLy8gICAgIGNvbnRhaW5lclNpemUgPSBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3QoXCJkaXYudGltZXNlcmllcy1jb250YWluZXJcIikubm9kZSgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIC8vIC8vIGNvbnNvbGUubG9nKGludGVybmFsQ29udGFpbmVyU2l6ZS53aWR0aCArIFwiIC8gXCIgKyBjb250YWluZXJTaXplLndpZHRoKVxuICAgICAgICAvLyBpZiAoaW50ZXJuYWxDb250YWluZXJTaXplLndpZHRoID4gY29udGFpbmVyU2l6ZS53aWR0aCkge1xuICAgICAgICAvLyAgICAgLy8gY29uc29sZS5sb2coXCJzY3JvbGwgTm90aWNlIVwiKVxuICAgICAgICAvLyAgICAgLy8gY3JlYXRlIHNjcm9sbCBub3RpY2VcbiAgICAgICAgLy8gICAgIHZhciBzY3JvbGxOb3RpY2UgPSBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3QoXCJkaXYudGltZXNlcmllcy1jb250YWluZXJcIikuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgIC8vICAgICAgICAgLmNsYXNzZWQoXCJzY3JvbGwtbm90aWNlXCIsIHRydWUpXG4gICAgICAgIC8vICAgICAgICAgLmFwcGVuZChcInBcIik7XG5cbiAgICAgICAgLy8gICAgIHNjcm9sbE5vdGljZS5hcHBlbmQoXCJpXCIpXG4gICAgICAgIC8vICAgICAgICAgLmNsYXNzZWQoe1xuICAgICAgICAvLyAgICAgICAgICAgICBcImZhXCIgOiB0cnVlLFxuICAgICAgICAvLyAgICAgICAgICAgICBcImZhLWFuZ2xlLWRvdWJsZS1kb3duIFwiIDogdHJ1ZVxuICAgICAgICAvLyAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vICAgICBzY3JvbGxOb3RpY2UuYXBwZW5kKFwic3BhblwiKVxuICAgICAgICAvLyAgICAgICAgIC50ZXh0KFwiU2Nyb2xsIGZvciBtb3JlXCIpO1xuXG4gICAgICAgIC8vICAgICBzY3JvbGxOb3RpY2UuYXBwZW5kKFwiaVwiKVxuICAgICAgICAvLyAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICAgICAgXCJmYVwiIDogdHJ1ZSxcbiAgICAgICAgLy8gICAgICAgICAgICAgXCJmYS1hbmdsZS1kb3VibGUtZG93biBcIiA6IHRydWVcbiAgICAgICAgLy8gICAgICAgICB9KTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImRpdi50aW1lc2VyaWVzLWNvbnRhaW5lclwiKS5vbihcInNjcm9sbFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gICAgIC8vIGlmIHNjcm9sbCBhdCBib3R0b20sIGhpZGUgc2Nyb2xsIG5vdGljZVxuICAgICAgICAvLyAgICAgLy8gdXNpbmcgYSBkaWZmZXJlbnQgY2xhc3Mgc28gYXMgbm90IHRvIGludGVyZmVyZSB3aXRoIHRoZSBtb3VzZW92ZXIgZWZmZWN0c1xuICAgICAgICAvLyAgICAgaWYgKChkMy5zZWxlY3QodGhpcykubm9kZSgpLnNjcm9sbExlZnQgKyBkMy5zZWxlY3QodGhpcykubm9kZSgpLm9mZnNldFdpZHRoKSA+PSAoZDMuc2VsZWN0KHRoaXMpLm5vZGUoKS5zY3JvbGxXaWR0aCAqIDAuOTc1KSkge1xuICAgICAgICAvLyAgICAgICAgIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImRpdi5zY3JvbGwtbm90aWNlXCIpXG4gICAgICAgIC8vICAgICAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIFwiaGlkZGVuXCIgOiB0cnVlXG4gICAgICAgIC8vICAgICAgICAgICAgIH0pO1xuICAgICAgICAvLyAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gICAgICAgICBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJkaXYuc2Nyb2xsLW5vdGljZVwiKVxuICAgICAgICAvLyAgICAgICAgICAgICAuY2xhc3NlZCh7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBcImhpZGRlblwiIDogZmFsc2VcbiAgICAgICAgLy8gICAgICAgICAgICAgfSk7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0pXG4gICAgICAgIC8vIC8qKiBFTkQgU0NST0xMIE5PVElDRSAqKi9cblxuICAgICAgICAvLyAvLyBhZGQgaG92ZXIgZWZmZWN0cyAtIHVzZSBjbGFzc2VzIFwiaGlnaGxpZ2h0XCIgYW5kIFwibG93bGlnaHRcIlxuICAgICAgICAvLyBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJnLmVudHJ5LCBnLnRpbWVzZXJpZXMtbGluZXMgPiBwYXRoLCBnLnRpbWVzZXJpZXMtcG9pbnRzID4gcGF0aFwiKVxuICAgICAgICAvLyAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgLy8gICAgIHZhciBjbGFzc1RvSGlnaGxpZ2h0ID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoXCJkYXRhLWNsYXNzXCIpO1xuXG4gICAgICAgIC8vICAgICAvLyBsb3dsaWdodCBhbGwgZWxlbWVudHNcbiAgICAgICAgLy8gICAgIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImcuZW50cnksIGcudGltZXNlcmllcy1saW5lcyA+IHBhdGgsIGcudGltZXNlcmllcy1wb2ludHMgPiBwYXRoLCBkaXYuc2Nyb2xsLW5vdGljZVwiKVxuICAgICAgICAvLyAgICAgLmNsYXNzZWQoe1xuICAgICAgICAvLyAgICAgICAgIFwibG93bGlnaHRcIiA6IHRydWUsXG4gICAgICAgIC8vICAgICAgICAgXCJoaWdobGlnaHRcIiA6IGZhbHNlXG4gICAgICAgIC8vICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAvLyAgICAgLy8gaGlnaGxpZ2h0IGFsbCBlbGVtZW50cyB3aXRoIG1hdGNoaW5nIGRhdGEtY2xhc3NcbiAgICAgICAgLy8gICAgIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImcuZW50cnkuXCIrY2xhc3NUb0hpZ2hsaWdodCtcIiwgZy50aW1lc2VyaWVzLWxpbmVzID4gcGF0aC5cIitjbGFzc1RvSGlnaGxpZ2h0K1wiLCBnLnRpbWVzZXJpZXMtcG9pbnRzIHBhdGguXCIrY2xhc3NUb0hpZ2hsaWdodClcbiAgICAgICAgLy8gICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICBcImxvd2xpZ2h0XCIgOiBmYWxzZSxcbiAgICAgICAgLy8gICAgICAgICBcImhpZ2hsaWdodFwiIDogdHJ1ZVxuICAgICAgICAvLyAgICAgfSk7XG4gICAgICAgIC8vIH0pXG4gICAgICAgIC8vIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vICAgICAvLyByZW1vdmUgYWxsIGhpZ2hsaWdodC9sb3dsaWdodCBjbGFzc2VzXG4gICAgICAgIC8vICAgICBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJnLmVudHJ5LCBnLnRpbWVzZXJpZXMtbGluZXMgPiBwYXRoLCBnLnRpbWVzZXJpZXMtcG9pbnRzID4gcGF0aCwgZGl2LnNjcm9sbC1ub3RpY2VcIilcbiAgICAgICAgLy8gICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICBcImxvd2xpZ2h0XCIgOiBmYWxzZSxcbiAgICAgICAgLy8gICAgICAgICBcImhpZ2hsaWdodFwiIDogZmFsc2VcbiAgICAgICAgLy8gICAgIH0pO1xuICAgICAgICAvLyB9KTtcblxuICAgICAgICBmdW5jdGlvbiBtYWtlTGVnZW5kKHNlbGVjdGlvbikge1xuICAgICAgICAgICAgc2VsZWN0aW9uLmVhY2goZnVuY3Rpb24oZGF0YSkge1xuXG4gICAgICAgICAgICAgICAgLy8gc2l6aW5nIGFuZCBtYXJnaW4gdmFyc1xuICAgICAgICAgICAgICAgIHZhciBCQm94ID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgICAgICBtYXJnaW4gPSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFwidG9wXCIgOiBkMy5tYXgoW0JCb3guaGVpZ2h0ICogMC4wOCwgMzJdKSxcbiAgICAgICAgICAgICAgICAgICAgXCJ0b3BcIiA6IEJCb3guaGVpZ2h0ICogMC4wMSxcbiAgICAgICAgICAgICAgICAgICAgXCJyaWdodFwiIDogQkJveC53aWR0aCAqIDAuMDEsXG4gICAgICAgICAgICAgICAgICAgIFwiYm90dG9tXCIgOiBCQm94LmhlaWdodCAqIDAuMDEsXG4gICAgICAgICAgICAgICAgICAgIFwibGVmdFwiIDogQkJveC53aWR0aCAqIDAuMDFcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHdpZHRoID0gQkJveC53aWR0aCAtIChtYXJnaW4ubGVmdCArIG1hcmdpbi5yaWdodClcbiAgICAgICAgICAgICAgICBoZWlnaHQgPSBCQm94LmhlaWdodCAtIChtYXJnaW4udG9wICsgbWFyZ2luLmJvdHRvbSksXG5cbiAgICAgICAgICAgICAgICAvLyAvLyBjb250YWluZXJzXG4gICAgICAgICAgICAgICAgLy8gc3ZnID0gZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgICAgLy8gICAgIC5hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodClcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGgpXG5cbiAgICAgICAgICAgICAgICAvLyBjb2xvciBzY2FsZVxuICAgICAgICAgICAgICAgIGNvbG9ycyA9IGQzLnNjYWxlLm9yZGluYWwoKVxuICAgICAgICAgICAgICAgICAgICAucmFuZ2UoW1wiIzFFQUNGMVwiLCBcIiNCOTRBNDhcIl0pXG4gICAgICAgICAgICAgICAgICAgIC5kb21haW4oZGF0YSk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbGVnZW5kRW50cmllcyA9IGQzLnNlbGVjdCh0aGlzKVxuICAgICAgICAgICAgICAgICAgICAuc2VsZWN0QWxsKFwiZGl2XCIpXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKGRhdGEpXG4gICAgICAgICAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGgpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwibGVnZW5kXCIsIHRydWUpXG4gICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aClcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLCBcIiArIG1hcmdpbi50b3AgKyBcIilcIik7XG5cbiAgICAgICAgICAgICAgICB2YXIgbGVnZW5kR3JvdXBzID0gbGVnZW5kLnNlbGVjdEFsbChcImcuZW50cnlcIilcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEobGVnZW5kRGF0YSlcbiAgICAgICAgICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcImRhdGEtY2xhc3NcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzbHVnZ2lmeShkKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2xhc3NlcyA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJlbnRyeVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzbHVnZ2lmeShkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0uam9pbihcIiBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsYXNzZXM7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCwgaSkgeyByZXR1cm4gXCJ0cmFuc2xhdGUoMCwgXCIgKyAoMTkgKiBpKSArIFwiKVwiO30pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZGF0dW0oZnVuY3Rpb24oZCkgeyByZXR1cm4gZDsgfSk7XG5cbiAgICAgICAgICAgICAgICBsZWdlbmRHcm91cHMuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRzcGFuQ291bnQgPSBsZWdlbmRHcm91cHMuc2VsZWN0QWxsKFwidHNwYW5cIikuc2l6ZSgpO1xuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkLCBpKSB7IHJldHVybiBcInRyYW5zbGF0ZSgwLCBcIiArICgxOSAqIGkpICsgKCh0c3BhbkNvdW50IC0gaSkgKiAxOSkgKyBcIilcIjt9KVxuXG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcImZpbGxcIiwgZnVuY3Rpb24oZCwgaSkge3JldHVybiBjb2xvcnMoZCk7IH0gKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgZnVuY3Rpb24oZCwgaSkge3JldHVybiBjb2xvcnMoZCk7IH0gKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJzdHJva2Utd2lkdGhcIiwgMClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiZFwiLCBkMy5zdmcuc3ltYm9sKCkudHlwZShmdW5jdGlvbihkKSB7cmV0dXJuIHN5bWJvbFNjYWxlKGQpOyB9KS5zaXplKDI1KSk7XG5cbiAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiZmlsbFwiLCBcIiM0QTRBNEFcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCA2KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJkeFwiLCA4KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRzcGFucyhmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQzLndvcmR3cmFwKGQsIDIwKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAvLyBhbGwgc3BhbnMgYXJlIGJ5IGRlZmF1bHQgdW5zdHlsZWQsIHdpdGggbm8gd2F5IHRvIGRvIGl0IGluIGpldHBhY2ssXG4gICAgICAgICAgICAgICAgLy8gc28gaW4gb3JkZXIgdG8gZmlnaHQgdGhlIGhhbmdpbmcgaW5kZW50IGVmZmVjdCwgbW92ZSB0aGVtIG92ZXIgOCBweFxuICAgICAgICAgICAgICAgIGQzLnNlbGVjdEFsbChcInRzcGFuXCIpLmF0dHIoXCJkeFwiLCA4KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBtYWtlVGltZVNlcmllcyhzZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHNlbGVjdGlvbi5lYWNoKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAvLyBzaXppbmcgYW5kIG1hcmdpbiB2YXJzXG4gICAgICAgICAgICAgICAgdmFyIEJCb3ggPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInRvcFwiIDogQkJveC5oZWlnaHQgKiAwLjA1LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJyaWdodFwiIDogQkJveC53aWR0aCAqIDAuMDUsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJvdHRvbVwiIDogQkJveC5oZWlnaHQgKiAwLjEsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImxlZnRcIiA6IGQzLm1heChbQkJveC53aWR0aCAqIDAuMDUsIDU1XSlcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBCQm94LndpZHRoIC0gKG1hcmdpbi5sZWZ0ICsgbWFyZ2luLnJpZ2h0KVxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBCQm94LmhlaWdodCAtIChtYXJnaW4udG9wICsgbWFyZ2luLmJvdHRvbSksXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gY29udGFpbmVyc1xuICAgICAgICAgICAgICAgICAgICBzdmcgPSBkMy5zZWxlY3QodGhpcykuYXBwZW5kKFwic3ZnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBCQm94LmhlaWdodClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgQkJveC53aWR0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsIDApXCIpLFxuICAgICAgICAgICAgICAgICAgICBjaGFydCA9IHN2Zy5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcImhlaWdodFwiLCBoZWlnaHQpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHdpZHRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLCBcIiArIG1hcmdpbi50b3AgKyBcIilcIiksXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRlc3Rpbmcgc3R1ZmYgLSBkcmF3cyBvdXRsaW5lcyBhcm91bmQgc3ZnIGFuZCBjb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgLy8gc3ZnT3V0bGluZSA9IHN2Zy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAuYXR0cihcImhlaWdodFwiLCBzdmcuYXR0cihcImhlaWdodFwiKSlcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5hdHRyKFwid2lkdGhcIiwgc3ZnLmF0dHIoXCJ3aWR0aFwiKSlcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5hdHRyKFwiZmlsbFwiLCBcInJnYmEoMCwwLDAsMClcIilcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5hdHRyKFwic3Ryb2tlXCIsIFwicmVkXCIpLFxuICAgICAgICAgICAgICAgICAgICAvLyBjaGFydE91dGxpbmUgPSBzdmcuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLCBcIiArIG1hcmdpbi50b3AgKyBcIilcIilcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGNoYXJ0LmF0dHIoXCJoZWlnaHRcIikpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAuYXR0cihcIndpZHRoXCIsIGNoYXJ0LmF0dHIoXCJ3aWR0aFwiKSlcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5hdHRyKFwiZmlsbFwiLCBcInJnYmEoMCwwLDAsMClcIilcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5hdHRyKFwic3Ryb2tlXCIgLFwiYmx1ZVwiKSxcblxuICAgICAgICAgICAgICAgICAgICAvLyBjb2xvciBzY2FsZVxuICAgICAgICAgICAgICAgICAgICBjb2xvcnMgPSBkMy5zY2FsZS5vcmRpbmFsKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yYW5nZShbXCIjMUVBQ0YxXCIsIFwiI0I5NEE0OFwiXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kb21haW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGluZUtleXNcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gcG9pbnQgc2hhcGUgXCJzY2FsZVwiXG4gICAgICAgICAgICAgICAgICAgIHN5bWJvbFNjYWxlID0gZDMuc2NhbGUub3JkaW5hbCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmFuZ2UoZDMuc3ZnLnN5bWJvbFR5cGVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRvbWFpbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lS2V5c1xuICAgICAgICAgICAgICAgICAgICAgICAgKSxcblxuICAgICAgICAgICAgICAgICAgICAvLyB4IGFuZCB5IHNjYWxlc1xuICAgICAgICAgICAgICAgICAgICB0aW1lRm9ybWF0ID0gZDMudGltZS5mb3JtYXQoXCIlWVwiKSxcbiAgICAgICAgICAgICAgICAgICAgdGltZVJhbmdlID0gbG9kYXNoLmNoYWluKGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5ZZWFyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC52YWx1ZSgpLFxuICAgICAgICAgICAgICAgICAgICB4ID0gZDMudGltZS5zY2FsZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmFuZ2UoWzEyLCB3aWR0aF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZG9tYWluKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQzLmV4dGVudCh0aW1lUmFuZ2UpLm1hcChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aW1lRm9ybWF0LnBhcnNlKHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICB5ID0gZDMuc2NhbGUubGluZWFyKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yYW5nZShbaGVpZ2h0LCAwXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kb21haW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZDMuZXh0ZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2Rhc2guY2hhaW4oZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsaW5lS2V5cy5tYXAoZnVuY3Rpb24oayl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiArZFtrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmxhdHRlbigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudW5pcXVlKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC52YWx1ZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKS8vLm1hcChmdW5jdGlvbih2LCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICByZXR1cm4gKE1hdGguY2VpbCh2LzEwKSAqIDEwKSAtIDEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgcmV0dXJuIChNYXRoLmZsb29yKHYvMTApICogMTApICsgMTA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm5pY2UoNSwgMTApLFxuXG4gICAgICAgICAgICAgICAgICAgIC8vIC8vIGF4aXMgZnVuY3Rpb25zXG4gICAgICAgICAgICAgICAgICAgIHhBeGlzID0gZDMuc3ZnLmF4aXMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNjYWxlKHgpXG4gICAgICAgICAgICAgICAgICAgICAgICAub3JpZW50KFwiYm90dG9tXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGlja3MoZDMudGltZS55ZWFyLCAxKSxcbiAgICAgICAgICAgICAgICAgICAgeUF4aXMgPSBkMy5zdmcuYXhpcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2NhbGUoeSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vcmllbnQoXCJsZWZ0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuaW5uZXJUaWNrU2l6ZSgtd2lkdGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGlja1BhZGRpbmcoMTApLFxuXG4gICAgICAgICAgICAgICAgICAgIC8vIC8vIGxpbmUgY2hhcnRpbmcgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgbGluZSA9IGQzLnN2Zy5saW5lKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC54KGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geChkLlllYXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAueShmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHkoZC5WYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgICAgICAgICAvLyAvLyBzbHVnIGZ1bmN0aW9uIGZvciBjbGFzc2luZyBhbmQgaGlnaGxpZ2h0aW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIHNsdWdnaWZ5ID0gZnVuY3Rpb24odGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgcmV0dXJuIHRleHQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgXCJfXCIpO1xuICAgICAgICAgICAgICAgICAgICAvLyB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc2hhcGUgZGF0YSBmb3IgbGluZXNcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGxpbmVLZXlzLm1hcChmdW5jdGlvbihrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiS2V5XCIgOiBrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZhbHVlcyA6IGxvZGFzaC5tYXAoZGF0YSwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcIlllYXJcIiA6IHRpbWVGb3JtYXQucGFyc2UoZC5ZZWFyKSwgXCJWYWx1ZVwiIDogK2Rba119XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gLy8gdGVzdCBvdXRwdXQgZm9yIHRyb3VibGVzaG9vdGluZyB0aGUgZGF0YSBzdHVmZlxuICAgICAgICAgICAgICAgICAgICAvLyBkMy5zZWxlY3QodGhpcykuYXBwZW5kKFwicHJlXCIpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAudGV4dChKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCA0KSlcbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0LmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIngtYXhpc1wiIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImF4aXNcIiA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLCBcIiArIGhlaWdodCArIFwiKVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhbGwoeEF4aXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0LmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInktYXhpc1wiIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImF4aXNcIiA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgtMTIsIDApXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2FsbCh5QXhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgY2hhcnQuc2VsZWN0QWxsKFwiZy50aW1lc2VyaWVzLWxpbmVzXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZGF0YShkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJ0aW1lc2VyaWVzLWxpbmVzXCIsIHRydWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJ0aW1lc2VyaWVzLXBhdGhcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJkXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsaW5lKGQuVmFsdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbG9ycyhkLktleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBwb2ludERhdGEgPSBkYXRhLm1hcChmdW5jdGlvbihkLCBkaSwgZGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkLlZhbHVlcy5tYXAoZnVuY3Rpb24odiwgdmksIHZhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdi5LZXkgPSBkLktleTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICBwb2ludERhdGEgPSBsb2Rhc2guZmxhdHRlbihwb2ludERhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0LmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwidGltZXNlcmllcy1wb2ludHNcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZGF0YShwb2ludERhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgZnVuY3Rpb24oZCwgaSkge3JldHVybiBjb2xvcnMoZC5LZXkpOyB9IClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcImRcIiwgZDMuc3ZnLnN5bWJvbCgpLnR5cGUoXCJjaXJjbGVcIikuc2l6ZSg2NSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB4KGQuWWVhcikgKyBcIiwgXCIgKyB5KGQuVmFsdWUpICtcIilcIjt9KTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aW1lc2VyaWVzU2VydmljZTtcbn1dKVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignQWJvdXRQYWdlQ29udHJvbGxlcicsXG4gICAgWyckc2NvcGUnLCAnJGh0dHAnLCAnJGxvZycsICckbG9jYXRpb24nLC8qICckYW5jaG9yU2Nyb2xsJywgJyRyb290U2NvcGUnLCovICckcm91dGVQYXJhbXMnLCAnc2lkZWJhckRpc3BsYXknLCAnY29udHJpYnV0b3JzJyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkbG9nLCAkbG9jYXRpb24sLyogJGFuY2hvclNjcm9sbCwgJHJvb3RTY29wZSwqLyAkcm91dGVQYXJhbXMsIHNpZGViYXJEaXNwbGF5LCBjb250cmlidXRvcnMpe1xuICAgICAgICAkc2NvcGUudG9nZ2xlID0gc2lkZWJhckRpc3BsYXkudG9nZ2xlO1xuXG4gICAgICAgIHZhciBjb250cmlidXRvclByb21pc2UgPSBjb250cmlidXRvcnMuZ2V0Q29udHJpYnV0b3JzKFwiYWxsXCIpO1xuICAgICAgICBjb250cmlidXRvclByb21pc2UudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICRzY29wZS5jb250cmlidXRvcnMgPSBjb250cmlidXRvcnMubGlzdDtcbiAgICAgICAgfSwgZnVuY3Rpb24ocmVqZWN0aW9uKSB7XG4gICAgICAgICAgICBhbGVydChcInByb21pc2UgcmVqZWN0ZWQhXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUuJG9uKCckdmlld0NvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgJHNjb3BlLnRvZ2dsZS5vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICBzaWRlYmFyRGlzcGxheS5zZWN0aW9uID0gJ0ludHJvZHVjdGlvbic7XG4gICAgICAgICAgICAkc2NvcGUubmV4dFNlY3Rpb24gPSAnQ2l2aWMgRW5nYWdlbWVudCc7XG4gICAgICAgICAgICAkc2NvcGUubmV4dFNlY3Rpb25UZWFzZXIgPSAnVGVzdGluZyc7XG4gICAgICAgICAgICAkc2NvcGUubmV4dFNlY3Rpb25VUkwgPSAnIy9jaXZpYy1lbmdhZ2VtZW50JztcbiAgICAgICAgfSk7XG5cbn1dKVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignQ2FsbFRvQWN0aW9uUGFnZUNvbnRyb2xsZXInLFxuICAgIFsnJHNjb3BlJywgJyRodHRwJywgJyRsb2cnLCAnJGxvY2F0aW9uJywgJ3NpZGViYXJEaXNwbGF5JyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkbG9nLCAkbG9jYXRpb24sIHNpZGViYXJEaXNwbGF5KXtcbiAgICAgICAgJHNjb3BlLnRvZ2dsZSA9IHNpZGViYXJEaXNwbGF5LnRvZ2dsZTtcblxuICAgICAgICAkc2NvcGUuJG9uKCckdmlld0NvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgJHNjb3BlLnRvZ2dsZS5vcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIHNpZGViYXJEaXNwbGF5LnNlY3Rpb24gPSAnQ2FsbCBUbyBBY3Rpb24nO1xuICAgICAgICB9KTtcblxufV0pXG5cbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0NvaGVzaW9uUGFnZUNvbnRyb2xsZXInLFxuICAgIFsnJHNjb3BlJywgJyRodHRwJywgJyRsb2cnLCAnJGxvY2F0aW9uJywgJ3NpZGViYXJEaXNwbGF5JyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkbG9nLCAkbG9jYXRpb24sIHNpZGViYXJEaXNwbGF5KXtcbiAgICAgICAgJHNjb3BlLnRvZ2dsZSA9IHNpZGViYXJEaXNwbGF5LnRvZ2dsZTtcblxuICAgICAgICAkc2NvcGUuJG9uKCckdmlld0NvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgJHNjb3BlLnRvZ2dsZS5vcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIHNpZGViYXJEaXNwbGF5LnNlY3Rpb24gPSAnU29jaWFsIE5ldHdvcmtzIGFuZCBDb21tdW5pdHkgQ29oZXNpb24nO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uID0gJ0luc3RpdHV0aW9uYWwgUHJlc2VuY2UnO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uVGVhc2VyID0gXCJTdHVmZiBhYm91dCBpbnN0aXR1dGlvbnNcIjtcbiAgICAgICAgICAgICRzY29wZS5uZXh0U2VjdGlvblVSTCA9ICcjL2luc3RpdHV0aW9uYWwtcHJlc2VuY2UnO1xuICAgICAgICB9KTtcblxufV0pXG5cbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0VuZ2FnZW1lbnRQYWdlQ29udHJvbGxlcicsXG4gICAgWyckc2NvcGUnLCAnJGh0dHAnLCAnJGxvZycsICckbG9jYXRpb24nLC8qICckYW5jaG9yU2Nyb2xsJywgJyRyb290U2NvcGUnLCAnJHJvdXRlUGFyYW1zJywqLyAnc2lkZWJhckRpc3BsYXknLFxuICAgIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICRsb2csICRsb2NhdGlvbiwvKiAkYW5jaG9yU2Nyb2xsLCAkcm9vdFNjb3BlLCAkcm91dGVQYXJhbXMsKi8gc2lkZWJhckRpc3BsYXkpe1xuICAgICAgICAkc2NvcGUudG9nZ2xlID0gc2lkZWJhckRpc3BsYXkudG9nZ2xlO1xuXG4gICAgICAgICRzY29wZS4kb24oJyR2aWV3Q29udGVudExvYWRlZCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAkc2NvcGUudG9nZ2xlLm9wZW4gPSB0cnVlO1xuICAgICAgICAgICAgc2lkZWJhckRpc3BsYXkuc2VjdGlvbiA9ICdDaXZpYyBFbmdhZ2VtZW50JztcbiAgICAgICAgICAgICRzY29wZS5uZXh0U2VjdGlvbiA9ICdQb2xpdGljYWwgUGFydGljaXBhdGlvbic7XG4gICAgICAgICAgICAkc2NvcGUubmV4dFNlY3Rpb25UZWFzZXIgPSBcIlN0dWZmIGFib3V0IHBvbGl0aWNhbCBwYXJ0aWNpcGF0aW9uXCI7XG4gICAgICAgICAgICAkc2NvcGUubmV4dFNlY3Rpb25VUkwgPSAnIy9wb2xpdGljYWwtcGFydGljaXBhdGlvbic7XG4gICAgICAgIH0pO1xuXG59XSlcblxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignUGFydGljaXBhdGlvblBhZ2VDb250cm9sbGVyJyxcbiAgICBbJyRzY29wZScsICckaHR0cCcsICckbG9nJywgJyRsb2NhdGlvbicsICdzaWRlYmFyRGlzcGxheScsXG4gICAgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJGxvZywgJGxvY2F0aW9uLCBzaWRlYmFyRGlzcGxheSl7XG4gICAgICAgICRzY29wZS50b2dnbGUgPSBzaWRlYmFyRGlzcGxheS50b2dnbGU7XG5cbiAgICAgICAgJHNjb3BlLiRvbignJHZpZXdDb250ZW50TG9hZGVkJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICRzY29wZS50b2dnbGUub3BlbiA9IHRydWU7XG4gICAgICAgICAgICBzaWRlYmFyRGlzcGxheS5zZWN0aW9uID0gJ1BvbGl0aWNhbCBQYXJ0aWNpcGF0aW9uJztcbiAgICAgICAgICAgICRzY29wZS5uZXh0U2VjdGlvbiA9ICdDb21tdW5pdHkgQ29oZXNpb24nO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uVGVhc2VyID0gXCJTdHVmZiBhYm91dCBjb2hlc2lvblwiO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uVVJMID0gJyMvY29tbXVuaXR5LWNvaGVzaW9uJztcbiAgICAgICAgfSk7XG5cbn1dKVxuXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdQYXJ0bmVyc1BhZ2VDb250cm9sbGVyJyxcbiAgICBbJyRzY29wZScsICckaHR0cCcsICckbG9nJywgJyRsb2NhdGlvbicsLyogJyRhbmNob3JTY3JvbGwnLCAnJHJvb3RTY29wZScsKi8gJyRyb3V0ZVBhcmFtcycsICdzaWRlYmFyRGlzcGxheScsICdjb250cmlidXRvcnMnLFxuICAgIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICRsb2csICRsb2NhdGlvbiwvKiAkYW5jaG9yU2Nyb2xsLCAkcm9vdFNjb3BlLCovICRyb3V0ZVBhcmFtcywgc2lkZWJhckRpc3BsYXksIGNvbnRyaWJ1dG9ycyl7XG4gICAgICAgICRzY29wZS50b2dnbGUgPSBzaWRlYmFyRGlzcGxheS50b2dnbGU7XG5cbiAgICAgICAgdmFyIGNvbnRyaWJ1dG9yUHJvbWlzZSA9IGNvbnRyaWJ1dG9ycy5nZXRDb250cmlidXRvcnMoXCJhbGxcIik7XG4gICAgICAgIGNvbnRyaWJ1dG9yUHJvbWlzZS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgJHNjb3BlLmNvbnRyaWJ1dG9ycyA9IGNvbnRyaWJ1dG9ycy5saXN0O1xuICAgICAgICB9LCBmdW5jdGlvbihyZWplY3Rpb24pIHtcbiAgICAgICAgICAgIGFsZXJ0KFwicHJvbWlzZSByZWplY3RlZCFcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS4kb24oJyR2aWV3Q29udGVudExvYWRlZCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAkc2NvcGUudG9nZ2xlLm9wZW4gPSB0cnVlO1xuICAgICAgICAgICAgc2lkZWJhckRpc3BsYXkuc2VjdGlvbiA9ICdQYXJ0bmVycyc7XG4gICAgICAgICAgICAkc2NvcGUubmV4dFNlY3Rpb24gPSAnUmF3IERhdGEnO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uVGVhc2VyID0gXCJTdHVmZiBhYm91dCByYXcgZGF0YVwiO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uVVJMID0gJyMvcmF3LWRhdGEnO1xuICAgICAgICB9KTtcblxufV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdJbnN0aXR1dGlvblBhZ2VDb250cm9sbGVyJyxcbiAgICBbJyRzY29wZScsICckaHR0cCcsICckbG9nJywgJyRsb2NhdGlvbicsICdzaWRlYmFyRGlzcGxheScsXG4gICAgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJGxvZywgJGxvY2F0aW9uLCBzaWRlYmFyRGlzcGxheSl7XG4gICAgICAgICRzY29wZS50b2dnbGUgPSBzaWRlYmFyRGlzcGxheS50b2dnbGU7XG5cbiAgICAgICAgJHNjb3BlLiRvbignJHZpZXdDb250ZW50TG9hZGVkJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICRzY29wZS50b2dnbGUub3BlbiA9IHRydWU7XG4gICAgICAgICAgICBzaWRlYmFyRGlzcGxheS5zZWN0aW9uID0gJ0luc3RpdHV0aW9uYWwgUHJlc2VuY2UnO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uID0gJ0NhbGwgdG8gQWN0aW9uJztcbiAgICAgICAgICAgICRzY29wZS5uZXh0U2VjdGlvblRlYXNlciA9IFwiU3R1ZmYgYWJvdXQgY2FsbCB0byBhY3Rpb25cIjtcbiAgICAgICAgICAgICRzY29wZS5uZXh0U2VjdGlvblVSTCA9ICcjL2NhbGwtdG8tYWN0aW9uJztcbiAgICAgICAgfSk7XG5cbn1dKVxuXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdjYXRlZ29yaWVzJywgWyckaHR0cCcsICckcScsICdsb2Rhc2gnLCBmdW5jdGlvbigkaHR0cCwgJHEsIGxvZGFzaCkge1xuICAgIHZhciBjYXRlZ29yaWVzID0ge307XG4gICAgY2F0ZWdvcmllcy5saXN0ID0gW107XG5cbiAgICBjYXRlZ29yaWVzLnRvZ2dsZSA9IGZ1bmN0aW9uKGNhdGVnb3J5KSB7XG4gICAgICAgIHBvc2l0aW9uID0gbG9kYXNoLmZpbmRJbmRleChjYXRlZ29yaWVzLmxpc3QsIGZ1bmN0aW9uKGxpc3RjYXQpIHtcbiAgICAgICAgICAgIHJldHVybiBsaXN0Y2F0Lm5hbWUgPT0gY2F0ZWdvcnkubmFtZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNhdGVnb3JpZXMubGlzdFtwb3NpdGlvbl0uc2VsZWN0ZWQgPSAhY2F0ZWdvcmllcy5saXN0W3Bvc2l0aW9uXS5zZWxlY3RlZDtcbiAgICB9O1xuXG4gICAgY2F0ZWdvcmllcy5nZXRDYXRlZ29yaWVzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChjYXRlZ29yaWVzLmxpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gaWYgdGhpcyBvYmplY3QgYWxyZWFkeSBoYXMgZGF0YSwganVzdCB1c2Ugd2hhdCdzIGN1cnJlbnRseSBhdmFpbGFibGVcbiAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlKXtyZXNvbHZlKGNhdGVnb3JpZXMpfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBvdGhlcndpc2UgZ2V0IGRhdGEgZnJlc2ggZnJvbSBmaWxlXG4gICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCcvc3RhdGljL2Rpc3QvZGF0YS9kYXRhLmpzb24nKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdCA9IGxvZGFzaC5tYXAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc29ydCBjYXRlZ29yaWVzIGJ5IHJhbmtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2Rhc2guc29ydEJ5KHJlc3BvbnNlLCBcInJhbmtcIiksIGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgZWFjaCBpbmRpY2F0b3IgaW4gZWFjaCBjYXRlZ29yeSwgc29ydCAnbGV2ZWxzJyBieSBhIHJhbmsgYXMgd2VsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGluZGljYXRvciwgaWksIGlhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uZGF0YVtpaV0uZGF0YSA9IGxvZGFzaC5zb3J0QnlBbGwoby5kYXRhW2lpXS5kYXRhLCBcInJhbmtcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBleHRlbmQgZWFjaCBjYXRlZ29yeSB0byBoYXZlIGEgXCJzZWxlY3RlZFwiIHZhbHVlLCBkZWZhdWx0IHRvIHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gbG9kYXNoLmV4dGVuZCh7fSwgbywge1wic2VsZWN0ZWRcIiA6IHRydWV9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgY2F0ZWdvcmllcy5saXN0IHRvIGEgc29ydGVkIGFycmF5XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yaWVzLmxpc3QgPSBsaXN0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGNhdGVnb3JpZXMpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoXCJUaGVyZSB3YXMgYW4gZXJyb3IgZ2V0dGluZyBjYXRlZ29yaWVzXCIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBjYXRlZ29yaWVzO1xufV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdjb250cmlidXRvcnMnLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24oJGh0dHAsICRxKSB7XG4gICAgdmFyIGNvbnRyaWJ1dG9ycyA9IHt9O1xuICAgIGNvbnRyaWJ1dG9ycy5saXN0ID0gW107XG5cbiAgICBjb250cmlidXRvcnMuZ2V0Q29udHJpYnV0b3JzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChjb250cmlidXRvcnMubGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBpZiB0aGlzIG9iamVjdCBhbHJlYWR5IGhhcyBkYXRhLCBqdXN0IHVzZSB3aGF0J3MgY3VycmVudGx5IGF2YWlsYWJsZVxuICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUpe3Jlc29sdmUoY29udHJpYnV0b3JzKX0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGdldCBkYXRhIGZyZXNoIGZyb20gZmlsZVxuICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICRodHRwLmdldCgnL3N0YXRpYy9kaXN0L2RhdGEvY29udHJpYnV0b3JzLmpzb24nKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0b3JzLmxpc3QgPSByZXNwb25zZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoY29udHJpYnV0b3JzKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwiVGhlcmUgd2FzIGFuIGVycm9yIGdldHRpbmcgY29udHJpYnV0b3JzXCIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBjb250cmlidXRvcnM7XG59XSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ1NpZGViYXJDb250cm9sbGVyJyxcbiAgICBbJyRzY29wZScsICckbG9nJywnbG9kYXNoJywgJ2NhdGVnb3JpZXMnLCAnY29udHJpYnV0b3JzJyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRsb2csIGxvZGFzaCwgY2F0ZWdvcmllcywgY29udHJpYnV0b3JzKSB7XG4gICAgICAgIC8vICRzY29wZS5zdGF0dXMgPSB7XG4gICAgICAgIC8vICAgICBpc29wZW46IGZhbHNlXG4gICAgICAgIC8vIH07XG5cbiAgICAgICAgdmFyIGNhdGVnb3J5UHJvbWlzZSA9IGNhdGVnb3JpZXMuZ2V0Q2F0ZWdvcmllcygpO1xuICAgICAgICBjYXRlZ29yeVByb21pc2UudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICRzY29wZS5jYXRlZ29yaWVzID0gY2F0ZWdvcmllcy5saXN0O1xuICAgICAgICB9LCBmdW5jdGlvbihyZWplY3Rpb24pIHtcbiAgICAgICAgICAgIGFsZXJ0KFwicHJvbWlzZSByZWplY3RlZCFcIik7XG4gICAgICAgIH0pXG5cbiAgICAgICAgdmFyIGNvbnRyaWJ1dG9yUHJvbWlzZSA9IGNvbnRyaWJ1dG9ycy5nZXRDb250cmlidXRvcnMoKTtcbiAgICAgICAgY29udHJpYnV0b3JQcm9taXNlLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAkc2NvcGUuY29udHJpYnV0b3JzID0gY29udHJpYnV0b3JzLmxpc3Q7XG4gICAgICAgIH0sIGZ1bmN0aW9uKHJlamVjdGlvbikge1xuICAgICAgICAgICAgYWxlcnQoXCJwcm9taXNlIHJlamVjdGVkIVwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRnVuY3Rpb25zIGZvciBtYW5hZ2luZyB0aGUgcHJlc2VudGF0aW9uIG9mIHRoZSBzZWxlY3RlZCBpdGVtcyBpblxuICAgICAgICAvLyB0aGUgc2lkZWJhciBhbmQgcHJvcGlnYXRpbmcgc2VsZWN0aW9ucyB0aHJvdWdoIHRoZSBjYXRnb3JpZXMgc2VydmljZVxuICAgICAgICAkc2NvcGUudXBkYXRlU2VsZWN0ZWQgPSBmdW5jdGlvbihjYXRlZ29yeSkge1xuICAgICAgICAgICAgY2F0ZWdvcmllcy50b2dnbGUoY2F0ZWdvcnkpO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5jaGVja1NlbGVjdGVkID0gZnVuY3Rpb24oYm9vbCkge1xuICAgICAgICAgICAgaWYgKGJvb2wpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJzZWxlY3RlZFwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJkZXNlbGVjdGVkXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICRzY29wZS50b2dnbGU7XG4gICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0b2dnbGVkIHRyaWdnZXJlZCBmcm9tIHNpZGViYXJcIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygkc2NvcGUudG9nZ2xlKTtcbiAgICAgICAgfSk7XG59XSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ3NpZGViYXJEaXNwbGF5JywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9nZ2xlOiB7IG9wZW46IHRydWUgfSxcbiAgICAgICAgc2VjdGlvbjogJ0ludHJvZHVjdGlvbidcbiAgICB9XG59KVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ1dyYXBDb250cm9sbGVyJywgWyckc2NvcGUnLCAnc2lkZWJhckRpc3BsYXknLCBmdW5jdGlvbiAoJHNjb3BlLCBzaWRlYmFyRGlzcGxheSkge1xuICAgICAgICAkc2NvcGUudG9nZ2xlID0gc2lkZWJhckRpc3BsYXkudG9nZ2xlO1xuICAgICAgICAkc2NvcGUuc2VjdGlvbiA9IHNpZGViYXJEaXNwbGF5LnNlY3Rpb247XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICRzY29wZS50b2dnbGU7XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidG9nZ2xlZCB0cmlnZ2VyZWQgZnJvbSB3cmFwXCIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLnRvZ2dsZSk7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNpZGViYXJEaXNwbGF5LnNlY3Rpb247XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRzY29wZS5zZWN0aW9uID0gc2lkZWJhckRpc3BsYXkuc2VjdGlvbjtcbiAgICAgICAgfSk7XG4gICAgfV0pXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
