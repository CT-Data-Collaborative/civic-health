var app=angular.module("app",["ngAnimate","ui.bootstrap","ngLodash","ngRoute"]);angular.module("app").config(["$routeProvider","$locationProvider",function(t,e){t.when("/introduction",{templateUrl:"static/dist/templates/introduction.html",controller:"AboutPageController"}).when("/civic-engagement",{templateUrl:"static/dist/templates/civic-engagement.html",controller:"EngagementPageController"}).when("/political-participation",{templateUrl:"static/dist/templates/political-participation.html",controller:"ParticipationPageController"}).when("/community-cohesion",{templateUrl:"static/dist/templates/community-cohesion.html",controller:"CohesionPageController"}).when("/institutional-presence",{templateUrl:"static/dist/templates/institutional-presence.html",controller:"InstitutionPageController"}).when("/call-to-action",{templateUrl:"static/dist/templates/call-to-action.html",controller:"CallToActionPageController"}).when("/partners",{templateUrl:"static/dist/templates/partners.html",controller:"PartnersPageController"}).when("/raw-data",{templateUrl:"static/dist/templates/data.html",controller:"DataVizController"}).otherwise({redirectTo:"/introduction"})}]),angular.module("app").filter("suppressions",function(){return function(t){return"-9,999.0"===t||"-9999"===t?"&ddagger;":"-666,666.0"===t||"-666666"===t?"&dagger;":t}}).filter("percent",function(){return function(t){return parseInt(t)>0?t+"%":t}}).filter("anySuppressed",["lodash",function(t){return function(e,n){return e=t.flattenDeep(t.pluck(e,"data")),"undefined"!=typeof n?t.some(e,function(e){return e=t.values(e),-1!==t.indexOf(e,n)}):t.some(e,function(e){return e=t.values(e),-1!==t.indexOf(e,"-666666")||-1!==t.indexOf(e,"-9999")})}}]).filter("any",["lodash",function(t){return function(e,n){return"undefined"!=typeof n?t.some(e,n):t.some(e)}}]).filter("none",["lodash",function(t){return function(e,n){return"undefined"!=typeof n?!t.some(e,n):!t.some(e)}}]).filter("sluggify",function(){return function(t){return t.toLowerCase().replace(/[^a-zA-Z0-9_]/g,"_")}}).filter("safe",["$sce",function(t){return t.trustAsHtml}]),angular.module("app").controller("DataVizController",["$scope","$http","$log","$location","$filter","sidebarDisplay","categories","lodash",function(t,e,n,o,i,r,a,l){t.charts={},t.toggle=r.toggle,t.aboutCollapsed=!1,t.checkChart=function(e){return e=i("sluggify")(e),e in t.charts?t.charts[e]:(t.charts[e]=!1,!1)},t.toggleChart=function(e){e=i("sluggify")(e),e in t.charts?t.charts[e]=!t.charts[e]:(alert('Somehow, "'+e+'" was not in scope.charts!'),t.charts[e]=!1)};var c=a.getCategories("all");c.then(function(e){t.categories=a.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,r.section="Raw Data"})}]),angular.module("app").directive("simpletable",function(){var t=tableChart();return{restrict:"E",scope:{data:"=data"},link:function(e,n,o){e.$watchCollection("data",function(e){d3.select(n[0]).datum(e).call(t)})}}}),angular.module("app").directive("timeseries",["$window",function(t){var e=timeSeries();return{restrict:"E",scope:{data:"=data"},link:function(n,o,i){n.render=function(){data={data:n.data,config:{width:.6*o.parent().parent().parent()[0].getBoundingClientRect().width}},d3.select(o[0]).datum(data).call(e)},n.$watchCollection("data",function(t){n.render()}),t.onresize=function(){n.render()}}}}]),angular.module("app").controller("AboutPageController",["$scope","$http","$log","$location","$routeParams","sidebarDisplay","contributors",function(t,e,n,o,i,r,a){t.toggle=r.toggle;var l=a.getContributors("all");l.then(function(e){t.contributors=a.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!1,r.section="Introduction",t.nextSection="Civic Engagement",t.nextSectionTeaser="Testing",t.nextSectionURL="#/civic-engagement"})}]),angular.module("app").controller("CallToActionPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,o,i){t.toggle=i.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,i.section="Call To Action"})}]),angular.module("app").controller("CohesionPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,o,i){t.toggle=i.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,i.section="Social Networks and Community Cohesion",t.nextSection="Institutional Presence",t.nextSectionTeaser="Stuff about institutions",t.nextSectionURL="#/institutional-presence"})}]),angular.module("app").controller("EngagementPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,o,i){t.toggle=i.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,i.section="Civic Engagement",t.nextSection="Political Participation",t.nextSectionTeaser="Stuff about political participation",t.nextSectionURL="#/political-participation"})}]),angular.module("app").controller("ParticipationPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,o,i){t.toggle=i.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,i.section="Political Participation",t.nextSection="Community Cohesion",t.nextSectionTeaser="Stuff about cohesion",t.nextSectionURL="#/community-cohesion"})}]),angular.module("app").controller("PartnersPageController",["$scope","$http","$log","$location","$routeParams","sidebarDisplay","contributors",function(t,e,n,o,i,r,a){t.toggle=r.toggle;var l=a.getContributors("all");l.then(function(e){t.contributors=a.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,r.section="Partners",t.nextSection="Raw Data",t.nextSectionTeaser="Stuff about raw data",t.nextSectionURL="#/raw-data"})}]),angular.module("app").controller("InstitutionPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,o,i){t.toggle=i.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,i.section="Institutional Presence",t.nextSection="Call to Action",t.nextSectionTeaser="Stuff about call to action",t.nextSectionURL="#/call-to-action"})}]),angular.module("app").service("categories",["$http","$q","lodash",function(t,e,n){var o={};return o.list=[],o.toggle=function(t){position=n.findIndex(o.list,function(e){return e.name==t.name}),o.list[position].selected=!o.list[position].selected},o.getCategories=function(){return e(o.list.length>0?function(t){t(o)}:function(e,i){t.get("/static/dist/data/data.json").success(function(t){list=n.map(n.sortBy(t,"rank"),function(t){return t.data.forEach(function(e,o,i){t.data[o].data=n.sortByAll(t.data[o].data,"rank")}),t=n.extend({},t,{selected:!0})}),o.list=list,e(o)}).error(function(){i("There was an error getting categories")})})},o}]),angular.module("app").service("contributors",["$http","$q",function(t,e){var n={};return n.list=[],n.getContributors=function(){return e(n.list.length>0?function(t){t(n)}:function(e,o){t.get("/static/dist/data/contributors.json").success(function(t){n.list=t,e(n)}).error(function(){o("There was an error getting contributors")})})},n}]),angular.module("app").controller("SidebarController",["$scope","$log","lodash","categories","contributors",function(t,e,n,o,i){var r=o.getCategories();r.then(function(e){t.categories=o.list},function(t){alert("promise rejected!")});var a=i.getContributors();a.then(function(e){t.contributors=i.list},function(t){alert("promise rejected!")}),t.updateSelected=function(t){o.toggle(t)},t.checkSelected=function(t){return t?"selected":"deselected"},t.$watchCollection(function(){return t.toggle},function(){console.log("toggled triggered from sidebar"),console.log(t.toggle)})}]),angular.module("app").service("sidebarDisplay",function(){return{toggle:{open:!0},section:"Introduction"}}),angular.module("app").controller("WrapController",["$scope","sidebarDisplay",function(t,e){t.toggle=e.toggle,t.section=e.section,t.$watchCollection(function(){return t.toggle},function(){console.log("toggled triggered from wrap"),console.log(t.toggle)}),t.$watchCollection(function(){return e.section},function(){t.section=e.section})}]);
//# sourceMappingURL=data:application/json;base64,
