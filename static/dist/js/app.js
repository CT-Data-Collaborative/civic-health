var app=angular.module("app",["ngAnimate","ui.bootstrap","ngLodash","ngRoute"]);angular.module("app").config(["$routeProvider","$locationProvider",function(t,e){t.when("/data",{templateUrl:"static/dist/templates/data.html",controller:"DataVizController"}).when("/about",{templateUrl:"static/dist/templates/about.html",controller:"AboutPageController"}).otherwise({redirectTo:"/data"})}]),angular.module("app").filter("suppressions",function(){return function(t){return"-9,999.0"===t||"-9999"===t?"NA":"-666,666.0"===t||"-666666"===t?" * ":t}}).filter("percent",function(){return function(t){return parseInt(t)>0?t+"%":t}}).filter("any",["lodash",function(t){return function(e,n){return"undefined"!=typeof n?t.some(e,n):t.some(e)}}]).filter("none",["lodash",function(t){return function(e,n){return"undefined"!=typeof n?!t.some(e,n):!t.some(e)}}]).filter("sluggify",function(){return function(t){return t.toLowerCase().replace(/[^a-zA-Z0-9_]/g,"_")}}).filter("safe",["$sce",function(t){return function(e){return t.trustAsHtml(e.toString())}}]),angular.module("app").controller("AboutPageController",["$scope","$http","$log","$location","sidebarDisplay","contributors",function(t,e,n,o,r,i){t.toggle=r.toggle,console.log(t.toggle);var a=i.getContributors("all");a.then(function(e){t.contributors=i.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!1})}]),angular.module("app").controller("DataVizController",["$scope","$http","$log","$location","$filter","sidebarDisplay","categories","lodash",function(t,e,n,o,r,i,a,l){t.charts={},t.toggle=i.toggle,t.aboutCollapsed=!1,t.checkChart=function(e){return e=r("sluggify")(e),e in t.charts?t.charts[e]:(t.charts[e]=!1,!1)},t.toggleChart=function(e){e=r("sluggify")(e),e in t.charts?t.charts[e]=!t.charts[e]:(alert('Somehow, "'+e+'" was not in scope.charts!'),t.charts[e]=!1)};var c=a.getCategories("all");c.then(function(e){t.categories=a.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!0})}]),angular.module("app").directive("simpletable",function(){var t=tableChart();return{restrict:"E",scope:{data:"=data"},link:function(e,n,o){e.$watchCollection("data",function(e){d3.select(n[0]).datum(e).call(t)})}}}),angular.module("app").directive("timeseries",["$window",function(t){var e=timeSeries();return{restrict:"E",scope:{data:"=data"},link:function(n,o,r){n.render=function(){data={data:n.data,config:{width:.6*o.parent().parent().parent()[0].getBoundingClientRect().width}},d3.select(o[0]).datum(data).call(e)},n.$watchCollection("data",function(t){n.render()}),t.onresize=function(){n.render()}}}}]),angular.module("app").service("categories",["$http","$q","lodash",function(t,e,n){var o={};return o.list=[],o.toggle=function(t){position=n.findIndex(o.list,function(e){return e.name==t.name}),o.list[position].selected=!o.list[position].selected},o.getCategories=function(){return e(o.list.length>0?function(t){t(o)}:function(e,r){t.get("/static/dist/data/data.json").success(function(t){o.list=n.map(n.sortBy(t,"rank"),function(t){return n.extend({},t,{selected:!0})}),o.list,e(o)}).error(function(){r("There was an error getting categories")})})},o}]),angular.module("app").service("contributors",["$http","$q",function(t,e){var n={};return n.list=[],n.getContributors=function(){return e(n.list.length>0?function(t){t(n)}:function(e,o){t.get("/static/dist/data/contributors.json").success(function(t){n.list=t,e(n)}).error(function(){o("There was an error getting contributors")})})},n}]),angular.module("app").controller("SidebarController",["$scope","$log","lodash","categories","contributors",function(t,e,n,o,r){var i=o.getCategories();i.then(function(e){t.categories=o.list},function(t){alert("promise rejected!")});var a=r.getContributors();a.then(function(e){t.contributors=r.list},function(t){alert("promise rejected!")}),t.updateSelected=function(t){o.toggle(t),console.log(n.pluck(o.list,"selected"))},t.checkSelected=function(t){return t?"selected":"deselected"},t.$watchCollection(function(){return t.toggle},function(){console.log("toggled triggered from sidebar"),console.log(t.toggle)})}]),angular.module("app").service("sidebarDisplay",function(){return{toggle:{open:!0}}}),angular.module("app").controller("WrapController",["$scope","sidebarDisplay",function(t,e){t.toggle=e.toggle,t.$watchCollection(function(){return t.toggle},function(){console.log("toggled triggered from wrap"),console.log(t.toggle)})}]);
//# sourceMappingURL=data:application/json;base64,
