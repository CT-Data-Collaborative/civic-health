var app=angular.module("app",["ngAnimate","ui.bootstrap","ngLodash","ngRoute"]);angular.module("app").config(["$routeProvider","$locationProvider",function(t,e){t.when("/data",{templateUrl:"static/dist/templates/data.html",controller:"DataVizController"}).when("/about",{templateUrl:"static/dist/templates/about.html"}).otherwise({redirectTo:"/data"})}]),angular.module("app").filter("suppressions",function(){return function(t){return"-9999"===t?"NA":"-666666"===t?" &mdash; ":t}}).filter("sluggify",function(){return function(t){return t.toLowerCase().replace(/[^a-zA-Z0-9_]/g,"_")}}).filter("safe",["$sce",function(t){return t.trustAsHtml}]),angular.module("app").controller("DataVizController",["$scope","$http","$log","sidebarDisplay","categories","lodash",function(t,e,n,o,r,i){t.toggle=o.toggle;var a=r.getCategories("all");a.then(function(e){t.categories=r.list},function(t){alert("promise rejected!")}),t.$watchCollection(function(){return t.categories},function(){console.log("Selection Detected")},!0)}]),angular.module("app").directive("simpletable",function(){var t=tableChart();return{restrict:"E",scope:{data:"=data"},link:function(e,n,o){e.$watchCollection("data",function(e){d3.select(n[0]).datum(e).call(t)})}}}),angular.module("app").service("categories",["$http","$q","lodash",function(t,e,n){var o={};return o.list=[],o.toggle=function(t){position=n.findIndex(o.list,function(e){return e.name==t.name}),o.list[position].selected=!o.list[position].selected},o.getCategories=function(){return e(o.list.length>0?function(t){t(o)}:function(e,r){t.get("/static/dist/data/data.json").success(function(t){o.list=n.map(n.sortBy(t,"rank"),function(t){return n.extend({},t,{selected:!0})}),o.list,e(o)}).error(function(){r("There was an error getting categories")})})},o}]),angular.module("app").service("contributors",["$http","$q",function(t,e){var n={};return n.list=[],n.getContributors=function(){return e(n.list.length>0?function(t){t(n)}:function(e,o){t.get("/static/dist/data/contributors.json").success(function(t){n.list=t,e(n)}).error(function(){o("There was an error getting contributors")})})},n}]),angular.module("app").controller("SidebarController",["$scope","$log","lodash","categories","contributors",function(t,e,n,o,r){t.status={isopen:!1};var i=o.getCategories();i.then(function(e){t.categories=o.list},function(t){alert("promise rejected!")});var a=r.getContributors();a.then(function(e){t.contributors=r.list},function(t){alert("promise rejected!")}),t.updateSelected=function(t){o.toggle(t),console.log(n.pluck(o.list,"selected"))},t.checkSelected=function(t){return t?"selected":"deselected"}}]),angular.module("app").service("sidebarDisplay",function(){return{toggle:{toggled:!1}}}),angular.module("app").controller("WrapController",["$scope","sidebarDisplay",function(t,e){t.toggle=e.toggle}]);
//# sourceMappingURL=data:application/json;base64,
