var app=angular.module("app",["ngAnimate","ui.bootstrap","ngLodash","ngRoute"]);angular.module("app").config(["$routeProvider","$locationProvider",function(t,e){t.when("/introduction",{templateUrl:"static/dist/templates/introduction.html",controller:"AboutPageController"}).when("/civic-engagement",{templateUrl:"static/dist/templates/civic-engagement.html",controller:"EngagementPageController"}).when("/political-participation",{templateUrl:"static/dist/templates/political-participation.html",controller:"ParticipationPageController"}).when("/community-cohesion",{templateUrl:"static/dist/templates/community-cohesion.html",controller:"CohesionPageController"}).when("/institutional-presence",{templateUrl:"static/dist/templates/institutional-presence.html",controller:"InstitutionPageController"}).when("/a-closer-look",{templateUrl:"static/dist/templates/closer-look.html",controller:"CloserLookPageController"}).when("/call-to-action",{templateUrl:"static/dist/templates/call-to-action.html",controller:"CallToActionPageController"}).when("/partners",{templateUrl:"static/dist/templates/partners.html",controller:"PartnersPageController"}).when("/raw-data",{templateUrl:"static/dist/templates/data.html",controller:"DataVizController"}).otherwise({redirectTo:"/introduction"})}]),angular.module("app").filter("suppressions",function(){return function(t){return"-9,999.0"===t||"-9999"===t?"&ddagger;":"-666,666.0"===t||"-666666"===t?"&dagger;":t}}).filter("percent",function(){return function(t){return parseInt(t)>0?t+"%":t}}).filter("anySuppressed",["lodash",function(t){return function(e,n){return e=t.flattenDeep(t.pluck(e,"data")),"undefined"!=typeof n?t.some(e,function(e){return e=t.values(e),-1!==t.indexOf(e,n)}):t.some(e,function(e){return e=t.values(e),-1!==t.indexOf(e,"-666666")||-1!==t.indexOf(e,"-9999")})}}]).filter("any",["lodash",function(t){return function(e,n){return"undefined"!=typeof n?t.some(e,n):t.some(e)}}]).filter("none",["lodash",function(t){return function(e,n){return"undefined"!=typeof n?!t.some(e,n):!t.some(e)}}]).filter("sluggify",function(){return function(t){return t.toLowerCase().replace(/[^a-zA-Z0-9_]/g,"_")}}).filter("safe",["$sce",function(t){return t.trustAsHtml}]),angular.module("app").service("barChartService",["$q","$http","lodash",function(t,e,n){var a={};return a.chart=function(t,e,a){function r(t){t.each(function(t){var e=this.getBoundingClientRect(),n={top:.05*e.height,right:.05*e.width,bottom:.2*e.height,left:d3.max([.05*e.width,55])},a=e.width-(n.left+n.right);height=e.height-(n.top+n.bottom),svg=d3.select(this).append("svg").attr("height",e.height).attr("width",e.width),chart=svg.append("g").attr("height",height).attr("width",a).attr("transform","translate("+n.left+", "+n.top+")"),x=d3.scale.ordinal().rangeRoundBands([0,a],.1,.1).domain(o),y=d3.scale.linear().range([height,0]).domain([0,yRangeMax]).nice(10),xAxis=d3.svg.axis().scale(x).orient("bottom"),yAxis=d3.svg.axis().scale(y).orient("left").innerTickSize(-a).tickPadding(10).tickFormat(function(t){return d3.format("f")(t)+"%"}),chart.append("g").classed({"x-axis":!0,axis:!0}).attr("transform","translate(0, "+height+")").call(xAxis),chart.append("g").classed({"y-axis":!0,axis:!0}).attr("transform","translate(-12, 0)").call(yAxis),chart.selectAll("rect.barchart-bar").data(t).enter().append("rect").attr("class",function(t,e){var n="bar-color-"+(e%2+1);return["barchart-bar",n].join(" ")}).attr("width",x.rangeBand()).attr("height",function(t){return height-y(t.Value)}).attr("x",function(t){return x(t.Bar)}).attr("y",function(t){return y(t.Value)}),chart.selectAll("text.barchart-value").data(t).enter().append("text").classed("barchart-value",!0).text(function(t){return d3.format("f")(t.Value)+"%"}).attr("width",x.rangeBand()).attr("y",function(t){return y(t.Value)}).attr("text-anchor","middle").attr("x",function(t){return x(t.Bar)+x.rangeBand()/2}).attr("dy",-4)})}a.facet=n.difference(["structure","time"],[a.facet])[0],e=d3.csv.parse(e);var o=n.chain(e).map(function(t){return t.Bar}).unique().value();return yRangeMax=n.chain(e).map(function(t){return+t.Value}).max().value(),chartContainer=d3.select(t).append("div").classed("barchart-container",!0).append("div").classed("barchart-container-internal",!0).datum(e),void r(chartContainer)},a}]),angular.module("app").controller("DataVizController",["$scope","$http","$log","$location","$filter","sidebarDisplay","categories",function(t,e,n,a,r,o,i){t.toggle=o.toggle;var l=i.getCategories("all");l.then(function(e){t.categories=i.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,o.section="Raw Data"})}]),angular.module("app").directive("dataviz",["$window","$http","timeseriesService","groupedBarChartService","barChartService","tableService",function(t,e,n,a,r,o){var i={line:n.chart,bar:r.chart,groupedBar:a.chart,table:o.chart};return{restrict:"E",scope:{which:"=which",type:"=type"},link:function(t,n,a){t.render=function(){t.data?i[t.type](n[0],result.data,{}):e.get("/static/dist/data/csv/"+t.which+".csv").then(function(e){t.data=e.data,i[t.type](n[0],t.data,{})})},t.$watchCollection("which",function(){t.render()})}}}]),angular.module("app").service("groupedBarChartService",["$q","$http","lodash",function(t,e,n){var a={};return a.chart=function(t,e,a){function r(t){t.each(function(t){var e=this.getBoundingClientRect(),a={top:.05*e.height,right:.05*e.width,bottom:.2*e.height,left:d3.max([.05*e.width,55])},r=e.width-(a.left+a.right);height=e.height-(a.top+a.bottom),svg=d3.select(this).append("svg").attr("height",e.height).attr("width",e.width),chart=svg.append("g").attr("height",height).attr("width",r).attr("transform","translate("+a.left+", "+a.top+")"),colors=d3.scale.ordinal().range(["bar-color-1","bar-color-2","bar-color-3","bar-color-4"]).domain(i),x0=d3.scale.ordinal().rangeRoundBands([0,r],.2,.2).domain(o),x1=d3.scale.ordinal().rangeRoundBands([0,x0.rangeBand()],.1,0).domain(i),y=d3.scale.linear().range([height,0]).domain([0,yRangeMax]).nice(5),x0Axis=d3.svg.axis().scale(x0).orient("bottom"),x1Axis=d3.svg.axis().scale(x1).orient("bottom"),yAxis=d3.svg.axis().scale(y).orient("left").innerTickSize(-r).tickPadding(10).tickFormat(function(t){return d3.format("f")(t)+"%"});var l=chart.append("g").classed({"x-axis":!0,axis:!0}).attr("transform","translate(0, "+height+")").call(x0Axis);chart.append("g").classed({"y-axis":!0,axis:!0}).attr("transform","translate(-12, 0)").call(yAxis);var c=chart.selectAll("g.groupedbar-group").data(t).enter().append("g").classed("groupedbar-group",!0).attr("width",x0.rangeBand()).attr("height",height).attr("transform",function(t){return"translate("+x0(t.key)+", 0)"}).datum(function(t){return t.values});c.each(function(t){var e=n.chain(t).map(function(t){return t.Bar}).without("").value(),r=n.chain(t).map(function(t){return t.Label}).without("").value(),o=x1.copy().domain(e);r.length>0&&l.attr("transform","translate(0, "+(height+a.bottom/2)+")"),d3.select(this).selectAll("rect.groupdbar-bar").data(t).enter().append("rect").attr("class",function(t){return["groupedbar-bar",colors(t.Bar)].join(" ")}).attr("width",o.rangeBand()).attr("height",function(t){return height-y(t.Value)}).attr("x",function(t){return o(t.Bar)}).attr("y",function(t){return y(t.Value)}),d3.select(this).selectAll("text.groupdbar-value").data(t).enter().append("text").classed("groupdbar-value",!0).text(function(t){return d3.format("0.1f")(t.Value)+"%"}).attr("width",o.rangeBand()).attr("y",function(t){return y(t.Value)}).attr("text-anchor","middle").attr("x",function(t){return o(t.Bar)+o.rangeBand()/2}).attr("dy",-4),d3.select(this).selectAll("text.groupdbar-label").data(t).enter().append("text").classed("groupdbar-label",!0).text(function(t){return t.Label}).attr("width",x1.rangeBand()).attr("y",height).attr("text-anchor","middle").attr("x",function(t){return x1(t.Bar)+x1.rangeBand()/2}).attr("dy",16)})})}a.facet=n.difference(["structure","time"],[a.facet])[0],e=d3.csv.parse(e);var o=n.chain(e).map(function(t){return t.Group}).unique().value(),i=n.chain(e).map(function(t){return t.Bar}).unique().value();return yRangeMax=n.chain(e).map(function(t){return+t.Value}).max().value(),e=d3.nest().key(function(t){return t.Group}).entries(e),chartContainer=d3.select(t).append("div").classed("groupedbar-container",!0).append("div").classed("groupedbar-container-internal",!0).datum(e),void r(chartContainer)},a}]),angular.module("app").directive("simpletable",function(){var t=tableChart();return{restrict:"E",scope:{data:"=data"},link:function(e,n,a){e.$watchCollection("data",function(e){d3.select(n[0]).datum(e).call(t)})}}}),angular.module("app").service("tableService",["$q","$http","lodash",function(t,e,n){var a={};return a.chart=function(t,e,a){function r(t){t.each(function(t){var e=d3.select(this).append("table").attr("class","ctdata-table"),n=e.append("thead"),a=e.append("tbody");n.append("tr").selectAll("th").data(o).enter().append("th").attr("class",function(t){return"Indicator"===t?"hide":"col-name"}).text(function(t){return t});var r=a.selectAll("tr").data(t).enter().append("tr");r.selectAll("td").data(function(t){return o.map(function(e){return{column:e,value:t[e]}})}).enter().append("td").attr("class",function(t){return"Indicator"===t.column?"name":"value"}).html(function(t){return t.value})})}a.facet=n.difference(["structure","time"],[a.facet])[0],e=d3.csv.parse(e);var o=[];for(k in e[0])o.push(k);chartContainer=d3.select(t).append("div").classed("table-container-internal",!0).datum(e),r(chartContainer)},a}]),angular.module("app").service("timeseriesService",["$q","$http","lodash",function(t,e,n){var a={};return a.chart=function(t,e,a){function r(t){t.each(function(t){var e=this.getBoundingClientRect(),n={top:.01*e.height,right:.01*e.width,bottom:.01*e.height,left:.01*e.width},a=e.width-(n.left+n.right);height=e.height-(n.top+n.bottom),colors=d3.scale.ordinal().range(["#1EACF1","#B94A48"]).domain(t);var r=(d3.select(this).selectAll("div").data(t).enter().append("svg").attr("height",height).attr("width",a).append("g").classed("legend",!0).attr("height",height).attr("width",a).attr("transform","translate("+n.left+", "+n.top+")"),legend.selectAll("g.entry").data(legendData).enter().append("g").attr("data-class",function(t){return sluggify(t)}).attr("class",function(t){var e=["entry",sluggify(t)].join(" ");return e}).attr("transform",function(t,e){return"translate(0, "+19*e+")"}).datum(function(t){return t}));r.each(function(){var t=r.selectAll("tspan").size();d3.select(this).attr("transform",function(e,n){return"translate(0, "+19*n+19*(t-n)+")"}),d3.select(this).append("path").attr("fill",function(t,e){return colors(t)}).attr("stroke",function(t,e){return colors(t)}).attr("stroke-width",0).attr("d",d3.svg.symbol().type(function(t){return symbolScale(t)}).size(25)),d3.select(this).append("text").attr("fill","#4A4A4A").attr("y",6).attr("dx",8).tspans(function(t){return d3.wordwrap(t,20)})}),d3.selectAll("tspan").attr("dx",8)})}function o(t){t.each(function(t){var e=this.getBoundingClientRect(),a={top:.05*e.height,right:.05*e.width,bottom:.1*e.height,left:d3.max([.05*e.width,55])},r=e.width-(a.left+a.right);height=e.height-(a.top+a.bottom),svg=d3.select(this).append("svg").attr("height",e.height).attr("width",e.width),chart=svg.append("g").attr("height",height).attr("width",r).attr("transform","translate("+a.left+", "+a.top+")"),colors=d3.scale.ordinal().range(["#1EACF1","#B94A48"]).domain(i),symbolScale=d3.scale.ordinal().range(d3.svg.symbolTypes).domain(i),timeFormat=d3.time.format("%Y"),timeRange=n.chain(t).map(function(t){return t.Year}).value(),x=d3.time.scale().range([12,r]).domain(d3.extent(timeRange).map(function(t){return timeFormat.parse(t)})),y=d3.scale.linear().range([height,0]).domain(d3.extent(n.chain(t).map(function(t){return i.map(function(e){return+t[e]})}).flatten().unique().value())).nice(5,10),xAxis=d3.svg.axis().scale(x).orient("bottom").ticks(d3.time.year,1),yAxis=d3.svg.axis().scale(y).orient("left").innerTickSize(-r).tickPadding(10),line=d3.svg.line().x(function(t){return x(t.Year)}).y(function(t){return y(t.Value)}),t=i.map(function(e){return{Key:e,Values:n.map(t,function(t){return{Year:timeFormat.parse(t.Year),Value:+t[e]}})}}),chart.append("g").classed({"x-axis":!0,axis:!0}).attr("transform","translate(0, "+height+")").call(xAxis),chart.append("g").classed({"y-axis":!0,axis:!0}).attr("transform","translate(-12, 0)").call(yAxis),chart.selectAll("g.timeseries-lines").data(t).enter().append("g").classed("timeseries-lines",!0).append("path").classed("timeseries-path",!0).attr("d",function(t){return line(t.Values)}).attr("stroke",function(t,e){return colors(t.Key)});var o=t.map(function(t,e,n){return t.Values.map(function(e,n,a){return e.Key=t.Key,e})});o=n.flatten(o),chart.append("g").classed("timeseries-points",!0).selectAll("g").data(o).enter().append("path").attr("stroke",function(t,e){return colors(t.Key)}).attr("d",d3.svg.symbol().type("circle").size(65)).attr("transform",function(t){return"translate("+x(t.Year)+", "+y(t.Value)+")"})})}a.facet=n.difference(["structure","time"],[a.facet])[0],e=d3.csv.parse(e);var i=n.chain(e[0]).keys().filter(function(t){return"Year"!==t}).value();chartContainer=d3.select(t).append("div").classed("timeseries-container",!0).append("div").classed("timeseries-container-internal",!0).datum(e),legendContainer=d3.select(t).append("div").classed({"legend-container":!0,"timeseries-legend-container":!0}),o(chartContainer);var l=legendContainer.selectAll("div.legend").data([i]).enter().append("div").classed({legend:!0,"timeseries-legend":!0});r(l)},a}]),angular.module("app").controller("AboutPageController",["$scope","$http","$log","$location","$routeParams","sidebarDisplay","contributors",function(t,e,n,a,r,o,i){t.toggle=o.toggle;var l=i.getContributors("all");l.then(function(e){t.contributors=i.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!1,o.section="Introduction",t.nextSection="Civic Engagement",t.nextSectionTeaser="Testing",t.nextSectionURL="#/civic-engagement"})}]),angular.module("app").controller("CallToActionPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,a,r){t.toggle=r.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!1,r.section="Call To Action"})}]),angular.module("app").controller("CloserLookPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,a,r){t.toggle=r.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!1,r.section="A Closer Look",t.nextSection="Institutional Presence",t.nextSectionTeaser="Stuff about institutions",t.nextSectionURL="#/institutional-presence"})}]),angular.module("app").controller("CohesionPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,a,r){t.toggle=r.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!1,r.section="Social Networks and Community Cohesion",t.nextSection="Institutional Presence",t.nextSectionTeaser="Stuff about institutions",t.nextSectionURL="#/institutional-presence"})}]),angular.module("app").controller("EngagementPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,a,r){t.toggle=r.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!1,r.section="Civic Engagement",t.nextSection="Political Participation",t.nextSectionTeaser="Stuff about political participation",t.nextSectionURL="#/political-participation"})}]),angular.module("app").controller("ParticipationPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,a,r){t.toggle=r.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!1,r.section="Political Participation",t.nextSection="Community Cohesion",t.nextSectionTeaser="Stuff about cohesion",t.nextSectionURL="#/community-cohesion"})}]),angular.module("app").controller("PartnersPageController",["$scope","$http","$log","$location","$routeParams","sidebarDisplay","contributors",function(t,e,n,a,r,o,i){t.toggle=o.toggle;var l=i.getContributors("all");l.then(function(e){t.contributors=i.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!1,o.section="Partners",t.nextSection="Raw Data",t.nextSectionTeaser="Stuff about raw data",t.nextSectionURL="#/raw-data"})}]),angular.module("app").controller("InstitutionPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,a,r){t.toggle=r.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!1,r.section="Institutional Presence",t.nextSection="Call to Action",t.nextSectionTeaser="Stuff about call to action",t.nextSectionURL="#/call-to-action"})}]),angular.module("app").service("categories",["$http","$q","lodash",function(t,e,n){var a={};return a.list=[],a.toggle=function(t){position=n.findIndex(a.list,function(e){return e.name==t.name}),a.list[position].selected=!a.list[position].selected},a.getCategories=function(){return e(a.list.length>0?function(t){t(a)}:function(e,r){t.get("/static/dist/data/data.json").success(function(t){list=n.map(n.sortBy(t,"rank"),function(t){return t.data.forEach(function(e,a,r){t.data[a].data=n.sortByAll(t.data[a].data,"rank")}),t=n.extend({},t,{selected:!0})}),a.list=list,e(a)}).error(function(){r("There was an error getting categories")})})},a}]),angular.module("app").service("contributors",["$http","$q",function(t,e){var n={};return n.list=[],n.getContributors=function(){return e(n.list.length>0?function(t){t(n)}:function(e,a){t.get("/static/dist/data/contributors.json").success(function(t){n.list=t,e(n)}).error(function(){a("There was an error getting contributors")})})},n}]),angular.module("app").controller("SidebarController",["$scope","$log","lodash","categories","contributors",function(t,e,n,a,r){var o=a.getCategories();o.then(function(e){t.categories=a.list},function(t){alert("promise rejected!")});var i=r.getContributors();i.then(function(e){t.contributors=r.list},function(t){alert("promise rejected!")}),t.updateSelected=function(t){a.toggle(t)},t.checkSelected=function(t){return t?"selected":"deselected"},t.$watchCollection(function(){return t.toggle},function(){console.log("toggled triggered from sidebar"),console.log(t.toggle)})}]),angular.module("app").service("sidebarDisplay",function(){return{toggle:{open:!0},section:"Introduction"}}),angular.module("app").controller("WrapController",["$scope","sidebarDisplay",function(t,e){t.toggle=e.toggle,t.section=e.section,t.$watchCollection(function(){return e.section},function(){t.section=e.section})}]);
//# sourceMappingURL=data:application/json;base64,
