var app=angular.module("app",["ngAnimate","ui.bootstrap","ngLodash","ngRoute"]);angular.module("app").config(["$routeProvider","$locationProvider",function(t,e){t.when("/introduction",{templateUrl:"static/dist/templates/introduction.html",controller:"AboutPageController"}).when("/civic-engagement",{templateUrl:"static/dist/templates/civic-engagement.html",controller:"EngagementPageController"}).when("/political-participation",{templateUrl:"static/dist/templates/political-participation.html",controller:"ParticipationPageController"}).when("/community-cohesion",{templateUrl:"static/dist/templates/community-cohesion.html",controller:"CohesionPageController"}).when("/institutional-presence",{templateUrl:"static/dist/templates/institutional-presence.html",controller:"InstitutionPageController"}).when("/a-closer-look",{templateUrl:"static/dist/templates/closer-look.html",controller:"CloserLookPageController"}).when("/conclusions",{templateUrl:"static/dist/templates/conclusions.html",controller:"ConclusionsPageController"}).when("/partners",{templateUrl:"static/dist/templates/partners.html",controller:"PartnersPageController"}).when("/raw-data",{templateUrl:"static/dist/templates/data.html",controller:"DataVizController"}).otherwise({redirectTo:"/introduction"})}]),angular.module("app").filter("suppressions",function(){return function(t){return"-9,999.0"===t||"-9999"===t?"&ddagger;":"-666,666.0"===t||"-666666"===t?"&dagger;":t}}).filter("percent",function(){return function(t){return parseInt(t)>0?t+"%":t}}).filter("anySuppressed",["lodash",function(t){return function(e,n){return e=t.flattenDeep(t.pluck(e,"data")),"undefined"!=typeof n?t.some(e,function(e){return e=t.values(e),-1!==t.indexOf(e,n)}):t.some(e,function(e){return e=t.values(e),-1!==t.indexOf(e,"-666666")||-1!==t.indexOf(e,"-9999")})}}]).filter("any",["lodash",function(t){return function(e,n){return"undefined"!=typeof n?t.some(e,n):t.some(e)}}]).filter("none",["lodash",function(t){return function(e,n){return"undefined"!=typeof n?!t.some(e,n):!t.some(e)}}]).filter("sluggify",function(){return function(t){return t.toLowerCase().replace(/[^a-zA-Z0-9_]/g,"_")}}).filter("safe",["$sce",function(t){return t.trustAsHtml}]),angular.module("app").service("barChartService",["$q","$http","lodash",function(t,e,n){var a={};return a.chart=function(t,e,a){function r(t){function e(t,e){t.each(function(){for(var t,n=d3.select(this),a=n.text().split(/\s+/).reverse(),r=[],o=0,i=1.1,c=n.attr("y"),l=parseFloat(n.attr("dy")),s=n.text(null).append("tspan").attr("x",0).attr("y",c).attr("dy",l+"em");t=a.pop();)r.push(t),s.text(r.join(" ")),s.node().getComputedTextLength()>e&&(r.pop(),s.text(r.join(" ")),r=[t],s=n.append("tspan").attr("x",0).attr("y",c).attr("dy",++o*i+l+"em").text(t))})}t.each(function(t){var a=this.getBoundingClientRect(),r={top:.05*a.height,right:.05*a.width,bottom:.3*a.height,left:d3.max([.05*a.width,75])},i=a.width-(r.left+r.right);height=a.height-(r.top+r.bottom),tip=d3.tip().attr("class","groupedbar-tip").html(function(t){return n.chain([t.Label,d3.format("f")(t.Value)+"%"]).compact().join("<br />")}),svg=d3.select(this).append("svg").attr("height",a.height).attr("width",a.width).call(tip),chart=svg.append("g").attr("height",height).attr("width",i).attr("transform","translate("+r.left+", "+r.top+")"),x=d3.scale.ordinal().rangeRoundBands([0,i],.1,.1).domain(o),y=d3.scale.linear().range([height,0]).domain([0,yRangeMax]).nice(10),xAxis=d3.svg.axis().scale(x).orient("bottom"),yAxis=d3.svg.axis().scale(y).orient("left").innerTickSize(-i).tickPadding(10).tickFormat(function(t){return d3.format("f")(t)+"%"});var c=chart.append("g").classed({"x-axis":!0,axis:!0}).attr("transform","translate(0, "+height+")").call(xAxis);c.selectAll(".tick text").call(e,x.rangeBand()),chart.append("g").classed({"y-axis":!0,axis:!0}).attr("transform","translate(-12, 0)").call(yAxis),chart.selectAll("rect.barchart-bar").data(t).enter().append("rect").attr("class",function(t,e){var n="bar-color-"+(e%2+1);return["barchart-bar",n].join(" ")}).attr("width",x.rangeBand()).attr("height",function(t){return height-y(t.Value)}).attr("x",function(t){return x(t.Bar)}).attr("y",function(t){return y(t.Value)}).on("mouseover",tip.show).on("mouseout",tip.hide)})}a.facet=n.difference(["structure","time"],[a.facet])[0],e=d3.csv.parse(e);var o=n.chain(e).map(function(t){return t.Bar}).unique().value();yRangeMax=n.chain(e).map(function(t){return+t.Value}).max().value(),chartContainer=d3.select(t).append("div").classed("barchart-container",!0).append("div").classed("barchart-container-internal",!0).datum(e),r(chartContainer)},a}]),angular.module("app").controller("DataVizController",["$scope","$http","$log","$location","$filter","sidebarDisplay","categories",function(t,e,n,a,r,o,i){t.toggle=o.toggle;var c=i.getCategories("all");c.then(function(e){t.categories=i.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!1,o.section="Raw Data"})}]),angular.module("app").directive("dataviz",["$window","$http","timeseriesService","groupedBarChartService","barChartService","tableService",function(t,e,n,a,r,o){var i={line:n.chart,bar:r.chart,groupedBar:a.chart,table:o.chart};return{restrict:"E",scope:{which:"=which",type:"=type"},link:function(t,n,a){t.render=function(){t.data?i[t.type](n[0],result.data,{}):e.get("/static/dist/data/csv/"+t.which+".csv").then(function(e){t.data=e.data,i[t.type](n[0],t.data,{})})},t.$watchCollection("which",function(){t.render()})}}}]),angular.module("app").service("groupedBarChartService",["$q","$http","lodash",function(t,e,n){var a={};return a.chart=function(t,e,a){function r(t){t.each(function(t){var e=d3.scale.ordinal().range(["bar-color-1","bar-color-2","bar-color-3","bar-color-4"]).domain(c),n=d3.select(this).selectAll("div.groupedbar-legend-entry").data(t).enter().append("div").classed("groupedbar-legend-entry",!0).datum(function(t){return t});n.each(function(t){d3.select(this).append("span").attr("class",function(n){return["groupedbar-legend-entry-color",e(t)].join(" ")}),d3.select(this).append("span").classed("groupedbar-legend-entry-label",!0).text(t)})})}function o(t){function e(t,e){t.each(function(){for(var t,n=d3.select(this),a=n.text().split(/\s+/).reverse(),r=[],o=0,i=1.1,c=n.attr("y"),l=parseFloat(n.attr("dy")),s=n.text(null).append("tspan").attr("x",0).attr("y",c).attr("dy",l+"em");t=a.pop();)r.push(t),s.text(r.join(" ")),s.node().getComputedTextLength()>e&&(r.pop(),s.text(r.join(" ")),r=[t],s=n.append("tspan").attr("x",0).attr("y",c).attr("dy",++o*i+l+"em").text(t))})}t.each(function(t){var a=this.getBoundingClientRect(),r={top:.05*a.height,right:.05*a.width,bottom:.3*a.height,left:d3.max([.05*a.width,75])},o=a.width-(r.left+r.right);height=a.height-(r.top+r.bottom),tip=d3.tip().attr("class","groupedbar-tip").html(function(t){return n.chain([t.Label,d3.format("f")(t.Value)+"%"]).compact().join("<br />")}),svg=d3.select(this).append("svg").attr("height",a.height).attr("width",a.width).call(tip),chart=svg.append("g").attr("height",height).attr("width",o).attr("transform","translate("+r.left+", "+r.top+")"),colors=d3.scale.ordinal().range(["bar-color-1","bar-color-2","bar-color-3","bar-color-4"]).domain(c),x0=d3.scale.ordinal().rangeRoundBands([0,o],.2,.2).domain(i),x1=d3.scale.ordinal().rangeRoundBands([0,x0.rangeBand()],.1,0).domain(c),y=d3.scale.linear().range([height,0]).domain([0,yRangeMax]).nice(5),x0Axis=d3.svg.axis().scale(x0).orient("bottom"),x1Axis=d3.svg.axis().scale(x1).orient("bottom"),yAxis=d3.svg.axis().scale(y).orient("left").innerTickSize(-o).tickPadding(10).tickFormat(function(t){return d3.format("f")(t)+"%"});var l=chart.append("g").classed({"x-axis":!0,axis:!0}).attr("transform","translate(0, "+height+")").call(x0Axis);l.selectAll(".tick text").call(e,x0.rangeBand()),chart.append("g").classed({"y-axis":!0,axis:!0}).attr("transform","translate(-12, 0)").call(yAxis);var s=chart.selectAll("g.groupedbar-group").data(t).enter().append("g").classed("groupedbar-group",!0).attr("width",x0.rangeBand()).attr("height",height).attr("transform",function(t){return"translate("+x0(t.key)+", 0)"}).datum(function(t){return t.values});s.each(function(t){var e=n.chain(t).map(function(t){return t.Bar}).without("").value(),a=(n.chain(t).map(function(t){return t.Label}).without("").value(),x1.copy().domain(e));d3.select(this).selectAll("rect.groupedbar-bar").data(t).enter().append("rect").attr("class",function(t){return["groupedbar-bar",colors(t.Bar)].join(" ")}).attr("width",a.rangeBand()).attr("height",function(t){return height-y(t.Value)}).attr("x",function(t){return a(t.Bar)}).attr("y",function(t){return y(t.Value)}).on("mouseover",tip.show).on("mouseout",tip.hide)})})}a.facet=n.difference(["structure","time"],[a.facet])[0],e=d3.csv.parse(e);var i=n.chain(e).map(function(t){return t.Group}).unique().value(),c=n.chain(e).map(function(t){return t.Bar}).unique().value();yRangeMax=n.chain(e).map(function(t){return+t.Value}).max().value(),e=d3.nest().key(function(t){return t.Group}).entries(e),chartContainer=d3.select(t).append("div").classed("groupedbar-container",!0).append("div").classed("groupedbar-container-internal",!0).datum(e),legendContainer=d3.select(t).append("div").classed({"legend-container":!0,"groupedbar-legend-container":!0}).append("div").classed({"groupedbar-legend-container-internal":!0}).datum(c),o(chartContainer),r(legendContainer)},a}]),angular.module("app").directive("simpletable",function(){var t=tableChart();return{restrict:"E",scope:{data:"=data"},link:function(e,n,a){e.$watchCollection("data",function(e){d3.select(n[0]).datum(e).call(t)})}}}),angular.module("app").service("tableService",["$q","$http","lodash",function(t,e,n){var a={};return a.chart=function(t,e,a){function r(t){t.each(function(t){var e=d3.select(this).append("table").attr("class","ctdata-table"),n=e.append("thead"),a=e.append("tbody");n.append("tr").selectAll("th").data(o).enter().append("th").attr("class",function(t){return"Indicator"===t?"hide":"col-name"}).text(function(t){return t});var r=a.selectAll("tr").data(t).enter().append("tr");r.selectAll("td").data(function(t){return o.map(function(e){return{column:e,value:t[e]}})}).enter().append("td").attr("data-title",function(t){return t.column}).attr("class",function(t){return"Indicator"===t.column?"name":"value"}).html(function(t){return t.value})})}a.facet=n.difference(["structure","time"],[a.facet])[0],e=d3.csv.parse(e);var o=[];for(k in e[0])o.push(k);chartContainer=d3.select(t).append("div").classed("table-container-internal",!0).datum(e),r(chartContainer)},a}]),angular.module("app").service("timeseriesService",["$q","$http","lodash",function(t,e,n){var a={};return a.chart=function(t,e,a){function r(t){t.each(function(t){colors=d3.scale.ordinal().range(["#1EACF1","#B94A48"]).domain(i);var e=d3.select(this).selectAll("div.timeseries-legend-entry").data(t).enter().append("div").classed("timeseries-legend-entry",!0).datum(function(t){return t});e.each(function(t){d3.select(this).append("span").classed("timeseries-legend-entry-color",!0).style("background-color",colors(t)),d3.select(this).append("span").classed("timeseries-legend-entry-label",!0).text(t)})})}function o(t){t.each(function(t){var e=this.getBoundingClientRect(),a={top:.05*e.height,right:.05*e.width,bottom:.1*e.height,left:d3.max([.05*e.width,55])},r=e.width-(a.left+a.right);height=e.height-(a.top+a.bottom),tip=d3.tip().attr("class","groupedbar-tip").html(function(t){return n.chain([t.Label,d3.format("f")(t.Value)+"%"]).compact().join("<br />")}),svg=d3.select(this).append("svg").attr("height",e.height).attr("width",e.width).call(tip),chart=svg.append("g").attr("height",height).attr("width",r).attr("transform","translate("+a.left+", "+a.top+")"),colors=d3.scale.ordinal().range(["#1EACF1","#B94A48"]).domain(i),symbolScale=d3.scale.ordinal().range(d3.svg.symbolTypes).domain(i),timeFormat=d3.time.format("%Y"),timeRange=n.chain(t).map(function(t){return t.Year}).value(),x=d3.time.scale().range([12,r]).domain(d3.extent(timeRange).map(function(t){return timeFormat.parse(t)})),y=d3.scale.linear().range([height,0]).domain(d3.extent(n.chain(t).map(function(t){return i.map(function(e){return+t[e]})}).flatten().unique().value())).nice(5,10),xAxis=d3.svg.axis().scale(x).orient("bottom").ticks(d3.time.year,1),yAxis=d3.svg.axis().scale(y).orient("left").innerTickSize(-r).tickPadding(10).tickFormat(function(t){return d3.format("f")(t)+"%"}),line=d3.svg.line().x(function(t){return x(t.Year)}).y(function(t){return y(t.Value)}),t=i.map(function(e){return{Key:e,Values:n.map(t,function(t){return{Year:timeFormat.parse(t.Year),Value:+t[e]}})}}),chart.append("g").classed({"x-axis":!0,axis:!0}).attr("transform","translate(0, "+height+")").call(xAxis),chart.append("g").classed({"y-axis":!0,axis:!0}).attr("transform","translate(-12, 0)").call(yAxis),chart.selectAll("g.timeseries-lines").data(t).enter().append("g").classed("timeseries-lines",!0).append("path").classed("timeseries-path",!0).attr("d",function(t){return line(t.Values)}).attr("stroke",function(t,e){return colors(t.Key)});var o=t.map(function(t,e,n){return t.Values.map(function(e,n,a){return e.Key=t.Key,e})});o=n.flatten(o),chart.append("g").classed("timeseries-points",!0).selectAll("g").data(o).enter().append("path").attr("stroke",function(t,e){return colors(t.Key)}).attr("d",d3.svg.symbol().type("circle").size(65)).attr("transform",function(t){return"translate("+x(t.Year)+", "+y(t.Value)+")"}).on("mouseover",tip.show).on("mouseout",tip.hide)})}a.facet=n.difference(["structure","time"],[a.facet])[0],e=d3.csv.parse(e);var i=n.chain(e[0]).keys().filter(function(t){return"Year"!==t}).value();chartContainer=d3.select(t).append("div").classed("timeseries-container",!0).append("div").classed("timeseries-container-internal",!0).datum(e),legendContainer=d3.select(t).append("div").classed({"legend-container":!0,"timeseries-legend-container":!0}),o(chartContainer),legendContainer=d3.select(t).append("div").classed({"legend-container":!0,"timeseries-legend-container":!0}).append("div").classed({"timeseries-legend-container-internal":!0}).datum(i),r(legendContainer)},a}]),angular.module("app").controller("AboutPageController",["$scope","$http","$log","$location","$routeParams","sidebarDisplay","contributors",function(t,e,n,a,r,o,i){t.toggle=o.toggle;var c=i.getContributors("all");c.then(function(e){t.contributors=i.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!1,o.section="Introduction",t.nextSection="Civic Engagement",t.nextSectionTeaser="Participation in community life through different civic pathways provides opportunities for everyday civic contributions, allowing individuals to find personal enrichment while addressing local issues.",t.nextSectionURL="#/civic-engagement",t.report2011URL="pdfs/2011 Connecticut Civic Health Index Report.pdf",t.report2016URL="pdfs/2016 Connecticut Civic Health Index Report.pdf"}),$("#citation").tooltip("show")}]),angular.module("app").controller("CloserLookPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,a,r){t.toggle=r.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!1,r.section="A Closer Look",t.nextSection="Conclusions",t.nextSectionTeaser="As this report has shown, there are many efforts underway to improve the civichealth of our state. But even with important progress, urgent challenges remain.",t.nextSectionURL="#/conclusions"})}]),angular.module("app").controller("CohesionPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,a,r){t.toggle=r.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!1,r.section="Social Networks and Community Cohesion",t.nextSection="Institutional Presence",t.nextSectionTeaser="Institutions — government, news media, corporations, hospitals, and schools — are the foundation of our society.",t.nextSectionURL="#/institutional-presence"})}]),angular.module("app").controller("ConclusionsPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,a,r){t.toggle=r.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!1,r.section="Conclusions",t.nextSection="Partners",t.nextSectionURL="#/partners"})}]),angular.module("app").controller("EngagementPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,a,r){t.toggle=r.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!1,r.section="Civic Engagement",t.nextSection="Political Participation",t.nextSectionTeaser="A healthy democracy is based on a strong relationship between elected officials and their constituents.",t.nextSectionURL="#/political-participation"})}]),angular.module("app").controller("ParticipationPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,a,r){t.toggle=r.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!1,r.section="Political Participation",t.nextSection="Community Cohesion",t.nextSectionTeaser="Social networks, whose growth is linked with decreased neighborhood crime and better individual well-being, enrich communities in many ways.",t.nextSectionURL="#/community-cohesion"})}]),angular.module("app").controller("PartnersPageController",["$scope","$http","$log","$location","$routeParams","sidebarDisplay","contributors",function(t,e,n,a,r,o,i){t.toggle=o.toggle;var c=i.getContributors("all");c.then(function(e){t.contributors=i.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!1,o.section="Partners",t.nextSection="Raw Data",t.nextSectionTeaser="",t.nextSectionURL="#/raw-data"})}]),angular.module("app").controller("InstitutionPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,a,r){t.toggle=r.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!1,r.section="Institutional Presence",t.nextSection="A Closer Look",t.nextSectionTeaser="A deeper analysis reveals notable differences in civic engagement based on demographic characteristics, including age, gender, and race or ethnicity.",t.nextSectionURL="#/a-closer-look"})}]),angular.module("app").service("categories",["$http","$q","lodash",function(t,e,n){var a={};return a.list=[],a.toggle=function(t){position=n.findIndex(a.list,function(e){return e.name==t.name}),a.list[position].selected=!a.list[position].selected},a.getCategories=function(){return e(a.list.length>0?function(t){t(a)}:function(e,r){t.get("/static/dist/data/data.json").success(function(t){list=n.map(n.sortBy(t,"rank"),function(t){return t.data.forEach(function(e,a,r){t.data[a].data=n.sortByAll(t.data[a].data,"rank")}),t=n.extend({},t,{selected:!0})}),a.list=list,e(a)}).error(function(){r("There was an error getting categories")})})},a}]),angular.module("app").service("contributors",["$http","$q",function(t,e){var n={};return n.list=[],n.getContributors=function(){return e(n.list.length>0?function(t){t(n)}:function(e,a){t.get("/static/dist/data/contributors.json").success(function(t){n.list=t,e(n)}).error(function(){a("There was an error getting contributors")})})},n}]),angular.module("app").controller("SidebarController",["$scope","$log","lodash","categories","contributors",function(t,e,n,a,r){var o=a.getCategories();o.then(function(e){t.categories=a.list},function(t){alert("promise rejected!")});var i=r.getContributors();i.then(function(e){t.contributors=r.list},function(t){alert("promise rejected!")}),t.updateSelected=function(t){a.toggle(t)},t.checkSelected=function(t){return t?"selected":"deselected"},t.$watchCollection(function(){return t.toggle},function(){console.log("toggled triggered from sidebar"),console.log(t.toggle)})}]),angular.module("app").service("sidebarDisplay",function(){return{toggle:{open:!0},section:"Introduction"}}),angular.module("app").controller("WrapController",["$scope","sidebarDisplay",function(t,e){t.toggle=e.toggle,t.section=e.section,t.$watchCollection(function(){return e.section},function(){t.section=e.section})}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsInJvdXRlcy5qcyIsImZpbHRlcnMuanMiLCJkYXRhdml6L2JhckNoYXJ0U2VydmljZS5zZXJ2aWNlLmpzIiwiZGF0YXZpei9kYXRhdml6LmNvbnRyb2xsZXIuanMiLCJkYXRhdml6L2RhdGF2aXouZGlyZWN0aXZlLmpzIiwiZGF0YXZpei9ncm91cGVkQmFyQ2hhcnQuc2VydmljZS5qcyIsImRhdGF2aXovc2ltcGxldGFibGUuZGlyZWN0aXZlLmpzIiwiZGF0YXZpei90YWJsZS5zZXJ2aWNlLmpzIiwiZGF0YXZpei90aW1lc2VyaWVzLnNlcnZpY2UuanMiLCJwYWdlcy9hYm91dHBhZ2UuY29udHJvbGxlci5qcyIsInBhZ2VzL2Nsb3Nlcmxvb2suY29udHJvbGxlci5qcyIsInBhZ2VzL2NvaGVzaW9uLmNvbnRyb2xsZXIuanMiLCJwYWdlcy9jb25jbHVzaW9ucy5jb250cm9sbGVyLmpzIiwicGFnZXMvZW5nYWdlbWVudC5jb250cm9sbGVyLmpzIiwicGFnZXMvcGFydGljaXBhdGlvbi5jb250cm9sbGVyLmpzIiwicGFnZXMvcGFydG5lcnMuY29udHJvbGxlcnMuanMiLCJwYWdlcy9wcmVzZW5jZS5jb250cm9sbGVyLmpzIiwic2lkZWJhci9jYXRlZ29yaWVzLnNlcnZpY2UuanMiLCJzaWRlYmFyL2NvbnRyaWJ1dG9ycy5zZXJ2aWNlLmpzIiwic2lkZWJhci9zaWRlYmFyLmNvbnRyb2xsZXIuanMiLCJzaWRlYmFyL3NpZGViYXJkaXNwbGF5LnNlcnZpY2UuanMiLCJzaWRlYmFyL3dyYXAuY29udHJvbGxlci5qcyJdLCJuYW1lcyI6WyJhcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCIkbG9jYXRpb25Qcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJvdGhlcndpc2UiLCJyZWRpcmVjdFRvIiwiZmlsdGVyIiwiaW5wdXQiLCJzdHIiLCJwYXJzZUludCIsImxvZGFzaCIsImFyciIsInN1cHByZXNzaW9uIiwiZmxhdHRlbkRlZXAiLCJwbHVjayIsInNvbWUiLCJvIiwidmFsdWVzIiwiaW5kZXhPZiIsInByb3AiLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCIkc2NlIiwidHJ1c3RBc0h0bWwiLCJzZXJ2aWNlIiwiJHEiLCIkaHR0cCIsImJhckNoYXJ0U2VydmljZSIsImNoYXJ0IiwiY29udGFpbmVyIiwiZGF0YSIsIm1ha2ViYXJjaGFydENoYXJ0Iiwic2VsZWN0aW9uIiwid3JhcCIsInRleHQiLCJ3aWR0aCIsImVhY2giLCJ3b3JkIiwiZDMiLCJzZWxlY3QiLCJ0aGlzIiwid29yZHMiLCJzcGxpdCIsInJldmVyc2UiLCJsaW5lIiwibGluZU51bWJlciIsImxpbmVIZWlnaHQiLCJ5IiwiYXR0ciIsImR5IiwicGFyc2VGbG9hdCIsInRzcGFuIiwiYXBwZW5kIiwicG9wIiwicHVzaCIsImpvaW4iLCJub2RlIiwiZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoIiwiQkJveCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIm1hcmdpbiIsInRvcCIsImhlaWdodCIsInJpZ2h0IiwiYm90dG9tIiwibGVmdCIsIm1heCIsInRpcCIsImh0bWwiLCJkIiwiY2hhaW4iLCJMYWJlbCIsImZvcm1hdCIsIlZhbHVlIiwiY29tcGFjdCIsInN2ZyIsImNhbGwiLCJ4Iiwic2NhbGUiLCJvcmRpbmFsIiwicmFuZ2VSb3VuZEJhbmRzIiwiZG9tYWluIiwiYmFyS2V5cyIsImxpbmVhciIsInJhbmdlIiwieVJhbmdlTWF4IiwibmljZSIsInhBeGlzIiwiYXhpcyIsIm9yaWVudCIsInlBeGlzIiwiaW5uZXJUaWNrU2l6ZSIsInRpY2tQYWRkaW5nIiwidGlja0Zvcm1hdCIsInQiLCJ4QXhpc0dyb3VwIiwiY2xhc3NlZCIsIngtYXhpcyIsInNlbGVjdEFsbCIsInJhbmdlQmFuZCIsInktYXhpcyIsImVudGVyIiwiaSIsImNvbG9yQ2xhc3MiLCJCYXIiLCJvbiIsInNob3ciLCJoaWRlIiwiZmFjZXQiLCJkaWZmZXJlbmNlIiwiY3N2IiwicGFyc2UiLCJtYXAiLCJ1bmlxdWUiLCJ2YWx1ZSIsImNoYXJ0Q29udGFpbmVyIiwiZGF0dW0iLCIkc2NvcGUiLCIkbG9nIiwiJGxvY2F0aW9uIiwiJGZpbHRlciIsInNpZGViYXJEaXNwbGF5IiwiY2F0ZWdvcmllcyIsInRvZ2dsZSIsInByb21pc2UiLCJnZXRDYXRlZ29yaWVzIiwidGhlbiIsInJlc3VsdCIsImxpc3QiLCJyZWplY3Rpb24iLCJhbGVydCIsIiRvbiIsImV2ZW50Iiwib3BlbiIsInNlY3Rpb24iLCJkaXJlY3RpdmUiLCIkd2luZG93IiwidGltZXNlcmllc1NlcnZpY2UiLCJncm91cGVkQmFyQ2hhcnRTZXJ2aWNlIiwidGFibGVTZXJ2aWNlIiwiY2hhcnRzIiwiYmFyIiwiZ3JvdXBlZEJhciIsInRhYmxlIiwicmVzdHJpY3QiLCJzY29wZSIsIndoaWNoIiwidHlwZSIsImxpbmsiLCJlbGVtZW50IiwiYXR0cnMiLCJyZW5kZXIiLCJnZXQiLCIkd2F0Y2hDb2xsZWN0aW9uIiwibWFrZUxlZ2VuZCIsImxlZ2VuZERhdGEiLCJjb2xvcnMiLCJsZWdlbmRFbnRyaWVzIiwiZW50cnlEYXRhIiwibWFrZUdyb3VwZWRCYXJDaGFydCIsIngwIiwiZ3JvdXBLZXlzIiwieDEiLCJ4MEF4aXMiLCJ4MUF4aXMiLCJ4MEF4aXNHcm91cCIsImJhckdyb3VwcyIsImtleSIsImdyb3VwRGF0YSIsInRoaXNHcm91cEJhcnMiLCJ3aXRob3V0IiwidGhpc0dyb3VwWDEiLCJjb3B5IiwiR3JvdXAiLCJuZXN0IiwiZW50cmllcyIsImxlZ2VuZENvbnRhaW5lciIsImxlZ2VuZC1jb250YWluZXIiLCJncm91cGVkYmFyLWxlZ2VuZC1jb250YWluZXIiLCJncm91cGVkYmFyLWxlZ2VuZC1jb250YWluZXItaW50ZXJuYWwiLCJ0YWJsZUNoYXJ0IiwibWFrZVRhYmxlIiwidGhlYWQiLCJ0Ym9keSIsImNvbHVtbnMiLCJyb3dzIiwicm93IiwiY29sdW1uIiwiayIsImxpbmVLZXlzIiwic3R5bGUiLCJtYWtlVGltZVNlcmllcyIsInN5bWJvbFNjYWxlIiwic3ltYm9sVHlwZXMiLCJ0aW1lRm9ybWF0IiwidGltZSIsInRpbWVSYW5nZSIsIlllYXIiLCJleHRlbnQiLCJmbGF0dGVuIiwidGlja3MiLCJ5ZWFyIiwiS2V5IiwiVmFsdWVzIiwicG9pbnREYXRhIiwiZGkiLCJkYSIsInYiLCJ2aSIsInZhIiwic3ltYm9sIiwic2l6ZSIsImtleXMiLCJ0aW1lc2VyaWVzLWxlZ2VuZC1jb250YWluZXIiLCJ0aW1lc2VyaWVzLWxlZ2VuZC1jb250YWluZXItaW50ZXJuYWwiLCIkcm91dGVQYXJhbXMiLCJjb250cmlidXRvcnMiLCJjb250cmlidXRvclByb21pc2UiLCJnZXRDb250cmlidXRvcnMiLCJuZXh0U2VjdGlvbiIsIm5leHRTZWN0aW9uVGVhc2VyIiwibmV4dFNlY3Rpb25VUkwiLCJyZXBvcnQyMDExVVJMIiwicmVwb3J0MjAxNlVSTCIsIiQiLCJ0b29sdGlwIiwiY2F0ZWdvcnkiLCJwb3NpdGlvbiIsImZpbmRJbmRleCIsImxpc3RjYXQiLCJuYW1lIiwic2VsZWN0ZWQiLCJsZW5ndGgiLCJyZXNvbHZlIiwicmVqZWN0Iiwic3VjY2VzcyIsInJlc3BvbnNlIiwic29ydEJ5IiwiZm9yRWFjaCIsImluZGljYXRvciIsImlpIiwiaWEiLCJzb3J0QnlBbGwiLCJleHRlbmQiLCJlcnJvciIsImNhdGVnb3J5UHJvbWlzZSIsInVwZGF0ZVNlbGVjdGVkIiwiY2hlY2tTZWxlY3RlZCIsImJvb2wiLCJjb25zb2xlIiwibG9nIl0sIm1hcHBpbmdzIjoiQUFBQSxHQUFBQSxLQUFBQyxRQUFBQyxPQUFBLE9BQ0EsWUFDQSxlQUNBLFdBQ0EsV0NKQUQsU0FBQUMsT0FBQSxPQUNBQyxRQUFBLGlCQUFBLG9CQUFBLFNBQUFDLEVBQUFDLEdBQ0FELEVBQ0FFLEtBQUEsaUJBQ0FDLFlBQUEsMENBQ0FDLFdBQUEsd0JBRUFGLEtBQUEscUJBQ0FDLFlBQUEsOENBQ0FDLFdBQUEsNkJBRUFGLEtBQUEsNEJBQ0FDLFlBQUEscURBQ0FD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QyxHQUNBaE4sRUFBQThILElBQUEsdUNBQ0FtRixRQUFBLFNBQUFDLEdBQ0FwQixFQUFBeEYsS0FBQTRHLEVBQ0FILEVBQUFqQixLQUVBNEIsTUFBQSxXQUNBVixFQUFBLGdEQU1BbEIsS0N4QkE1TixRQUFBQyxPQUFBLE9BQ0FNLFdBQUEscUJBQ0EsU0FBQSxPQUFBLFNBQUEsYUFBQSxlQUNBLFNBQUFrSCxFQUFBQyxFQUFBNUcsRUFBQWdILEVBQUE4RixHQUtBLEdBQUE2QixHQUFBM0gsRUFBQUcsZUFDQXdILEdBQUF2SCxLQUFBLFNBQUFDLEdBQ0FWLEVBQUFLLFdBQUFBLEVBQUFNLE1BQ0EsU0FBQUMsR0FDQUMsTUFBQSxzQkFHQSxJQUFBdUYsR0FBQUQsRUFBQUUsaUJBQ0FELEdBQUEzRixLQUFBLFNBQUFDLEdBQ0FWLEVBQUFtRyxhQUFBQSxFQUFBeEYsTUFDQSxTQUFBQyxHQUNBQyxNQUFBLHVCQUtBYixFQUFBaUksZUFBQSxTQUFBcEIsR0FDQXhHLEVBQUFDLE9BQUF1RyxJQUdBN0csRUFBQWtJLGNBQUEsU0FBQUMsR0FDQSxNQUFBQSxHQUNBLFdBRUEsY0FHQW5JLEVBQUFvQyxpQkFBQSxXQUNBLE1BQUFwQyxHQUFBTSxRQUNBLFdBQ0E4SCxRQUFBQyxJQUFBLGtDQUNBRCxRQUFBQyxJQUFBckksRUFBQU0sYUN2Q0EvSCxRQUFBQyxPQUFBLE9BQ0EyQixRQUFBLGlCQUFBLFdBQ0EsT0FDQW1HLFFBQUFVLE1BQUEsR0FDQUMsUUFBQSxrQkNKQTFJLFFBQUFDLE9BQUEsT0FDQU0sV0FBQSxrQkFBQSxTQUFBLGlCQUFBLFNBQUFrSCxFQUFBSSxHQUNBSixFQUFBTSxPQUFBRixFQUFBRSxPQUNBTixFQUFBaUIsUUFBQWIsRUFBQWEsUUFFQWpCLEVBQUFvQyxpQkFBQSxXQUNBLE1BQUFoQyxHQUFBYSxTQUNBLFdBQ0FqQixFQUFBaUIsUUFBQWIsRUFBQWEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXG4gICAgJ25nQW5pbWF0ZScsXG4gICAgJ3VpLmJvb3RzdHJhcCcsXG4gICAgJ25nTG9kYXNoJyxcbiAgICAnbmdSb3V0ZSdcbiAgICBdKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbmZpZyhmdW5jdGlvbigkcm91dGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcbiAgICAkcm91dGVQcm92aWRlclxuICAgICAgICAud2hlbignL2ludHJvZHVjdGlvbicsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3RhdGljL2Rpc3QvdGVtcGxhdGVzL2ludHJvZHVjdGlvbi5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdBYm91dFBhZ2VDb250cm9sbGVyJ1xuICAgICAgICB9KVxuICAgICAgICAud2hlbignL2NpdmljLWVuZ2FnZW1lbnQnLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0YXRpYy9kaXN0L3RlbXBsYXRlcy9jaXZpYy1lbmdhZ2VtZW50Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0VuZ2FnZW1lbnRQYWdlQ29udHJvbGxlcidcbiAgICAgICAgfSlcbiAgICAgICAgLndoZW4oJy9wb2xpdGljYWwtcGFydGljaXBhdGlvbicsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3RhdGljL2Rpc3QvdGVtcGxhdGVzL3BvbGl0aWNhbC1wYXJ0aWNpcGF0aW9uLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ1BhcnRpY2lwYXRpb25QYWdlQ29udHJvbGxlcidcbiAgICAgICAgfSlcbiAgICAgICAgLndoZW4oJy9jb21tdW5pdHktY29oZXNpb24nLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0YXRpYy9kaXN0L3RlbXBsYXRlcy9jb21tdW5pdHktY29oZXNpb24uaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQ29oZXNpb25QYWdlQ29udHJvbGxlcidcbiAgICAgICAgfSlcbiAgICAgICAgLndoZW4oJy9pbnN0aXR1dGlvbmFsLXByZXNlbmNlJywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdGF0aWMvZGlzdC90ZW1wbGF0ZXMvaW5zdGl0dXRpb25hbC1wcmVzZW5jZS5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdJbnN0aXR1dGlvblBhZ2VDb250cm9sbGVyJ1xuICAgICAgICB9KVxuICAgICAgICAud2hlbignL2EtY2xvc2VyLWxvb2snLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0YXRpYy9kaXN0L3RlbXBsYXRlcy9jbG9zZXItbG9vay5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDbG9zZXJMb29rUGFnZUNvbnRyb2xsZXInXG4gICAgICAgIH0pXG4gICAgICAgIC53aGVuKCcvY29uY2x1c2lvbnMnLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0YXRpYy9kaXN0L3RlbXBsYXRlcy9jb25jbHVzaW9ucy5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25jbHVzaW9uc1BhZ2VDb250cm9sbGVyJ1xuICAgICAgICB9KVxuICAgICAgICAud2hlbignL3BhcnRuZXJzJywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdGF0aWMvZGlzdC90ZW1wbGF0ZXMvcGFydG5lcnMuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnUGFydG5lcnNQYWdlQ29udHJvbGxlcidcbiAgICAgICAgfSlcbiAgICAgICAgLndoZW4oJy9yYXctZGF0YScsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3RhdGljL2Rpc3QvdGVtcGxhdGVzL2RhdGEuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnRGF0YVZpekNvbnRyb2xsZXInXG4gICAgICAgIH0pXG4gICAgICAgIC5vdGhlcndpc2Uoe1xuICAgICAgICAgICAgcmVkaXJlY3RUbzogJy9pbnRyb2R1Y3Rpb24nXG4gICAgICAgIH0pO1xufSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5maWx0ZXIoJ3N1cHByZXNzaW9ucycsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZnVuY3Rpb24oaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgPT09IFwiLTksOTk5LjBcIiB8fCBpbnB1dCA9PT0gXCItOTk5OVwiKSB7XG4gICAgICAgIHJldHVybiAnJmRkYWdnZXI7JztcbiAgICB9IGVsc2UgaWYgKGlucHV0ID09PSBcIi02NjYsNjY2LjBcIiB8fCBpbnB1dCA9PT0gXCItNjY2NjY2XCIpIHtcbiAgICAgICAgcmV0dXJuICcmZGFnZ2VyOyc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgfTtcbn0pXG4uZmlsdGVyKCdwZXJjZW50JywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKHN0cikge1xuICAgICAgICBpZiAocGFyc2VJbnQoc3RyKSA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiBzdHIgKyBcIiVcIjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBzdHI7XG4gICAgICAgIH1cbiAgICB9XG59KVxuLmZpbHRlcignYW55U3VwcHJlc3NlZCcsIFsnbG9kYXNoJywgZnVuY3Rpb24obG9kYXNoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFyciwgc3VwcHJlc3Npb24pIHtcbiAgICAgICAgYXJyID0gbG9kYXNoLmZsYXR0ZW5EZWVwKGxvZGFzaC5wbHVjayhhcnIsIFwiZGF0YVwiKSk7XG5cbiAgICAgICAgaWYgKHR5cGVvZiBzdXBwcmVzc2lvbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJjaGVja2luZyBzdXBwcmVzc2lvbjogXCIrc3VwcHJlc3Npb24pO1xuICAgICAgICAgICAgcmV0dXJuIGxvZGFzaC5zb21lKGFyciwgZnVuY3Rpb24obykge1xuICAgICAgICAgICAgICAgIG8gPSBsb2Rhc2gudmFsdWVzKG8pO1xuICAgICAgICAgICAgICAgIHJldHVybiBsb2Rhc2guaW5kZXhPZihvLCBzdXBwcmVzc2lvbikgIT09IC0xO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBhc3N1bWUgdG8gY2hlY2sgZWl0aGVyIHN1cHByZXNzaW9uXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImNoZWNraW5nIGJvdGggc3VwcHJlc3Npb24gdHlwZXNcIik7XG4gICAgICAgICAgICByZXR1cm4gbG9kYXNoLnNvbWUoYXJyLCBmdW5jdGlvbihvKSB7XG4gICAgICAgICAgICAgICAgbyA9IGxvZGFzaC52YWx1ZXMobyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvZGFzaC5pbmRleE9mKG8sICctNjY2NjY2JykgIT09IC0xIHx8IGxvZGFzaC5pbmRleE9mKG8sICctOTk5OScpICE9PSAtMTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufV0pXG4uZmlsdGVyKCdhbnknLCBbJ2xvZGFzaCcsIGZ1bmN0aW9uKGxvZGFzaCkge1xuICAgIHJldHVybiBmdW5jdGlvbihhcnIsIHByb3ApIHtcbiAgICAgICAgaWYgKHR5cGVvZiBwcm9wICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gbG9kYXNoLnNvbWUoYXJyLCBwcm9wKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGxvZGFzaC5zb21lKGFycilcbiAgICAgICAgfVxuICAgIH1cbn1dKVxuLmZpbHRlcignbm9uZScsIFsnbG9kYXNoJywgZnVuY3Rpb24obG9kYXNoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFyciwgcHJvcCkge1xuICAgICAgICBpZiAodHlwZW9mIHByb3AgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHJldHVybiAhbG9kYXNoLnNvbWUoYXJyLCBwcm9wKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICFsb2Rhc2guc29tZShhcnIpXG4gICAgICAgIH1cbiAgICB9XG59XSlcbi5maWx0ZXIoJ3NsdWdnaWZ5JywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1teYS16QS1aMC05X10vZywgXCJfXCIpXG4gICAgfTtcbn0pXG4uZmlsdGVyKCdzYWZlJywgWyckc2NlJywgZnVuY3Rpb24oJHNjZSkge1xuICAgIHJldHVybiAkc2NlLnRydXN0QXNIdG1sO1xufV0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ2JhckNoYXJ0U2VydmljZScsIFsnJHEnLCAnJGh0dHAnLCAnbG9kYXNoJywgZnVuY3Rpb24oJHEsICRodHRwLCBsb2Rhc2gpIHtcbiAgICB2YXIgYmFyQ2hhcnRTZXJ2aWNlID0ge307XG5cbiAgICBiYXJDaGFydFNlcnZpY2UuY2hhcnQgPSBmdW5jdGlvbihjb250YWluZXIsIGRhdGEsIGNvbmZpZykge1xuICAgICAgICB2YXIgdGltZUZvcm1hdHMgPSB7XG4gICAgICAgICAgICBcInllYXJcIiA6IFwiWVlZWVwiLFxuICAgICAgICAgICAgXCJxdWFydGVyXCIgOiBcIltRXVEgWVlZWVwiLFxuICAgICAgICAgICAgXCJtb250aFwiIDogXCJNTU0gWVlZWVwiXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uZmlnLmZhY2V0ID0gbG9kYXNoLmRpZmZlcmVuY2UoW1wic3RydWN0dXJlXCIsIFwidGltZVwiXSwgW2NvbmZpZy5mYWNldF0pWzBdXG5cbiAgICAgICAgLy8gY29udmVydCBkYXRhIGZyb20gc3RyaW5nIC0+IGFycmF5IG9mIG9ialxuICAgICAgICBkYXRhID0gZDMuY3N2LnBhcnNlKGRhdGEpO1xuXG4gICAgICAgIHZhciBiYXJLZXlzID1sb2Rhc2guY2hhaW4oZGF0YSlcbiAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuQmFyOyB9KVxuICAgICAgICAgICAgICAgIC51bmlxdWUoKVxuICAgICAgICAgICAgICAgIC52YWx1ZSgpXG4gICAgICAgICAgICB5UmFuZ2VNYXggPSBsb2Rhc2guY2hhaW4oZGF0YSlcbiAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKGQpIHsgcmV0dXJuICtkLlZhbHVlOyB9KVxuICAgICAgICAgICAgICAgIC5tYXgoKVxuICAgICAgICAgICAgICAgIC52YWx1ZSgpO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBjb250YWluZXIgZm9yIG1hcHNcbiAgICAgICAgY2hhcnRDb250YWluZXIgPSBkMy5zZWxlY3QoY29udGFpbmVyKVxuICAgICAgICAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwiYmFyY2hhcnQtY29udGFpbmVyXCIsIHRydWUpXG4gICAgICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJiYXJjaGFydC1jb250YWluZXItaW50ZXJuYWxcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAuZGF0dW0oZGF0YSk7XG5cbiAgICAgICAgLy8gY2hhcnRDb250YWluZXIuYXBwZW5kKFwicHJlXCIpXG4gICAgICAgICAgICAvLyAudGV4dChKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCA0KSk7XG4gICAgICAgICAgICAvLyAudGV4dChKU09OLnN0cmluZ2lmeSh5UmFuZ2VNYXgsIG51bGwsIDQpKTtcbiAgICAgICAgICAgIC8vIC50ZXh0KEpTT04uc3RyaW5naWZ5KGJhcktleXMsIG51bGwsIDQpKTtcbiAgICAgICAgICAgIC8vIC50ZXh0KEpTT04uc3RyaW5naWZ5KGNvbmZpZywgbnVsbCwgNCkpO1xuICAgICAgICAvLyByZXR1cm47XG5cbiAgICAgICAgbWFrZWJhcmNoYXJ0Q2hhcnQoY2hhcnRDb250YWluZXIpO1xuXG4gICAgICAgIHJldHVybjtcblxuICAgICAgICAvLyAvKiogU1RBUlQgU0NST0xMIE5PVElDRSAqKi9cbiAgICAgICAgLy8gLy8gaWYgd2UgYXJlIHVuZGVyIGEgY2VydGFpbiBwaXhlbCBzaXplLCB0aGVyZSB3aWxsIGJlIGhvcml6b250YWwgc2Nyb2xsaW5nXG4gICAgICAgIC8vIHZhciBpbnRlcm5hbENvbnRhaW5lclNpemUgPSBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3QoXCJkaXYuYmFyY2hhcnQtY29udGFpbmVyLWludGVybmFsXCIpLm5vZGUoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgLy8gICAgIGNvbnRhaW5lclNpemUgPSBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3QoXCJkaXYuYmFyY2hhcnQtY29udGFpbmVyXCIpLm5vZGUoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAvLyAvLyBjb25zb2xlLmxvZyhpbnRlcm5hbENvbnRhaW5lclNpemUud2lkdGggKyBcIiAvIFwiICsgY29udGFpbmVyU2l6ZS53aWR0aClcbiAgICAgICAgLy8gaWYgKGludGVybmFsQ29udGFpbmVyU2l6ZS53aWR0aCA+IGNvbnRhaW5lclNpemUud2lkdGgpIHtcbiAgICAgICAgLy8gICAgIC8vIGNvbnNvbGUubG9nKFwic2Nyb2xsIE5vdGljZSFcIilcbiAgICAgICAgLy8gICAgIC8vIGNyZWF0ZSBzY3JvbGwgbm90aWNlXG4gICAgICAgIC8vICAgICB2YXIgc2Nyb2xsTm90aWNlID0gZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0KFwiZGl2LmJhcmNoYXJ0LWNvbnRhaW5lclwiKS5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgLy8gICAgICAgICAuY2xhc3NlZChcInNjcm9sbC1ub3RpY2VcIiwgdHJ1ZSlcbiAgICAgICAgLy8gICAgICAgICAuYXBwZW5kKFwicFwiKTtcblxuICAgICAgICAvLyAgICAgc2Nyb2xsTm90aWNlLmFwcGVuZChcImlcIilcbiAgICAgICAgLy8gICAgICAgICAuY2xhc3NlZCh7XG4gICAgICAgIC8vICAgICAgICAgICAgIFwiZmFcIiA6IHRydWUsXG4gICAgICAgIC8vICAgICAgICAgICAgIFwiZmEtYW5nbGUtZG91YmxlLWRvd24gXCIgOiB0cnVlXG4gICAgICAgIC8vICAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gICAgIHNjcm9sbE5vdGljZS5hcHBlbmQoXCJzcGFuXCIpXG4gICAgICAgIC8vICAgICAgICAgLnRleHQoXCJTY3JvbGwgZm9yIG1vcmVcIik7XG5cbiAgICAgICAgLy8gICAgIHNjcm9sbE5vdGljZS5hcHBlbmQoXCJpXCIpXG4gICAgICAgIC8vICAgICAgICAgLmNsYXNzZWQoe1xuICAgICAgICAvLyAgICAgICAgICAgICBcImZhXCIgOiB0cnVlLFxuICAgICAgICAvLyAgICAgICAgICAgICBcImZhLWFuZ2xlLWRvdWJsZS1kb3duIFwiIDogdHJ1ZVxuICAgICAgICAvLyAgICAgICAgIH0pO1xuICAgICAgICAvLyB9XG5cbiAgICAgICAgLy8gZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0QWxsKFwiZGl2LmJhcmNoYXJ0LWNvbnRhaW5lclwiKS5vbihcInNjcm9sbFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gICAgIC8vIGlmIHNjcm9sbCBhdCBib3R0b20sIGhpZGUgc2Nyb2xsIG5vdGljZVxuICAgICAgICAvLyAgICAgLy8gdXNpbmcgYSBkaWZmZXJlbnQgY2xhc3Mgc28gYXMgbm90IHRvIGludGVyZmVyZSB3aXRoIHRoZSBtb3VzZW92ZXIgZWZmZWN0c1xuICAgICAgICAvLyAgICAgaWYgKChkMy5zZWxlY3QodGhpcykubm9kZSgpLnNjcm9sbExlZnQgKyBkMy5zZWxlY3QodGhpcykubm9kZSgpLm9mZnNldFdpZHRoKSA+PSAoZDMuc2VsZWN0KHRoaXMpLm5vZGUoKS5zY3JvbGxXaWR0aCAqIDAuOTc1KSkge1xuICAgICAgICAvLyAgICAgICAgIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImRpdi5zY3JvbGwtbm90aWNlXCIpXG4gICAgICAgIC8vICAgICAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIFwiaGlkZGVuXCIgOiB0cnVlXG4gICAgICAgIC8vICAgICAgICAgICAgIH0pO1xuICAgICAgICAvLyAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gICAgICAgICBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJkaXYuc2Nyb2xsLW5vdGljZVwiKVxuICAgICAgICAvLyAgICAgICAgICAgICAuY2xhc3NlZCh7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBcImhpZGRlblwiIDogZmFsc2VcbiAgICAgICAgLy8gICAgICAgICAgICAgfSk7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0pXG4gICAgICAgIC8vIC8qKiBFTkQgU0NST0xMIE5PVElDRSAqKi9cblxuICAgICAgICAvLyAvLyBhZGQgaG92ZXIgZWZmZWN0cyAtIHVzZSBjbGFzc2VzIFwiaGlnaGxpZ2h0XCIgYW5kIFwibG93bGlnaHRcIlxuICAgICAgICAvLyBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJnLmVudHJ5LCBnLmJhcmNoYXJ0LWxpbmVzID4gcGF0aCwgZy5iYXJjaGFydC1wb2ludHMgPiBwYXRoXCIpXG4gICAgICAgIC8vIC5vbihcIm1vdXNlb3ZlclwiLCBmdW5jdGlvbigpe1xuICAgICAgICAvLyAgICAgdmFyIGNsYXNzVG9IaWdobGlnaHQgPSBkMy5zZWxlY3QodGhpcykuYXR0cihcImRhdGEtY2xhc3NcIik7XG5cbiAgICAgICAgLy8gICAgIC8vIGxvd2xpZ2h0IGFsbCBlbGVtZW50c1xuICAgICAgICAvLyAgICAgZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0QWxsKFwiZy5lbnRyeSwgZy5iYXJjaGFydC1saW5lcyA+IHBhdGgsIGcuYmFyY2hhcnQtcG9pbnRzID4gcGF0aCwgZGl2LnNjcm9sbC1ub3RpY2VcIilcbiAgICAgICAgLy8gICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICBcImxvd2xpZ2h0XCIgOiB0cnVlLFxuICAgICAgICAvLyAgICAgICAgIFwiaGlnaGxpZ2h0XCIgOiBmYWxzZVxuICAgICAgICAvLyAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgLy8gICAgIC8vIGhpZ2hsaWdodCBhbGwgZWxlbWVudHMgd2l0aCBtYXRjaGluZyBkYXRhLWNsYXNzXG4gICAgICAgIC8vICAgICBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJnLmVudHJ5LlwiK2NsYXNzVG9IaWdobGlnaHQrXCIsIGcuYmFyY2hhcnQtbGluZXMgPiBwYXRoLlwiK2NsYXNzVG9IaWdobGlnaHQrXCIsIGcuYmFyY2hhcnQtcG9pbnRzIHBhdGguXCIrY2xhc3NUb0hpZ2hsaWdodClcbiAgICAgICAgLy8gICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICBcImxvd2xpZ2h0XCIgOiBmYWxzZSxcbiAgICAgICAgLy8gICAgICAgICBcImhpZ2hsaWdodFwiIDogdHJ1ZVxuICAgICAgICAvLyAgICAgfSk7XG4gICAgICAgIC8vIH0pXG4gICAgICAgIC8vIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vICAgICAvLyByZW1vdmUgYWxsIGhpZ2hsaWdodC9sb3dsaWdodCBjbGFzc2VzXG4gICAgICAgIC8vICAgICBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJnLmVudHJ5LCBnLmJhcmNoYXJ0LWxpbmVzID4gcGF0aCwgZy5iYXJjaGFydC1wb2ludHMgPiBwYXRoLCBkaXYuc2Nyb2xsLW5vdGljZVwiKVxuICAgICAgICAvLyAgICAgLmNsYXNzZWQoe1xuICAgICAgICAvLyAgICAgICAgIFwibG93bGlnaHRcIiA6IGZhbHNlLFxuICAgICAgICAvLyAgICAgICAgIFwiaGlnaGxpZ2h0XCIgOiBmYWxzZVxuICAgICAgICAvLyAgICAgfSk7XG4gICAgICAgIC8vIH0pO1xuXG4gICAgICAgIGZ1bmN0aW9uIG1ha2ViYXJjaGFydENoYXJ0KHNlbGVjdGlvbikge1xuICAgICAgICAgICAgLy8gaGVscGVyIGZ1bmN0aW9uLCB3cmFwcyB0ZXh0IGZvciBheGlzIGxhYmVsc1xuICAgICAgICAgICAgZnVuY3Rpb24gd3JhcCh0ZXh0LCB3aWR0aCkge1xuICAgICAgICAgICAgICB0ZXh0LmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRleHQgPSBkMy5zZWxlY3QodGhpcyksXG4gICAgICAgICAgICAgICAgICAgIHdvcmRzID0gdGV4dC50ZXh0KCkuc3BsaXQoL1xccysvKS5yZXZlcnNlKCksXG4gICAgICAgICAgICAgICAgICAgIHdvcmQsXG4gICAgICAgICAgICAgICAgICAgIGxpbmUgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlciA9IDAsXG4gICAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQgPSAxLjEsIC8vIGVtc1xuICAgICAgICAgICAgICAgICAgICB5ID0gdGV4dC5hdHRyKFwieVwiKSxcbiAgICAgICAgICAgICAgICAgICAgZHkgPSBwYXJzZUZsb2F0KHRleHQuYXR0cihcImR5XCIpKSxcbiAgICAgICAgICAgICAgICAgICAgdHNwYW4gPSB0ZXh0LnRleHQobnVsbCkuYXBwZW5kKFwidHNwYW5cIikuYXR0cihcInhcIiwgMCkuYXR0cihcInlcIiwgeSkuYXR0cihcImR5XCIsIGR5ICsgXCJlbVwiKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAod29yZCA9IHdvcmRzLnBvcCgpKSB7XG4gICAgICAgICAgICAgICAgICBsaW5lLnB1c2god29yZCk7XG4gICAgICAgICAgICAgICAgICB0c3Bhbi50ZXh0KGxpbmUuam9pbihcIiBcIikpO1xuICAgICAgICAgICAgICAgICAgaWYgKHRzcGFuLm5vZGUoKS5nZXRDb21wdXRlZFRleHRMZW5ndGgoKSA+IHdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmUucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIHRzcGFuLnRleHQobGluZS5qb2luKFwiIFwiKSk7XG4gICAgICAgICAgICAgICAgICAgIGxpbmUgPSBbd29yZF07XG4gICAgICAgICAgICAgICAgICAgIHRzcGFuID0gdGV4dC5hcHBlbmQoXCJ0c3BhblwiKS5hdHRyKFwieFwiLCAwKS5hdHRyKFwieVwiLCB5KS5hdHRyKFwiZHlcIiwgKytsaW5lTnVtYmVyICogbGluZUhlaWdodCArIGR5ICsgXCJlbVwiKS50ZXh0KHdvcmQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNlbGVjdGlvbi5lYWNoKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAvLyBzaXppbmcgYW5kIG1hcmdpbiB2YXJzXG4gICAgICAgICAgICAgICAgdmFyIEJCb3ggPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInRvcFwiIDogQkJveC5oZWlnaHQgKiAwLjA1LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJyaWdodFwiIDogQkJveC53aWR0aCAqIDAuMDUsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJvdHRvbVwiIDogQkJveC5oZWlnaHQgKiAwLjMsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImxlZnRcIiA6IGQzLm1heChbQkJveC53aWR0aCAqIDAuMDUsIDc1XSlcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBCQm94LndpZHRoIC0gKG1hcmdpbi5sZWZ0ICsgbWFyZ2luLnJpZ2h0KVxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBCQm94LmhlaWdodCAtIChtYXJnaW4udG9wICsgbWFyZ2luLmJvdHRvbSksXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gdG9vbHRpcCBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICB0aXAgPSBkMy50aXAoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImdyb3VwZWRiYXItdGlwXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuaHRtbChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvZGFzaC5jaGFpbihbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuTGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQzLmZvcm1hdChcImZcIikoZC5WYWx1ZSkgKyBcIiVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbXBhY3QoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKFwiPGJyIC8+XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgICAgICAvLyBjb250YWluZXJzXG4gICAgICAgICAgICAgICAgICAgIHN2ZyA9IGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIEJCb3guaGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBCQm94LndpZHRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhbGwodGlwKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCwgMClcIiksXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0ID0gc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsIFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGVzdGluZyBzdHVmZiAtIGRyYXdzIG91dGxpbmVzIGFyb3VuZCBzdmcgYW5kIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAvLyBzdmdPdXRsaW5lID0gc3ZnLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHN2Zy5hdHRyKFwiaGVpZ2h0XCIpKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzdmcuYXR0cihcIndpZHRoXCIpKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJmaWxsXCIsIFwicmdiYSgwLDAsMCwwKVwiKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJyZWRcIiksXG4gICAgICAgICAgICAgICAgICAgIC8vIGNoYXJ0T3V0bGluZSA9IHN2Zy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsIFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJoZWlnaHRcIiwgY2hhcnQuYXR0cihcImhlaWdodFwiKSlcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5hdHRyKFwid2lkdGhcIiwgY2hhcnQuYXR0cihcIndpZHRoXCIpKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJmaWxsXCIsIFwicmdiYSgwLDAsMCwwKVwiKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJzdHJva2VcIiAsXCJibHVlXCIpLFxuXG4gICAgICAgICAgICAgICAgICAgIC8vIHggYW5kIHkgc2NhbGVzXG4gICAgICAgICAgICAgICAgICAgIHggPSBkMy5zY2FsZS5vcmRpbmFsKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yYW5nZVJvdW5kQmFuZHMoWzAsIHdpZHRoXSwgMC4xLCAwLjEpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZG9tYWluKGJhcktleXMpLFxuICAgICAgICAgICAgICAgICAgICB5ID0gZDMuc2NhbGUubGluZWFyKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yYW5nZShbaGVpZ2h0LCAwXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kb21haW4oWzAsIHlSYW5nZU1heF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAubmljZSgxMCksXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gLy8gYXhpcyBmdW5jdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgeEF4aXMgPSBkMy5zdmcuYXhpcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2NhbGUoeClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vcmllbnQoXCJib3R0b21cIiksXG4gICAgICAgICAgICAgICAgICAgIHlBeGlzID0gZDMuc3ZnLmF4aXMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNjYWxlKHkpXG4gICAgICAgICAgICAgICAgICAgICAgICAub3JpZW50KFwibGVmdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmlubmVyVGlja1NpemUoLXdpZHRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRpY2tQYWRkaW5nKDEwKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRpY2tGb3JtYXQoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkMy5mb3JtYXQoXCJmXCIpKHQpICsgXCIlXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyAvLyB0ZXN0IG91dHB1dCBmb3IgdHJvdWJsZXNob290aW5nIHRoZSBkYXRhIHN0dWZmXG4gICAgICAgICAgICAgICAgICAgIC8vIGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoXCJwcmVcIilcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC50ZXh0KEpTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIDQpKVxuICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHhBeGlzR3JvdXAgPSBjaGFydC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ4LWF4aXNcIiA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJheGlzXCIgOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCwgXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYWxsKHhBeGlzKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyB3b3Jkd3JhcCBheGlzIGxhYmVsc1xuICAgICAgICAgICAgICAgICAgICB4QXhpc0dyb3VwLnNlbGVjdEFsbChcIi50aWNrIHRleHRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2FsbCh3cmFwLCB4LnJhbmdlQmFuZCgpKTtcblxuICAgICAgICAgICAgICAgICAgICBjaGFydC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ5LWF4aXNcIiA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJheGlzXCIgOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoLTEyLCAwKVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhbGwoeUF4aXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0LnNlbGVjdEFsbChcInJlY3QuYmFyY2hhcnQtYmFyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZGF0YShkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xvckNsYXNzID0gXCJiYXItY29sb3ItXCIgKyAoKGkgJSAyKSArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1wiYmFyY2hhcnQtYmFyXCIsIGNvbG9yQ2xhc3NdLmpvaW4oXCIgXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB4LnJhbmdlQmFuZCgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGhlaWdodCAtIHkoZC5WYWx1ZSk7IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHgoZC5CYXIpOyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB5KGQuVmFsdWUpOyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCB0aXAuc2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAub24oXCJtb3VzZW91dFwiLCB0aXAuaGlkZSlcblxuICAgICAgICAgICAgICAgICAgICAvLyBjaGFydC5zZWxlY3RBbGwoXCJ0ZXh0LmJhcmNoYXJ0LXZhbHVlXCIpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAuZGF0YShkYXRhKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgIC5jbGFzc2VkKFwiYmFyY2hhcnQtdmFsdWVcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIHJldHVybiBkMy5mb3JtYXQoXCIwLjFmXCIpKGQuVmFsdWUpICsgXCIlXCI7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAuYXR0cihcIndpZHRoXCIsIHgucmFuZ2VCYW5kKCkpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHkoZC5WYWx1ZSk7IH0pXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcIm1pZGRsZVwiKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB4KGQuQmFyKSArICh4LnJhbmdlQmFuZCgpLzIpOyB9KVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIC5hdHRyKFwiZHlcIiwgLTQpXG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gYmFyQ2hhcnRTZXJ2aWNlO1xufV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbiAgICAuY29udHJvbGxlcignRGF0YVZpekNvbnRyb2xsZXInLFxuICAgICAgICBbJyRzY29wZScsICckaHR0cCcsICckbG9nJywgJyRsb2NhdGlvbicsICckZmlsdGVyJywgJ3NpZGViYXJEaXNwbGF5JywgJ2NhdGVnb3JpZXMnLFxuICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsICRsb2csICRsb2NhdGlvbiwgJGZpbHRlciwgc2lkZWJhckRpc3BsYXksIGNhdGVnb3JpZXMpIHtcbiAgICAgICAgICAgICAgICAkc2NvcGUudG9nZ2xlID0gc2lkZWJhckRpc3BsYXkudG9nZ2xlO1xuXG4gICAgICAgICAgICAgICAgdmFyIHByb21pc2UgPSBjYXRlZ29yaWVzLmdldENhdGVnb3JpZXMoXCJhbGxcIik7XG4gICAgICAgICAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhdGVnb3JpZXMgPSBjYXRlZ29yaWVzLmxpc3Q7XG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHJlamVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICBhbGVydChcInByb21pc2UgcmVqZWN0ZWQhXCIpO1xuICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRvbignJHZpZXdDb250ZW50TG9hZGVkJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICRzY29wZS50b2dnbGUub3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBzaWRlYmFyRGlzcGxheS5zZWN0aW9uID0gJ1JhdyBEYXRhJztcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1dKVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uZGlyZWN0aXZlKCdkYXRhdml6JywgWyckd2luZG93JywgJyRodHRwJywgJ3RpbWVzZXJpZXNTZXJ2aWNlJywgJ2dyb3VwZWRCYXJDaGFydFNlcnZpY2UnLCAnYmFyQ2hhcnRTZXJ2aWNlJywgJ3RhYmxlU2VydmljZScsIGZ1bmN0aW9uKCR3aW5kb3csICRodHRwLCB0aW1lc2VyaWVzU2VydmljZSwgZ3JvdXBlZEJhckNoYXJ0U2VydmljZSwgYmFyQ2hhcnRTZXJ2aWNlLCB0YWJsZVNlcnZpY2UpIHtcbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHNob3VsZCByZWZsZWN0IHdoYXRldmVyIHlvdXIgZDMgZnVuY3Rpb24gaXMgY2FsbGVkLlxuICAgIHZhciBjaGFydHMgPSB7XG4gICAgICAgIFwibGluZVwiIDogdGltZXNlcmllc1NlcnZpY2UuY2hhcnQsXG4gICAgICAgIFwiYmFyXCIgOiBiYXJDaGFydFNlcnZpY2UuY2hhcnQsXG4gICAgICAgIFwiZ3JvdXBlZEJhclwiIDogZ3JvdXBlZEJhckNoYXJ0U2VydmljZS5jaGFydCxcbiAgICAgICAgXCJ0YWJsZVwiIDogdGFibGVTZXJ2aWNlLmNoYXJ0XG4gICAgfTtcbiAgICByZXR1cm4gIHtcbiAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgc2NvcGU6IHtcbiAgICAgICAgICAgIHdoaWNoOiBcIj13aGljaFwiLFxuICAgICAgICAgICAgdHlwZTogXCI9dHlwZVwiXG4gICAgICAgIH0sXG4gICAgICAgIGxpbms6IGZ1bmN0aW9uKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xuICAgICAgICAgICAgc2NvcGUucmVuZGVyID0gZnVuY3Rpb24oKSB7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2NvcGUuZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBjaGFydHNbc2NvcGUudHlwZV0oZWxlbWVudFswXSwgcmVzdWx0LmRhdGEsIHt9KTsgLy9zY29wZS5jb25maWdcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAkaHR0cC5nZXQoXCIvc3RhdGljL2Rpc3QvZGF0YS9jc3YvXCIgKyBzY29wZS53aGljaCArIFwiLmNzdlwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuZGF0YSA9IHJlc3VsdC5kYXRhO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoYXJ0c1tzY29wZS50eXBlXShlbGVtZW50WzBdLCBzY29wZS5kYXRhLCB7fSk7IC8vc2NvcGUuY29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oJ3doaWNoJywgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUucmVuZGVyKCk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLyoqXG4gICAgICAgICAgICAgICAgVGhpcyBjb2RlIGlzIGludGVuZGVkIHRvIGdldCB0aGUgY2hhcnQgdG8gcmVkcmF3IHdoZW4gdGhlIHdpbmRvdyBpcyByZXNpemVkXG4gICAgICAgICAgICAgICAgQnV0IGFzIGl0IHN0YW5kcywgc29tZWhvdyB0aGlzIG92ZXJyaWRlcyB0aGUgZGF0YSBhbmQgdGhlIGNoYXJ0IGJlY29tZXMgdXNlbGVzcy5cbiAgICAgICAgICAgICAgICBJIGRvbid0IHRoaW5rIHRoaXMgZmVhdHVyZSBpcyB3b3J0aCB0aGUgZGVidWcgdGltZSBub3csIGJ1dCBpdCdzIHdvcnRoIGtlZXBpbmcgaW4gbWluZCBmb3IgdGhlIGZ1dHVyZS5cbiAgICAgICAgICAgICoqL1xuICAgICAgICAgICAgLy8gJHdpbmRvdy5vbnJlc2l6ZSA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgLy8gICAgIHNjb3BlLnJlbmRlcigpXG4gICAgICAgICAgICAvLyB9O1xuXG4gICAgICAgICAgICAvLyBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKCdkYXRhJywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgLy8gICAgIHNjb3BlLnJlbmRlcihkYXRhKTtcbiAgICAgICAgICAgIC8vIH0pO1xuXG4gICAgICAgIH1cbiAgICB9XG59XSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ2dyb3VwZWRCYXJDaGFydFNlcnZpY2UnLCBbJyRxJywgJyRodHRwJywgJ2xvZGFzaCcsIGZ1bmN0aW9uKCRxLCAkaHR0cCwgbG9kYXNoKSB7XG4gICAgdmFyIGdyb3VwZWRCYXJDaGFydFNlcnZpY2UgPSB7fTtcblxuXG4gICAgLy92YXIgd2luZG93V2lkdGggPSBkMy5zZWxlY3QoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoKVswXVswXTtcbiAgICAvLyAgICAgICAgICAgIGlmICh3aW5kb3dXaWR0aCA8IDk5Mikge1xuICAgIC8vICAgICAgICAgICAgICAgIHZhciBsaW5lSGVpZ2h0ID0gMC41NTtcbiAgICAvLyAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgLy8gICAgICAgICAgICAgICAgdmFyIGxpbmVIZWlnaHQgPSAxLjE7XG4gICAgLy8gICAgICAgICAgICB9XG5cblxuICAgIGdyb3VwZWRCYXJDaGFydFNlcnZpY2UuY2hhcnQgPSBmdW5jdGlvbihjb250YWluZXIsIGRhdGEsIGNvbmZpZykge1xuICAgICAgICB2YXIgdGltZUZvcm1hdHMgPSB7XG4gICAgICAgICAgICBcInllYXJcIiA6IFwiWVlZWVwiLFxuICAgICAgICAgICAgXCJxdWFydGVyXCIgOiBcIltRXVEgWVlZWVwiLFxuICAgICAgICAgICAgXCJtb250aFwiIDogXCJNTU0gWVlZWVwiXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uZmlnLmZhY2V0ID0gbG9kYXNoLmRpZmZlcmVuY2UoW1wic3RydWN0dXJlXCIsIFwidGltZVwiXSwgW2NvbmZpZy5mYWNldF0pWzBdXG5cbiAgICAgICAgLy8gY29udmVydCBkYXRhIGZyb20gc3RyaW5nIC0+IGFycmF5IG9mIG9ialxuICAgICAgICBkYXRhID0gZDMuY3N2LnBhcnNlKGRhdGEpO1xuXG4gICAgICAgIHZhciBncm91cEtleXMgPSBsb2Rhc2guY2hhaW4oZGF0YSlcbiAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuR3JvdXA7IH0pXG4gICAgICAgICAgICAgICAgLnVuaXF1ZSgpXG4gICAgICAgICAgICAgICAgLnZhbHVlKCksXG4gICAgICAgICAgICBiYXJLZXlzID1sb2Rhc2guY2hhaW4oZGF0YSlcbiAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuQmFyOyB9KVxuICAgICAgICAgICAgICAgIC51bmlxdWUoKVxuICAgICAgICAgICAgICAgIC52YWx1ZSgpXG4gICAgICAgICAgICB5UmFuZ2VNYXggPSBsb2Rhc2guY2hhaW4oZGF0YSlcbiAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKGQpIHsgcmV0dXJuICtkLlZhbHVlOyB9KVxuICAgICAgICAgICAgICAgIC5tYXgoKVxuICAgICAgICAgICAgICAgIC52YWx1ZSgpO1xuXG4gICAgICAgIC8vIG5lc3QgZGF0YSBieSBiYXIgZ3JvdXBzXG4gICAgICAgIGRhdGEgPSBkMy5uZXN0KClcbiAgICAgICAgICAgIC5rZXkoZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5Hcm91cDsgfSlcbiAgICAgICAgICAgIC5lbnRyaWVzKGRhdGEpO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBjb250YWluZXIgZm9yIG1hcHNcbiAgICAgICAgY2hhcnRDb250YWluZXIgPSBkMy5zZWxlY3QoY29udGFpbmVyKVxuICAgICAgICAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwiZ3JvdXBlZGJhci1jb250YWluZXJcIiwgdHJ1ZSlcbiAgICAgICAgICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgICAgICAgICAuY2xhc3NlZChcImdyb3VwZWRiYXItY29udGFpbmVyLWludGVybmFsXCIsIHRydWUpXG4gICAgICAgICAgICAgICAgLmRhdHVtKGRhdGEpO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBjb250YWluZXIgZm9yIGxlZ2VuZHNcbiAgICAgICAgbGVnZW5kQ29udGFpbmVyID0gZDMuc2VsZWN0KGNvbnRhaW5lcilcbiAgICAgICAgICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgICAgICAgICBcImxlZ2VuZC1jb250YWluZXJcIiA6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJncm91cGVkYmFyLWxlZ2VuZC1jb250YWluZXJcIiA6IHRydWUsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgICAgICAgICAgICAgXCJncm91cGVkYmFyLWxlZ2VuZC1jb250YWluZXItaW50ZXJuYWxcIiA6IHRydWUsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5kYXR1bShiYXJLZXlzKTtcblxuICAgICAgICAvLyBjaGFydENvbnRhaW5lci5hcHBlbmQoXCJwcmVcIilcbiAgICAgICAgICAgIC8vIC50ZXh0KEpTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIDQpKTtcbiAgICAgICAgICAgIC8vIC50ZXh0KEpTT04uc3RyaW5naWZ5KHlSYW5nZU1heCwgbnVsbCwgNCkpO1xuICAgICAgICAgICAgLy8gLnRleHQoSlNPTi5zdHJpbmdpZnkoYmFyS2V5cywgbnVsbCwgNCkpO1xuICAgICAgICAgICAgLy8gLnRleHQoSlNPTi5zdHJpbmdpZnkoY29uZmlnLCBudWxsLCA0KSk7XG4gICAgICAgIC8vIHJldHVybjtcblxuICAgICAgICBtYWtlR3JvdXBlZEJhckNoYXJ0KGNoYXJ0Q29udGFpbmVyKTtcblxuICAgICAgICBtYWtlTGVnZW5kKGxlZ2VuZENvbnRhaW5lcik7XG5cbiAgICAgICAgLy8gLyoqIFNUQVJUIFNDUk9MTCBOT1RJQ0UgKiovXG4gICAgICAgIC8vIC8vIGlmIHdlIGFyZSB1bmRlciBhIGNlcnRhaW4gcGl4ZWwgc2l6ZSwgdGhlcmUgd2lsbCBiZSBob3Jpem9udGFsIHNjcm9sbGluZ1xuICAgICAgICAvLyB2YXIgaW50ZXJuYWxDb250YWluZXJTaXplID0gZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0KFwiZGl2Lmdyb3VwZWRiYXItY29udGFpbmVyLWludGVybmFsXCIpLm5vZGUoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgLy8gICAgIGNvbnRhaW5lclNpemUgPSBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3QoXCJkaXYuZ3JvdXBlZGJhci1jb250YWluZXJcIikubm9kZSgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIC8vIC8vIGNvbnNvbGUubG9nKGludGVybmFsQ29udGFpbmVyU2l6ZS53aWR0aCArIFwiIC8gXCIgKyBjb250YWluZXJTaXplLndpZHRoKVxuICAgICAgICAvLyBpZiAoaW50ZXJuYWxDb250YWluZXJTaXplLndpZHRoID4gY29udGFpbmVyU2l6ZS53aWR0aCkge1xuICAgICAgICAvLyAgICAgLy8gY29uc29sZS5sb2coXCJzY3JvbGwgTm90aWNlIVwiKVxuICAgICAgICAvLyAgICAgLy8gY3JlYXRlIHNjcm9sbCBub3RpY2VcbiAgICAgICAgLy8gICAgIHZhciBzY3JvbGxOb3RpY2UgPSBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3QoXCJkaXYuZ3JvdXBlZGJhci1jb250YWluZXJcIikuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgIC8vICAgICAgICAgLmNsYXNzZWQoXCJzY3JvbGwtbm90aWNlXCIsIHRydWUpXG4gICAgICAgIC8vICAgICAgICAgLmFwcGVuZChcInBcIik7XG5cbiAgICAgICAgLy8gICAgIHNjcm9sbE5vdGljZS5hcHBlbmQoXCJpXCIpXG4gICAgICAgIC8vICAgICAgICAgLmNsYXNzZWQoe1xuICAgICAgICAvLyAgICAgICAgICAgICBcImZhXCIgOiB0cnVlLFxuICAgICAgICAvLyAgICAgICAgICAgICBcImZhLWFuZ2xlLWRvdWJsZS1kb3duIFwiIDogdHJ1ZVxuICAgICAgICAvLyAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vICAgICBzY3JvbGxOb3RpY2UuYXBwZW5kKFwic3BhblwiKVxuICAgICAgICAvLyAgICAgICAgIC50ZXh0KFwiU2Nyb2xsIGZvciBtb3JlXCIpO1xuXG4gICAgICAgIC8vICAgICBzY3JvbGxOb3RpY2UuYXBwZW5kKFwiaVwiKVxuICAgICAgICAvLyAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICAgICAgXCJmYVwiIDogdHJ1ZSxcbiAgICAgICAgLy8gICAgICAgICAgICAgXCJmYS1hbmdsZS1kb3VibGUtZG93biBcIiA6IHRydWVcbiAgICAgICAgLy8gICAgICAgICB9KTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImRpdi5ncm91cGVkYmFyLWNvbnRhaW5lclwiKS5vbihcInNjcm9sbFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gICAgIC8vIGlmIHNjcm9sbCBhdCBib3R0b20sIGhpZGUgc2Nyb2xsIG5vdGljZVxuICAgICAgICAvLyAgICAgLy8gdXNpbmcgYSBkaWZmZXJlbnQgY2xhc3Mgc28gYXMgbm90IHRvIGludGVyZmVyZSB3aXRoIHRoZSBtb3VzZW92ZXIgZWZmZWN0c1xuICAgICAgICAvLyAgICAgaWYgKChkMy5zZWxlY3QodGhpcykubm9kZSgpLnNjcm9sbExlZnQgKyBkMy5zZWxlY3QodGhpcykubm9kZSgpLm9mZnNldFdpZHRoKSA+PSAoZDMuc2VsZWN0KHRoaXMpLm5vZGUoKS5zY3JvbGxXaWR0aCAqIDAuOTc1KSkge1xuICAgICAgICAvLyAgICAgICAgIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImRpdi5zY3JvbGwtbm90aWNlXCIpXG4gICAgICAgIC8vICAgICAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIFwiaGlkZGVuXCIgOiB0cnVlXG4gICAgICAgIC8vICAgICAgICAgICAgIH0pO1xuICAgICAgICAvLyAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gICAgICAgICBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJkaXYuc2Nyb2xsLW5vdGljZVwiKVxuICAgICAgICAvLyAgICAgICAgICAgICAuY2xhc3NlZCh7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBcImhpZGRlblwiIDogZmFsc2VcbiAgICAgICAgLy8gICAgICAgICAgICAgfSk7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0pXG4gICAgICAgIC8vIC8qKiBFTkQgU0NST0xMIE5PVElDRSAqKi9cblxuICAgICAgICAvLyAvLyBhZGQgaG92ZXIgZWZmZWN0cyAtIHVzZSBjbGFzc2VzIFwiaGlnaGxpZ2h0XCIgYW5kIFwibG93bGlnaHRcIlxuICAgICAgICAvLyBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJnLmVudHJ5LCBnLmdyb3VwZWRiYXItbGluZXMgPiBwYXRoLCBnLmdyb3VwZWRiYXItcG9pbnRzID4gcGF0aFwiKVxuICAgICAgICAvLyAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgLy8gICAgIHZhciBjbGFzc1RvSGlnaGxpZ2h0ID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoXCJkYXRhLWNsYXNzXCIpO1xuXG4gICAgICAgIC8vICAgICAvLyBsb3dsaWdodCBhbGwgZWxlbWVudHNcbiAgICAgICAgLy8gICAgIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImcuZW50cnksIGcuZ3JvdXBlZGJhci1saW5lcyA+IHBhdGgsIGcuZ3JvdXBlZGJhci1wb2ludHMgPiBwYXRoLCBkaXYuc2Nyb2xsLW5vdGljZVwiKVxuICAgICAgICAvLyAgICAgLmNsYXNzZWQoe1xuICAgICAgICAvLyAgICAgICAgIFwibG93bGlnaHRcIiA6IHRydWUsXG4gICAgICAgIC8vICAgICAgICAgXCJoaWdobGlnaHRcIiA6IGZhbHNlXG4gICAgICAgIC8vICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAvLyAgICAgLy8gaGlnaGxpZ2h0IGFsbCBlbGVtZW50cyB3aXRoIG1hdGNoaW5nIGRhdGEtY2xhc3NcbiAgICAgICAgLy8gICAgIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImcuZW50cnkuXCIrY2xhc3NUb0hpZ2hsaWdodCtcIiwgZy5ncm91cGVkYmFyLWxpbmVzID4gcGF0aC5cIitjbGFzc1RvSGlnaGxpZ2h0K1wiLCBnLmdyb3VwZWRiYXItcG9pbnRzIHBhdGguXCIrY2xhc3NUb0hpZ2hsaWdodClcbiAgICAgICAgLy8gICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICBcImxvd2xpZ2h0XCIgOiBmYWxzZSxcbiAgICAgICAgLy8gICAgICAgICBcImhpZ2hsaWdodFwiIDogdHJ1ZVxuICAgICAgICAvLyAgICAgfSk7XG4gICAgICAgIC8vIH0pXG4gICAgICAgIC8vIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vICAgICAvLyByZW1vdmUgYWxsIGhpZ2hsaWdodC9sb3dsaWdodCBjbGFzc2VzXG4gICAgICAgIC8vICAgICBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJnLmVudHJ5LCBnLmdyb3VwZWRiYXItbGluZXMgPiBwYXRoLCBnLmdyb3VwZWRiYXItcG9pbnRzID4gcGF0aCwgZGl2LnNjcm9sbC1ub3RpY2VcIilcbiAgICAgICAgLy8gICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICBcImxvd2xpZ2h0XCIgOiBmYWxzZSxcbiAgICAgICAgLy8gICAgICAgICBcImhpZ2hsaWdodFwiIDogZmFsc2VcbiAgICAgICAgLy8gICAgIH0pO1xuICAgICAgICAvLyB9KTtcblxuICAgICAgICBmdW5jdGlvbiBtYWtlTGVnZW5kKHNlbGVjdGlvbikge1xuICAgICAgICAgICAgc2VsZWN0aW9uLmVhY2goZnVuY3Rpb24obGVnZW5kRGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIGNvbG9yIHNjYWxlXG4gICAgICAgICAgICAgICAgdmFyIGNvbG9ycyA9IGQzLnNjYWxlLm9yZGluYWwoKVxuICAgICAgICAgICAgICAgICAgICAucmFuZ2UoW1wiYmFyLWNvbG9yLTFcIiwgXCJiYXItY29sb3ItMlwiLCBcImJhci1jb2xvci0zXCIsIFwiYmFyLWNvbG9yLTRcIl0pXG4gICAgICAgICAgICAgICAgICAgIC5kb21haW4oYmFyS2V5cylcblxuICAgICAgICAgICAgICAgIHZhciBsZWdlbmRFbnRyaWVzID0gZDMuc2VsZWN0KHRoaXMpLnNlbGVjdEFsbChcImRpdi5ncm91cGVkYmFyLWxlZ2VuZC1lbnRyeVwiKVxuICAgICAgICAgICAgICAgICAgICAuZGF0YShsZWdlbmREYXRhKVxuICAgICAgICAgICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZChcImdyb3VwZWRiYXItbGVnZW5kLWVudHJ5XCIsIHRydWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZGF0dW0oZnVuY3Rpb24oZCkgeyByZXR1cm4gZDsgfSlcblxuICAgICAgICAgICAgICAgIGxlZ2VuZEVudHJpZXMuZWFjaChmdW5jdGlvbihlbnRyeURhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmFwcGVuZChcInNwYW5cIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZ3JvdXBlZGJhci1sZWdlbmQtZW50cnktY29sb3JcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29sb3JzKGVudHJ5RGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLmpvaW4oXCIgXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoXCJzcGFuXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZChcImdyb3VwZWRiYXItbGVnZW5kLWVudHJ5LWxhYmVsXCIsIHRydWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGV4dChlbnRyeURhdGEpO1xuICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAvLyBhbGwgc3BhbnMgYXJlIGJ5IGRlZmF1bHQgdW5zdHlsZWQsIHdpdGggbm8gd2F5IHRvIGRvIGl0IGluIGpldHBhY2ssXG4gICAgICAgICAgICAgICAgLy8gc28gaW4gb3JkZXIgdG8gZmlnaHQgdGhlIGhhbmdpbmcgaW5kZW50IGVmZmVjdCwgbW92ZSB0aGVtIG92ZXIgOCBweFxuICAgICAgICAgICAgICAgIC8vIGQzLnNlbGVjdEFsbChcInRzcGFuXCIpLmF0dHIoXCJkeFwiLCA4KVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBtYWtlR3JvdXBlZEJhckNoYXJ0KHNlbGVjdGlvbikge1xuICAgICAgICAgICAgLy8gaGVscGVyIGZ1bmN0aW9uLCB3cmFwcyB0ZXh0IGZvciBheGlzIGxhYmVsc1xuICAgICAgICAgICAgZnVuY3Rpb24gd3JhcCh0ZXh0LCB3aWR0aCkge1xuICAgICAgICAgICAgICB0ZXh0LmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgdmFyIHRleHQgPSBkMy5zZWxlY3QodGhpcyksXG4gICAgICAgICAgICAgICAgICAgIHdvcmRzID0gdGV4dC50ZXh0KCkuc3BsaXQoL1xccysvKS5yZXZlcnNlKCksXG4gICAgICAgICAgICAgICAgICAgIHdvcmQsXG4gICAgICAgICAgICAgICAgICAgIGxpbmUgPSBbXSxcbiAgICAgICAgICAgICAgICAgICAgbGluZU51bWJlciA9IDAsXG4gICAgICAgICAgICAgICAgICAgIGxpbmVIZWlnaHQgPSAxLjEsIC8vIGVtc1xuICAgICAgICAgICAgICAgICAgICB5ID0gdGV4dC5hdHRyKFwieVwiKSxcbiAgICAgICAgICAgICAgICAgICAgZHkgPSBwYXJzZUZsb2F0KHRleHQuYXR0cihcImR5XCIpKSxcbiAgICAgICAgICAgICAgICAgICAgdHNwYW4gPSB0ZXh0LnRleHQobnVsbCkuYXBwZW5kKFwidHNwYW5cIikuYXR0cihcInhcIiwgMCkuYXR0cihcInlcIiwgeSkuYXR0cihcImR5XCIsIGR5ICsgXCJlbVwiKTtcbiAgICAgICAgICAgICAgICB3aGlsZSAod29yZCA9IHdvcmRzLnBvcCgpKSB7XG4gICAgICAgICAgICAgICAgICBsaW5lLnB1c2god29yZCk7XG4gICAgICAgICAgICAgICAgICB0c3Bhbi50ZXh0KGxpbmUuam9pbihcIiBcIikpO1xuICAgICAgICAgICAgICAgICAgaWYgKHRzcGFuLm5vZGUoKS5nZXRDb21wdXRlZFRleHRMZW5ndGgoKSA+IHdpZHRoKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpbmUucG9wKCk7XG4gICAgICAgICAgICAgICAgICAgIHRzcGFuLnRleHQobGluZS5qb2luKFwiIFwiKSk7XG4gICAgICAgICAgICAgICAgICAgIGxpbmUgPSBbd29yZF07XG4gICAgICAgICAgICAgICAgICAgIHRzcGFuID0gdGV4dC5hcHBlbmQoXCJ0c3BhblwiKS5hdHRyKFwieFwiLCAwKS5hdHRyKFwieVwiLCB5KS5hdHRyKFwiZHlcIiwgKytsaW5lTnVtYmVyICogbGluZUhlaWdodCArIGR5ICsgXCJlbVwiKS50ZXh0KHdvcmQpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHNlbGVjdGlvbi5lYWNoKGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgICAgICAvLyBzaXppbmcgYW5kIG1hcmdpbiB2YXJzXG4gICAgICAgICAgICAgICAgdmFyIEJCb3ggPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAgICAgICAgICAgICBtYXJnaW4gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInRvcFwiIDogQkJveC5oZWlnaHQgKiAwLjA1LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJyaWdodFwiIDogQkJveC53aWR0aCAqIDAuMDUsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImJvdHRvbVwiIDogQkJveC5oZWlnaHQgKiAwLjMsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImxlZnRcIiA6IGQzLm1heChbQkJveC53aWR0aCAqIDAuMDUsIDc1XSlcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgd2lkdGggPSBCQm94LndpZHRoIC0gKG1hcmdpbi5sZWZ0ICsgbWFyZ2luLnJpZ2h0KVxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQgPSBCQm94LmhlaWdodCAtIChtYXJnaW4udG9wICsgbWFyZ2luLmJvdHRvbSksXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gdG9vbHRpcCBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICB0aXAgPSBkMy50aXAoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImdyb3VwZWRiYXItdGlwXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuaHRtbChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvZGFzaC5jaGFpbihbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuTGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQzLmZvcm1hdChcImZcIikoZC5WYWx1ZSkgKyBcIiVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbXBhY3QoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKFwiPGJyIC8+XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgICAgICAvLyBjb250YWluZXJzXG4gICAgICAgICAgICAgICAgICAgIHN2ZyA9IGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIEJCb3guaGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBCQm94LndpZHRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhbGwodGlwKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCwgMClcIiksXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0ID0gc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsIFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGVzdGluZyBzdHVmZiAtIGRyYXdzIG91dGxpbmVzIGFyb3VuZCBzdmcgYW5kIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAvLyBzdmdPdXRsaW5lID0gc3ZnLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHN2Zy5hdHRyKFwiaGVpZ2h0XCIpKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzdmcuYXR0cihcIndpZHRoXCIpKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJmaWxsXCIsIFwicmdiYSgwLDAsMCwwKVwiKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJyZWRcIiksXG4gICAgICAgICAgICAgICAgICAgIC8vIGNoYXJ0T3V0bGluZSA9IHN2Zy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsIFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJoZWlnaHRcIiwgY2hhcnQuYXR0cihcImhlaWdodFwiKSlcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5hdHRyKFwid2lkdGhcIiwgY2hhcnQuYXR0cihcIndpZHRoXCIpKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJmaWxsXCIsIFwicmdiYSgwLDAsMCwwKVwiKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJzdHJva2VcIiAsXCJibHVlXCIpLFxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbG9yIHNjYWxlXG4gICAgICAgICAgICAgICAgICAgIGNvbG9ycyA9IGQzLnNjYWxlLm9yZGluYWwoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJhbmdlKFtcImJhci1jb2xvci0xXCIsIFwiYmFyLWNvbG9yLTJcIiwgXCJiYXItY29sb3ItM1wiLCBcImJhci1jb2xvci00XCJdKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRvbWFpbihiYXJLZXlzKSxcblxuICAgICAgICAgICAgICAgICAgICAvLyB4IGFuZCB5IHNjYWxlc1xuICAgICAgICAgICAgICAgICAgICB4MCA9IGQzLnNjYWxlLm9yZGluYWwoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJhbmdlUm91bmRCYW5kcyhbMCwgd2lkdGhdLCAwLjIsIDAuMilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kb21haW4oZ3JvdXBLZXlzKSxcbiAgICAgICAgICAgICAgICAgICAgeDEgPSBkMy5zY2FsZS5vcmRpbmFsKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yYW5nZVJvdW5kQmFuZHMoWzAsIHgwLnJhbmdlQmFuZCgpXSwgMC4xLCAwKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRvbWFpbihiYXJLZXlzKSxcbiAgICAgICAgICAgICAgICAgICAgeSA9IGQzLnNjYWxlLmxpbmVhcigpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmFuZ2UoW2hlaWdodCwgMF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZG9tYWluKFswLCB5UmFuZ2VNYXhdKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm5pY2UoNSksXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gLy8gYXhpcyBmdW5jdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgeDBBeGlzID0gZDMuc3ZnLmF4aXMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNjYWxlKHgwKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9yaWVudChcImJvdHRvbVwiKSxcbiAgICAgICAgICAgICAgICAgICAgeDFBeGlzID0gZDMuc3ZnLmF4aXMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNjYWxlKHgxKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9yaWVudChcImJvdHRvbVwiKSxcbiAgICAgICAgICAgICAgICAgICAgeUF4aXMgPSBkMy5zdmcuYXhpcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2NhbGUoeSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vcmllbnQoXCJsZWZ0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuaW5uZXJUaWNrU2l6ZSgtd2lkdGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGlja1BhZGRpbmcoMTApXG4gICAgICAgICAgICAgICAgICAgICAgICAudGlja0Zvcm1hdChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQzLmZvcm1hdChcImZcIikodCkgKyBcIiVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIC8vIHRlc3Qgb3V0cHV0IGZvciB0cm91Ymxlc2hvb3RpbmcgdGhlIGRhdGEgc3R1ZmZcbiAgICAgICAgICAgICAgICAgICAgLy8gZDMuc2VsZWN0KHRoaXMpLmFwcGVuZChcInByZVwiKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLnRleHQoSlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgNCkpXG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICB2YXIgeDBBeGlzR3JvdXAgPSBjaGFydC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ4LWF4aXNcIiA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJheGlzXCIgOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCwgXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYWxsKHgwQXhpcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgLy8gd29yZHdyYXAgYXhpcyBsYWJlbHNcbiAgICAgICAgICAgICAgICAgICAgeDBBeGlzR3JvdXAuc2VsZWN0QWxsKFwiLnRpY2sgdGV4dFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jYWxsKHdyYXAsIHgwLnJhbmdlQmFuZCgpKTtcblxuICAgICAgICAgICAgICAgICAgICBjaGFydC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ5LWF4aXNcIiA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJheGlzXCIgOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoLTEyLCAwKVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhbGwoeUF4aXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIG1ha2UgYmFyIGdyb3Vwc1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBiYXJHcm91cHMgPSBjaGFydC5zZWxlY3RBbGwoXCJnLmdyb3VwZWRiYXItZ3JvdXBcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kYXRhKGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZChcImdyb3VwZWRiYXItZ3JvdXBcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHgwLnJhbmdlQmFuZCgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcInRyYW5zbGF0ZShcIiArIHgwKGQua2V5KSArIFwiLCAwKVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmRhdHVtKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQudmFsdWVzOyB9KVxuXG4gICAgICAgICAgICAgICAgICAgIGJhckdyb3Vwcy5lYWNoKGZ1bmN0aW9uKGdyb3VwRGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gZ2V0IHNvbWUgZ3JvdXAtc3BlY2lmaWMgdmFycyBzZXQgdXBcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzR3JvdXBCYXJzID0gbG9kYXNoLmNoYWluKGdyb3VwRGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbihkKSB7IHJldHVybiBkLkJhcjsgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLndpdGhvdXQoXCJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnZhbHVlKCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0dyb3VwTGFiZWxzID0gbG9kYXNoLmNoYWluKGdyb3VwRGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbihkKSB7IHJldHVybiBkLkxhYmVsOyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAud2l0aG91dChcIlwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudmFsdWUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JvdXBYMSA9IHgxLmNvcHkoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZG9tYWluKHRoaXNHcm91cEJhcnMpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpZiAodGhpc0dyb3VwTGFiZWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAvLyBtb3ZlIHgwLWF4aXMgZG93blxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIHgwQXhpc0dyb3VwLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCwgXCIgKyAoaGVpZ2h0ICsgKG1hcmdpbi5ib3R0b20vMikpICsgXCIpXCIpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAvLyAvLyAvLyBVc2luZyB4MSBheGlzIHRvIGxhYmVsIGluZGl2aWR1YWwgYmFyc1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIC8vIGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgLy8gICAgIC5jbGFzc2VkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAvLyAgICAgICAgIFwieC1heGlzXCIgOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIC8vICAgICAgICAgXCJheGlzXCIgOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgLy8gICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgLy8gICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsIFwiICsgaGVpZ2h0ICsgXCIpXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgLy8gICAgIC5jYWxsKHgxKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH1cblxuICAgICAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLnNlbGVjdEFsbChcInJlY3QuZ3JvdXBlZGJhci1iYXJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZGF0YShncm91cERhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbXCJncm91cGVkYmFyLWJhclwiLCBjb2xvcnMoZC5CYXIpXS5qb2luKFwiIFwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB0aGlzR3JvdXBYMS5yYW5nZUJhbmQoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gaGVpZ2h0IC0geShkLlZhbHVlKTsgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHRoaXNHcm91cFgxKGQuQmFyKTsgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHkoZC5WYWx1ZSk7IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vbihcIm1vdXNlb3ZlclwiLCB0aXAuc2hvdylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uKFwibW91c2VvdXRcIiwgdGlwLmhpZGUpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGQzLnNlbGVjdCh0aGlzKS5zZWxlY3RBbGwoXCJ0ZXh0Lmdyb3VwZWRiYXItdmFsdWVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAuZGF0YShncm91cERhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgLmNsYXNzZWQoXCJncm91cGVkYmFyLXZhbHVlXCIsIHRydWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIHJldHVybiBkMy5mb3JtYXQoXCIwLjFmXCIpKGQuVmFsdWUpICsgXCIlXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgdGhpc0dyb3VwWDEucmFuZ2VCYW5kKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB5KGQuVmFsdWUpOyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB0aGlzR3JvdXBYMShkLkJhcikgKyAodGhpc0dyb3VwWDEucmFuZ2VCYW5kKCkvMik7IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIC5hdHRyKFwiZHlcIiwgLTQpXG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVzaW5nIHRleHQgdG8gbGFiZWwgaW5kaXZpZHVhbCBiYXJzXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBkMy5zZWxlY3QodGhpcykuc2VsZWN0QWxsKFwidGV4dC5ncm91cGVkYmFyLWxhYmVsXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmRhdGEoZ3JvdXBEYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5lbnRlcigpXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgIC5jbGFzc2VkKFwiZ3JvdXBlZGJhci1sYWJlbFwiLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7IHJldHVybiBkLkxhYmVsOyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAuYXR0cihcIndpZHRoXCIsIHgxLnJhbmdlQmFuZCgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBWQVJJQVRJT05TICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1bmRlciBiYXJzLCBtaWRkbGUgYWxpZ25lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAuYXR0cihcInlcIiwgaGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB4MShkLkJhcikgKyAoeDEucmFuZ2VCYW5kKCkvMik7IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC5hdHRyKFwiZHlcIiwgMTYpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnNpZGUgYmFycywgcm90YXRlZCByaWdodCA5MCBkZWcsIGF0IHJpZ2h0IHNpZGUgb2YgYmFyIHdpdGggeCBhbmQgeSBwYWRkaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwicm90YXRlKC05MClcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIC1oZWlnaHQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiZHhcIiwgNClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB4MShkLkJhcikgKyB4MS5yYW5nZUJhbmQoKTsgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJkeVwiLCAtNClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBncm91cGVkQmFyQ2hhcnRTZXJ2aWNlO1xufV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5kaXJlY3RpdmUoJ3NpbXBsZXRhYmxlJywgZnVuY3Rpb24oKSB7XG4gICAgLy8gVGhpcyBmdW5jdGlvbiBzaG91bGQgcmVmbGVjdCB3aGF0ZXZlciB5b3VyIGQzIHRhYmxlIGZ1bmN0aW9uIGlzIGNhbGxlZC5cbiAgICB2YXIgY2hhcnQgPSB0YWJsZUNoYXJ0KCk7XG4gICAgcmV0dXJuICB7XG4gICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICBkYXRhOiBcIj1kYXRhXCIgLy8gV2UgY2FuIGNhbGwgdGhpcyB3L2Ugd2Ugd2FudC5cbiAgICAgICAgfSxcbiAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgICAgICBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKCdkYXRhJywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIGQzLnNlbGVjdChlbGVtZW50WzBdKS5kYXR1bShkYXRhKS5jYWxsKGNoYXJ0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5zZXJ2aWNlKCd0YWJsZVNlcnZpY2UnLCBbJyRxJywgJyRodHRwJywgJ2xvZGFzaCcsIGZ1bmN0aW9uICgkcSwgJGh0dHAsIGxvZGFzaCkge1xuICAgICAgICB2YXIgdGFibGVTZXJ2aWNlID0ge307XG5cbiAgICAgICAgdGFibGVTZXJ2aWNlLmNoYXJ0ID0gZnVuY3Rpb24gKGNvbnRhaW5lciwgZGF0YSwgY29uZmlnKSB7XG4gICAgICAgICAgICBjb25maWcuZmFjZXQgPSBsb2Rhc2guZGlmZmVyZW5jZShbXCJzdHJ1Y3R1cmVcIiwgXCJ0aW1lXCJdLCBbY29uZmlnLmZhY2V0XSlbMF1cblxuICAgICAgICAgICAgLy8gY29udmVydCBkYXRhIGZyb20gc3RyaW5nIC0+IGFycmF5IG9mIG9ialxuICAgICAgICAgICAgZGF0YSA9IGQzLmNzdi5wYXJzZShkYXRhKTtcbiAgICAgICAgICAgIC8vY29uc29sZS5sb2coZGF0YSk7XG4gICAgICAgICAgICAvLyB2YXIgZ3JvdXBLZXlzID0gbG9kYXNoLmNoYWluKGRhdGEpXG4gICAgICAgICAgICAvLyAgICAgICAgIC5tYXAoZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5Hcm91cDsgfSlcbiAgICAgICAgICAgIC8vICAgICAgICAgLnVuaXF1ZSgpXG4gICAgICAgICAgICAvLyAgICAgICAgIC52YWx1ZSgpLFxuICAgICAgICAgICAgLy8gICAgIGJhcktleXMgPWxvZGFzaC5jaGFpbihkYXRhKVxuICAgICAgICAgICAgLy8gICAgICAgICAubWFwKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuQmFyOyB9KVxuICAgICAgICAgICAgLy8gICAgICAgICAudW5pcXVlKClcbiAgICAgICAgICAgIC8vICAgICAgICAgLnZhbHVlKClcbiAgICAgICAgICAgIC8vICAgICB5UmFuZ2VNYXggPSBsb2Rhc2guY2hhaW4oZGF0YSlcbiAgICAgICAgICAgIC8vICAgICAgICAgLm1hcChmdW5jdGlvbihkKSB7IHJldHVybiArZC5WYWx1ZTsgfSlcbiAgICAgICAgICAgIC8vICAgICAgICAgLm1heCgpXG4gICAgICAgICAgICAvLyAgICAgICAgIC52YWx1ZSgpO1xuXG5cbiAgICAgICAgICAgIHZhciBjb2x1bW5zID0gW107XG4gICAgICAgICAgICBmb3IgKGsgaW4gZGF0YVswXSkge1xuICAgICAgICAgICAgICAgIGNvbHVtbnMucHVzaChrKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gY3JlYXRlIGNvbnRhaW5lciBmb3IgbWFwc1xuICAgICAgICAgICAgY2hhcnRDb250YWluZXIgPSBkMy5zZWxlY3QoY29udGFpbmVyKVxuICAgICAgICAgICAgICAgIC8vLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAgICAgICAgIC8vLmNsYXNzZWQoXCJ0YWJsZS1jb250YWluZXJcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJ0YWJsZS1jb250YWluZXItaW50ZXJuYWxcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAuZGF0dW0oZGF0YSk7XG5cbiAgICAgICAgICAgIC8vIGNyZWF0ZSBjb250YWluZXIgZm9yIGxlZ2VuZHNcbiAgICAgICAgICAgIC8vIGxlZ2VuZENvbnRhaW5lciA9IGQzLnNlbGVjdChjb250YWluZXIpXG4gICAgICAgICAgICAvLyAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAgICAgLy8gICAgIC5jbGFzc2VkKHtcbiAgICAgICAgICAgIC8vICAgICAgICAgXCJsZWdlbmQtY29udGFpbmVyXCIgOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgICAgICBcInRhYmxlLWxlZ2VuZC1jb250YWluZXJcIiA6IHRydWUsXG4gICAgICAgICAgICAvLyAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIGNoYXJ0Q29udGFpbmVyLmFwcGVuZChcInByZVwiKVxuICAgICAgICAgICAgLy8gLnRleHQoSlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgNCkpO1xuICAgICAgICAgICAgLy8gLnRleHQoSlNPTi5zdHJpbmdpZnkoY29sdW1ucywgbnVsbCwgNCkpO1xuICAgICAgICAgICAgLy8gcmV0dXJuO1xuXG4gICAgICAgICAgICBtYWtlVGFibGUoY2hhcnRDb250YWluZXIpO1xuXG4gICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgIC8vdmFyIGxlZ2VuZERpdiA9IGxlZ2VuZENvbnRhaW5lci5zZWxlY3RBbGwoXCJkaXYubGVnZW5kXCIpXG4gICAgICAgICAgICAvLyAgICAuZGF0YShbYmFyS2V5c10pXG4gICAgICAgICAgICAvLyAgICAuZW50ZXIoKVxuICAgICAgICAgICAgLy8gICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAgICAgLy8gICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgXCJsZWdlbmRcIjogdHJ1ZSxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgXCJ0YWJsZS1sZWdlbmRcIjogdHJ1ZVxuICAgICAgICAgICAgLy8gICAgICAgIH0pXG4gICAgICAgICAgICAvL1xuICAgICAgICAgICAgLy9tYWtlTGVnZW5kKGxlZ2VuZERpdik7XG5cblxuICAgICAgICAgICAgLy8gLyoqIFNUQVJUIFNDUk9MTCBOT1RJQ0UgKiovXG4gICAgICAgICAgICAvLyAvLyBpZiB3ZSBhcmUgdW5kZXIgYSBjZXJ0YWluIHBpeGVsIHNpemUsIHRoZXJlIHdpbGwgYmUgaG9yaXpvbnRhbCBzY3JvbGxpbmdcbiAgICAgICAgICAgIC8vIHZhciBpbnRlcm5hbENvbnRhaW5lclNpemUgPSBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3QoXCJkaXYudGFibGUtY29udGFpbmVyLWludGVybmFsXCIpLm5vZGUoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgIC8vICAgICBjb250YWluZXJTaXplID0gZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0KFwiZGl2LnRhYmxlLWNvbnRhaW5lclwiKS5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICAgICAgICAgIC8vIC8vIGNvbnNvbGUubG9nKGludGVybmFsQ29udGFpbmVyU2l6ZS53aWR0aCArIFwiIC8gXCIgKyBjb250YWluZXJTaXplLndpZHRoKVxuICAgICAgICAgICAgLy8gaWYgKGludGVybmFsQ29udGFpbmVyU2l6ZS53aWR0aCA+IGNvbnRhaW5lclNpemUud2lkdGgpIHtcbiAgICAgICAgICAgIC8vICAgICAvLyBjb25zb2xlLmxvZyhcInNjcm9sbCBOb3RpY2UhXCIpXG4gICAgICAgICAgICAvLyAgICAgLy8gY3JlYXRlIHNjcm9sbCBub3RpY2VcbiAgICAgICAgICAgIC8vICAgICB2YXIgc2Nyb2xsTm90aWNlID0gZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0KFwiZGl2LnRhYmxlLWNvbnRhaW5lclwiKS5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgICAgIC8vICAgICAgICAgLmNsYXNzZWQoXCJzY3JvbGwtbm90aWNlXCIsIHRydWUpXG4gICAgICAgICAgICAvLyAgICAgICAgIC5hcHBlbmQoXCJwXCIpO1xuXG4gICAgICAgICAgICAvLyAgICAgc2Nyb2xsTm90aWNlLmFwcGVuZChcImlcIilcbiAgICAgICAgICAgIC8vICAgICAgICAgLmNsYXNzZWQoe1xuICAgICAgICAgICAgLy8gICAgICAgICAgICAgXCJmYVwiIDogdHJ1ZSxcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIFwiZmEtYW5nbGUtZG91YmxlLWRvd24gXCIgOiB0cnVlXG4gICAgICAgICAgICAvLyAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAvLyAgICAgc2Nyb2xsTm90aWNlLmFwcGVuZChcInNwYW5cIilcbiAgICAgICAgICAgIC8vICAgICAgICAgLnRleHQoXCJTY3JvbGwgZm9yIG1vcmVcIik7XG5cbiAgICAgICAgICAgIC8vICAgICBzY3JvbGxOb3RpY2UuYXBwZW5kKFwiaVwiKVxuICAgICAgICAgICAgLy8gICAgICAgICAuY2xhc3NlZCh7XG4gICAgICAgICAgICAvLyAgICAgICAgICAgICBcImZhXCIgOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgXCJmYS1hbmdsZS1kb3VibGUtZG93biBcIiA6IHRydWVcbiAgICAgICAgICAgIC8vICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyB9XG5cbiAgICAgICAgICAgIC8vIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImRpdi50YWJsZS1jb250YWluZXJcIikub24oXCJzY3JvbGxcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAvLyAgICAgLy8gaWYgc2Nyb2xsIGF0IGJvdHRvbSwgaGlkZSBzY3JvbGwgbm90aWNlXG4gICAgICAgICAgICAvLyAgICAgLy8gdXNpbmcgYSBkaWZmZXJlbnQgY2xhc3Mgc28gYXMgbm90IHRvIGludGVyZmVyZSB3aXRoIHRoZSBtb3VzZW92ZXIgZWZmZWN0c1xuICAgICAgICAgICAgLy8gICAgIGlmICgoZDMuc2VsZWN0KHRoaXMpLm5vZGUoKS5zY3JvbGxMZWZ0ICsgZDMuc2VsZWN0KHRoaXMpLm5vZGUoKS5vZmZzZXRXaWR0aCkgPj0gKGQzLnNlbGVjdCh0aGlzKS5ub2RlKCkuc2Nyb2xsV2lkdGggKiAwLjk3NSkpIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0QWxsKFwiZGl2LnNjcm9sbC1ub3RpY2VcIilcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICBcImhpZGRlblwiIDogdHJ1ZVxuICAgICAgICAgICAgLy8gICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAvLyAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vICAgICAgICAgZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0QWxsKFwiZGl2LnNjcm9sbC1ub3RpY2VcIilcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICBcImhpZGRlblwiIDogZmFsc2VcbiAgICAgICAgICAgIC8vICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgIC8vIH0pXG4gICAgICAgICAgICAvLyAvKiogRU5EIFNDUk9MTCBOT1RJQ0UgKiovXG5cbiAgICAgICAgICAgIC8vIC8vIGFkZCBob3ZlciBlZmZlY3RzIC0gdXNlIGNsYXNzZXMgXCJoaWdobGlnaHRcIiBhbmQgXCJsb3dsaWdodFwiXG4gICAgICAgICAgICAvLyBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJnLmVudHJ5LCBnLnRhYmxlLWxpbmVzID4gcGF0aCwgZy50YWJsZS1wb2ludHMgPiBwYXRoXCIpXG4gICAgICAgICAgICAvLyAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgICAgIC8vICAgICB2YXIgY2xhc3NUb0hpZ2hsaWdodCA9IGQzLnNlbGVjdCh0aGlzKS5hdHRyKFwiZGF0YS1jbGFzc1wiKTtcblxuICAgICAgICAgICAgLy8gICAgIC8vIGxvd2xpZ2h0IGFsbCBlbGVtZW50c1xuICAgICAgICAgICAgLy8gICAgIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImcuZW50cnksIGcudGFibGUtbGluZXMgPiBwYXRoLCBnLnRhYmxlLXBvaW50cyA+IHBhdGgsIGRpdi5zY3JvbGwtbm90aWNlXCIpXG4gICAgICAgICAgICAvLyAgICAgLmNsYXNzZWQoe1xuICAgICAgICAgICAgLy8gICAgICAgICBcImxvd2xpZ2h0XCIgOiB0cnVlLFxuICAgICAgICAgICAgLy8gICAgICAgICBcImhpZ2hsaWdodFwiIDogZmFsc2VcbiAgICAgICAgICAgIC8vICAgICB9KTtcblxuICAgICAgICAgICAgLy8gICAgIC8vIGhpZ2hsaWdodCBhbGwgZWxlbWVudHMgd2l0aCBtYXRjaGluZyBkYXRhLWNsYXNzXG4gICAgICAgICAgICAvLyAgICAgZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0QWxsKFwiZy5lbnRyeS5cIitjbGFzc1RvSGlnaGxpZ2h0K1wiLCBnLnRhYmxlLWxpbmVzID4gcGF0aC5cIitjbGFzc1RvSGlnaGxpZ2h0K1wiLCBnLnRhYmxlLXBvaW50cyBwYXRoLlwiK2NsYXNzVG9IaWdobGlnaHQpXG4gICAgICAgICAgICAvLyAgICAgLmNsYXNzZWQoe1xuICAgICAgICAgICAgLy8gICAgICAgICBcImxvd2xpZ2h0XCIgOiBmYWxzZSxcbiAgICAgICAgICAgIC8vICAgICAgICAgXCJoaWdobGlnaHRcIiA6IHRydWVcbiAgICAgICAgICAgIC8vICAgICB9KTtcbiAgICAgICAgICAgIC8vIH0pXG4gICAgICAgICAgICAvLyAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbigpe1xuICAgICAgICAgICAgLy8gICAgIC8vIHJlbW92ZSBhbGwgaGlnaGxpZ2h0L2xvd2xpZ2h0IGNsYXNzZXNcbiAgICAgICAgICAgIC8vICAgICBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJnLmVudHJ5LCBnLnRhYmxlLWxpbmVzID4gcGF0aCwgZy50YWJsZS1wb2ludHMgPiBwYXRoLCBkaXYuc2Nyb2xsLW5vdGljZVwiKVxuICAgICAgICAgICAgLy8gICAgIC5jbGFzc2VkKHtcbiAgICAgICAgICAgIC8vICAgICAgICAgXCJsb3dsaWdodFwiIDogZmFsc2UsXG4gICAgICAgICAgICAvLyAgICAgICAgIFwiaGlnaGxpZ2h0XCIgOiBmYWxzZVxuICAgICAgICAgICAgLy8gICAgIH0pO1xuICAgICAgICAgICAgLy8gfSk7XG5cbiAgICAgICAgICAgIGZ1bmN0aW9uIG1ha2VUYWJsZShzZWxlY3Rpb24pIHtcbiAgICAgICAgICAgICAgICBzZWxlY3Rpb24uZWFjaChmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBjb250YWluZXJzXG4gICAgICAgICAgICAgICAgICAgIHZhciB0YWJsZSA9IGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoXCJ0YWJsZVwiKS5hdHRyKFwiY2xhc3NcIiwgXCJjdGRhdGEtdGFibGVcIik7XG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGVhZCA9IHRhYmxlLmFwcGVuZChcInRoZWFkXCIpO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdGJvZHkgPSB0YWJsZS5hcHBlbmQoXCJ0Ym9keVwiKTtcblxuXG4gICAgICAgICAgICAgICAgICAgIC8vIC8vIHRlc3Qgb3V0cHV0IGZvciB0cm91Ymxlc2hvb3RpbmcgdGhlIGRhdGEgc3R1ZmZcbiAgICAgICAgICAgICAgICAgICAgLy8gZDMuc2VsZWN0KHRoaXMpLmFwcGVuZChcInByZVwiKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLnRleHQoSlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgNCkpXG4gICAgICAgICAgICAgICAgICAgIC8vIHJldHVybjtcblxuICAgICAgICAgICAgICAgICAgICAvLyBwb3B1bGF0ZSBoZWFkZXJcbiAgICAgICAgICAgICAgICAgICAgdGhlYWQuYXBwZW5kKFwidHJcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJ0aFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRhdGEoY29sdW1ucylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKFwidGhcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkPT09J0luZGljYXRvcicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdoaWRlJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ2NvbC1uYW1lJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGJ1aWxkIHJvd3NcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvd3MgPSB0Ym9keS5zZWxlY3RBbGwoXCJ0clwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRhdGEoZGF0YSkuZW50ZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcInRyXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIGZpbGwgaW4gY2VsbHNcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNlbGxzID0gcm93cy5zZWxlY3RBbGwoJ3RkJylcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kYXRhKGZ1bmN0aW9uIChyb3cpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29sdW1ucy5tYXAoZnVuY3Rpb24gKGNvbHVtbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge2NvbHVtbjogY29sdW1uLCB2YWx1ZTogcm93W2NvbHVtbl19O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKCd0ZCcpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcImRhdGEtdGl0bGVcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkLmNvbHVtbjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZC5jb2x1bW49PT0nSW5kaWNhdG9yJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJuYW1lXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwidmFsdWVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmh0bWwoZnVuY3Rpb24gKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG5cbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhYmxlU2VydmljZTtcbiAgICB9XSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ3RpbWVzZXJpZXNTZXJ2aWNlJywgWyckcScsICckaHR0cCcsICdsb2Rhc2gnLCBmdW5jdGlvbigkcSwgJGh0dHAsIGxvZGFzaCkge1xuICAgIHZhciB0aW1lc2VyaWVzU2VydmljZSA9IHt9O1xuXG4gICAgdGltZXNlcmllc1NlcnZpY2UuY2hhcnQgPSBmdW5jdGlvbihjb250YWluZXIsIGRhdGEsIGNvbmZpZykge1xuICAgICAgICB2YXIgdGltZUZvcm1hdHMgPSB7XG4gICAgICAgICAgICBcInllYXJcIiA6IFwiWVlZWVwiLFxuICAgICAgICAgICAgXCJxdWFydGVyXCIgOiBcIltRXVEgWVlZWVwiLFxuICAgICAgICAgICAgXCJtb250aFwiIDogXCJNTU0gWVlZWVwiXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uZmlnLmZhY2V0ID0gbG9kYXNoLmRpZmZlcmVuY2UoW1wic3RydWN0dXJlXCIsIFwidGltZVwiXSwgW2NvbmZpZy5mYWNldF0pWzBdXG5cbiAgICAgICAgLy8gY29udmVydCBkYXRhIGZyb20gc3RyaW5nIC0+IGFycmF5IG9mIG9ialxuICAgICAgICBkYXRhID0gZDMuY3N2LnBhcnNlKGRhdGEpO1xuXG4gICAgICAgIC8vIGtleXMgZm9yIGNvbG9yIGFuZCBzaGFwZSBzY2FsZXNcbiAgICAgICAgdmFyIGxpbmVLZXlzID0gbG9kYXNoLmNoYWluKGRhdGFbMF0pXG4gICAgICAgICAgICAua2V5cygpXG4gICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uKGspIHsgcmV0dXJuIGsgIT09IFwiWWVhclwiOyB9KVxuICAgICAgICAgICAgLnZhbHVlKCk7XG5cbiAgICAgICAgLy8gY3JlYXRlIGNvbnRhaW5lciBmb3IgbWFwc1xuICAgICAgICBjaGFydENvbnRhaW5lciA9IGQzLnNlbGVjdChjb250YWluZXIpXG4gICAgICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJ0aW1lc2VyaWVzLWNvbnRhaW5lclwiLCB0cnVlKVxuICAgICAgICAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwidGltZXNlcmllcy1jb250YWluZXItaW50ZXJuYWxcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAuZGF0dW0oZGF0YSk7XG5cbiAgICAgICAgLy8gY3JlYXRlIGNvbnRhaW5lciBmb3IgbGVnZW5kc1xuICAgICAgICBsZWdlbmRDb250YWluZXIgPSBkMy5zZWxlY3QoY29udGFpbmVyKVxuICAgICAgICAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAgICAgLmNsYXNzZWQoe1xuICAgICAgICAgICAgICAgIFwibGVnZW5kLWNvbnRhaW5lclwiIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInRpbWVzZXJpZXMtbGVnZW5kLWNvbnRhaW5lclwiIDogdHJ1ZSxcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vIGNoYXJ0Q29udGFpbmVyLmFwcGVuZChcInByZVwiKVxuICAgICAgICAgICAgLy8gLnRleHQoSlNPTi5zdHJpbmdpZnkoZGF0YSwgbnVsbCwgNCkpO1xuICAgICAgICAgICAgLy8gLnRleHQoSlNPTi5zdHJpbmdpZnkoY29uZmlnLCBudWxsLCA0KSk7XG4gICAgICAgIC8vIHJldHVybjtcblxuICAgICAgICBtYWtlVGltZVNlcmllcyhjaGFydENvbnRhaW5lcik7XG5cbiAgICAgICAgLy8gY3JlYXRlIGNvbnRhaW5lciBmb3IgbGVnZW5kc1xuICAgICAgICBsZWdlbmRDb250YWluZXIgPSBkMy5zZWxlY3QoY29udGFpbmVyKVxuICAgICAgICAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAgICAgLmNsYXNzZWQoe1xuICAgICAgICAgICAgICAgIFwibGVnZW5kLWNvbnRhaW5lclwiIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBcInRpbWVzZXJpZXMtbGVnZW5kLWNvbnRhaW5lclwiIDogdHJ1ZSxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoe1xuICAgICAgICAgICAgICAgICAgICBcInRpbWVzZXJpZXMtbGVnZW5kLWNvbnRhaW5lci1pbnRlcm5hbFwiIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmRhdHVtKGxpbmVLZXlzKTtcblxuICAgICAgICBtYWtlTGVnZW5kKGxlZ2VuZENvbnRhaW5lcik7XG5cbiAgICAgICAgLy8gLyoqIFNUQVJUIFNDUk9MTCBOT1RJQ0UgKiovXG4gICAgICAgIC8vIC8vIGlmIHdlIGFyZSB1bmRlciBhIGNlcnRhaW4gcGl4ZWwgc2l6ZSwgdGhlcmUgd2lsbCBiZSBob3Jpem9udGFsIHNjcm9sbGluZ1xuICAgICAgICAvLyB2YXIgaW50ZXJuYWxDb250YWluZXJTaXplID0gZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0KFwiZGl2LnRpbWVzZXJpZXMtY29udGFpbmVyLWludGVybmFsXCIpLm5vZGUoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgLy8gICAgIGNvbnRhaW5lclNpemUgPSBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3QoXCJkaXYudGltZXNlcmllcy1jb250YWluZXJcIikubm9kZSgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIC8vIC8vIGNvbnNvbGUubG9nKGludGVybmFsQ29udGFpbmVyU2l6ZS53aWR0aCArIFwiIC8gXCIgKyBjb250YWluZXJTaXplLndpZHRoKVxuICAgICAgICAvLyBpZiAoaW50ZXJuYWxDb250YWluZXJTaXplLndpZHRoID4gY29udGFpbmVyU2l6ZS53aWR0aCkge1xuICAgICAgICAvLyAgICAgLy8gY29uc29sZS5sb2coXCJzY3JvbGwgTm90aWNlIVwiKVxuICAgICAgICAvLyAgICAgLy8gY3JlYXRlIHNjcm9sbCBub3RpY2VcbiAgICAgICAgLy8gICAgIHZhciBzY3JvbGxOb3RpY2UgPSBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3QoXCJkaXYudGltZXNlcmllcy1jb250YWluZXJcIikuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgIC8vICAgICAgICAgLmNsYXNzZWQoXCJzY3JvbGwtbm90aWNlXCIsIHRydWUpXG4gICAgICAgIC8vICAgICAgICAgLmFwcGVuZChcInBcIik7XG5cbiAgICAgICAgLy8gICAgIHNjcm9sbE5vdGljZS5hcHBlbmQoXCJpXCIpXG4gICAgICAgIC8vICAgICAgICAgLmNsYXNzZWQoe1xuICAgICAgICAvLyAgICAgICAgICAgICBcImZhXCIgOiB0cnVlLFxuICAgICAgICAvLyAgICAgICAgICAgICBcImZhLWFuZ2xlLWRvdWJsZS1kb3duIFwiIDogdHJ1ZVxuICAgICAgICAvLyAgICAgICAgIH0pO1xuXG4gICAgICAgIC8vICAgICBzY3JvbGxOb3RpY2UuYXBwZW5kKFwic3BhblwiKVxuICAgICAgICAvLyAgICAgICAgIC50ZXh0KFwiU2Nyb2xsIGZvciBtb3JlXCIpO1xuXG4gICAgICAgIC8vICAgICBzY3JvbGxOb3RpY2UuYXBwZW5kKFwiaVwiKVxuICAgICAgICAvLyAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICAgICAgXCJmYVwiIDogdHJ1ZSxcbiAgICAgICAgLy8gICAgICAgICAgICAgXCJmYS1hbmdsZS1kb3VibGUtZG93biBcIiA6IHRydWVcbiAgICAgICAgLy8gICAgICAgICB9KTtcbiAgICAgICAgLy8gfVxuXG4gICAgICAgIC8vIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImRpdi50aW1lc2VyaWVzLWNvbnRhaW5lclwiKS5vbihcInNjcm9sbFwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gICAgIC8vIGlmIHNjcm9sbCBhdCBib3R0b20sIGhpZGUgc2Nyb2xsIG5vdGljZVxuICAgICAgICAvLyAgICAgLy8gdXNpbmcgYSBkaWZmZXJlbnQgY2xhc3Mgc28gYXMgbm90IHRvIGludGVyZmVyZSB3aXRoIHRoZSBtb3VzZW92ZXIgZWZmZWN0c1xuICAgICAgICAvLyAgICAgaWYgKChkMy5zZWxlY3QodGhpcykubm9kZSgpLnNjcm9sbExlZnQgKyBkMy5zZWxlY3QodGhpcykubm9kZSgpLm9mZnNldFdpZHRoKSA+PSAoZDMuc2VsZWN0KHRoaXMpLm5vZGUoKS5zY3JvbGxXaWR0aCAqIDAuOTc1KSkge1xuICAgICAgICAvLyAgICAgICAgIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImRpdi5zY3JvbGwtbm90aWNlXCIpXG4gICAgICAgIC8vICAgICAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIFwiaGlkZGVuXCIgOiB0cnVlXG4gICAgICAgIC8vICAgICAgICAgICAgIH0pO1xuICAgICAgICAvLyAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gICAgICAgICBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJkaXYuc2Nyb2xsLW5vdGljZVwiKVxuICAgICAgICAvLyAgICAgICAgICAgICAuY2xhc3NlZCh7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBcImhpZGRlblwiIDogZmFsc2VcbiAgICAgICAgLy8gICAgICAgICAgICAgfSk7XG4gICAgICAgIC8vICAgICB9XG4gICAgICAgIC8vIH0pXG4gICAgICAgIC8vIC8qKiBFTkQgU0NST0xMIE5PVElDRSAqKi9cblxuICAgICAgICAvLyAvLyBhZGQgaG92ZXIgZWZmZWN0cyAtIHVzZSBjbGFzc2VzIFwiaGlnaGxpZ2h0XCIgYW5kIFwibG93bGlnaHRcIlxuICAgICAgICAvLyBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJnLmVudHJ5LCBnLnRpbWVzZXJpZXMtbGluZXMgPiBwYXRoLCBnLnRpbWVzZXJpZXMtcG9pbnRzID4gcGF0aFwiKVxuICAgICAgICAvLyAub24oXCJtb3VzZW92ZXJcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgLy8gICAgIHZhciBjbGFzc1RvSGlnaGxpZ2h0ID0gZDMuc2VsZWN0KHRoaXMpLmF0dHIoXCJkYXRhLWNsYXNzXCIpO1xuXG4gICAgICAgIC8vICAgICAvLyBsb3dsaWdodCBhbGwgZWxlbWVudHNcbiAgICAgICAgLy8gICAgIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImcuZW50cnksIGcudGltZXNlcmllcy1saW5lcyA+IHBhdGgsIGcudGltZXNlcmllcy1wb2ludHMgPiBwYXRoLCBkaXYuc2Nyb2xsLW5vdGljZVwiKVxuICAgICAgICAvLyAgICAgLmNsYXNzZWQoe1xuICAgICAgICAvLyAgICAgICAgIFwibG93bGlnaHRcIiA6IHRydWUsXG4gICAgICAgIC8vICAgICAgICAgXCJoaWdobGlnaHRcIiA6IGZhbHNlXG4gICAgICAgIC8vICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAvLyAgICAgLy8gaGlnaGxpZ2h0IGFsbCBlbGVtZW50cyB3aXRoIG1hdGNoaW5nIGRhdGEtY2xhc3NcbiAgICAgICAgLy8gICAgIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImcuZW50cnkuXCIrY2xhc3NUb0hpZ2hsaWdodCtcIiwgZy50aW1lc2VyaWVzLWxpbmVzID4gcGF0aC5cIitjbGFzc1RvSGlnaGxpZ2h0K1wiLCBnLnRpbWVzZXJpZXMtcG9pbnRzIHBhdGguXCIrY2xhc3NUb0hpZ2hsaWdodClcbiAgICAgICAgLy8gICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICBcImxvd2xpZ2h0XCIgOiBmYWxzZSxcbiAgICAgICAgLy8gICAgICAgICBcImhpZ2hsaWdodFwiIDogdHJ1ZVxuICAgICAgICAvLyAgICAgfSk7XG4gICAgICAgIC8vIH0pXG4gICAgICAgIC8vIC5vbihcIm1vdXNlb3V0XCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vICAgICAvLyByZW1vdmUgYWxsIGhpZ2hsaWdodC9sb3dsaWdodCBjbGFzc2VzXG4gICAgICAgIC8vICAgICBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJnLmVudHJ5LCBnLnRpbWVzZXJpZXMtbGluZXMgPiBwYXRoLCBnLnRpbWVzZXJpZXMtcG9pbnRzID4gcGF0aCwgZGl2LnNjcm9sbC1ub3RpY2VcIilcbiAgICAgICAgLy8gICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICBcImxvd2xpZ2h0XCIgOiBmYWxzZSxcbiAgICAgICAgLy8gICAgICAgICBcImhpZ2hsaWdodFwiIDogZmFsc2VcbiAgICAgICAgLy8gICAgIH0pO1xuICAgICAgICAvLyB9KTtcblxuICAgICAgICBmdW5jdGlvbiBtYWtlTGVnZW5kKHNlbGVjdGlvbikge1xuICAgICAgICAgICAgc2VsZWN0aW9uLmVhY2goZnVuY3Rpb24obGVnZW5kRGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIGNvbG9yIHNjYWxlXG4gICAgICAgICAgICAgICAgY29sb3JzID0gZDMuc2NhbGUub3JkaW5hbCgpXG4gICAgICAgICAgICAgICAgICAgIC5yYW5nZShbXCIjMUVBQ0YxXCIsIFwiI0I5NEE0OFwiXSlcbiAgICAgICAgICAgICAgICAgICAgLmRvbWFpbihsaW5lS2V5cyk7XG5cbiAgICAgICAgICAgICAgICB2YXIgbGVnZW5kRW50cmllcyA9IGQzLnNlbGVjdCh0aGlzKS5zZWxlY3RBbGwoXCJkaXYudGltZXNlcmllcy1sZWdlbmQtZW50cnlcIilcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEobGVnZW5kRGF0YSlcbiAgICAgICAgICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJ0aW1lc2VyaWVzLWxlZ2VuZC1lbnRyeVwiLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRhdHVtKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQ7IH0pXG5cbiAgICAgICAgICAgICAgICBsZWdlbmRFbnRyaWVzLmVhY2goZnVuY3Rpb24oZW50cnlEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoXCJzcGFuXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZChcInRpbWVzZXJpZXMtbGVnZW5kLWVudHJ5LWNvbG9yXCIsIHRydWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc3R5bGUoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIGNvbG9ycyhlbnRyeURhdGEpKTtcblxuICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuYXBwZW5kKFwic3BhblwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJ0aW1lc2VyaWVzLWxlZ2VuZC1lbnRyeS1sYWJlbFwiLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRleHQoZW50cnlEYXRhKTtcbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgLy8gYWxsIHNwYW5zIGFyZSBieSBkZWZhdWx0IHVuc3R5bGVkLCB3aXRoIG5vIHdheSB0byBkbyBpdCBpbiBqZXRwYWNrLFxuICAgICAgICAgICAgICAgIC8vIHNvIGluIG9yZGVyIHRvIGZpZ2h0IHRoZSBoYW5naW5nIGluZGVudCBlZmZlY3QsIG1vdmUgdGhlbSBvdmVyIDggcHhcbiAgICAgICAgICAgICAgICAvLyBkMy5zZWxlY3RBbGwoXCJ0c3BhblwiKS5hdHRyKFwiZHhcIiwgOClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbWFrZVRpbWVTZXJpZXMoc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICBzZWxlY3Rpb24uZWFjaChmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgLy8gc2l6aW5nIGFuZCBtYXJnaW4gdmFyc1xuICAgICAgICAgICAgICAgIHZhciBCQm94ID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0b3BcIiA6IEJCb3guaGVpZ2h0ICogMC4wNSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicmlnaHRcIiA6IEJCb3gud2lkdGggKiAwLjA1LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJib3R0b21cIiA6IEJCb3guaGVpZ2h0ICogMC4xLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJsZWZ0XCIgOiBkMy5tYXgoW0JCb3gud2lkdGggKiAwLjA1LCA1NV0pXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gQkJveC53aWR0aCAtIChtYXJnaW4ubGVmdCArIG1hcmdpbi5yaWdodClcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gQkJveC5oZWlnaHQgLSAobWFyZ2luLnRvcCArIG1hcmdpbi5ib3R0b20pLFxuICAgICAgICAgICAgICAgICAgICB0aXAgPSBkMy50aXAoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBcImdyb3VwZWRiYXItdGlwXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuaHRtbChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxvZGFzaC5jaGFpbihbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQuTGFiZWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQzLmZvcm1hdChcImZcIikoZC5WYWx1ZSkgKyBcIiVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNvbXBhY3QoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5qb2luKFwiPGJyIC8+XCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgICAgICAvLyBjb250YWluZXJzXG4gICAgICAgICAgICAgICAgICAgIHN2ZyA9IGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIEJCb3guaGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBCQm94LndpZHRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhbGwodGlwKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCwgMClcIiksXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0ID0gc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsIFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKSxcblxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0ZXN0aW5nIHN0dWZmIC0gZHJhd3Mgb3V0bGluZXMgYXJvdW5kIHN2ZyBhbmQgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgIC8vIHN2Z091dGxpbmUgPSBzdmcuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJoZWlnaHRcIiwgc3ZnLmF0dHIoXCJoZWlnaHRcIikpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAuYXR0cihcIndpZHRoXCIsIHN2Zy5hdHRyKFwid2lkdGhcIikpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAuYXR0cihcImZpbGxcIiwgXCJyZ2JhKDAsMCwwLDApXCIpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAuYXR0cihcInN0cm9rZVwiLCBcInJlZFwiKSxcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hhcnRPdXRsaW5lID0gc3ZnLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIiwgXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAuYXR0cihcImhlaWdodFwiLCBjaGFydC5hdHRyKFwiaGVpZ2h0XCIpKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJ3aWR0aFwiLCBjaGFydC5hdHRyKFwid2lkdGhcIikpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAuYXR0cihcImZpbGxcIiwgXCJyZ2JhKDAsMCwwLDApXCIpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAuYXR0cihcInN0cm9rZVwiICxcImJsdWVcIiksXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gY29sb3Igc2NhbGVcbiAgICAgICAgICAgICAgICAgICAgY29sb3JzID0gZDMuc2NhbGUub3JkaW5hbCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmFuZ2UoW1wiIzFFQUNGMVwiLCBcIiNCOTRBNDhcIl0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZG9tYWluKGxpbmVLZXlzKSxcblxuICAgICAgICAgICAgICAgICAgICAvLyBwb2ludCBzaGFwZSBcInNjYWxlXCJcbiAgICAgICAgICAgICAgICAgICAgc3ltYm9sU2NhbGUgPSBkMy5zY2FsZS5vcmRpbmFsKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yYW5nZShkMy5zdmcuc3ltYm9sVHlwZXMpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZG9tYWluKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbmVLZXlzXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuXG4gICAgICAgICAgICAgICAgICAgIC8vIHggYW5kIHkgc2NhbGVzXG4gICAgICAgICAgICAgICAgICAgIHRpbWVGb3JtYXQgPSBkMy50aW1lLmZvcm1hdChcIiVZXCIpLFxuICAgICAgICAgICAgICAgICAgICB0aW1lUmFuZ2UgPSBsb2Rhc2guY2hhaW4oZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkLlllYXI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLnZhbHVlKCksXG4gICAgICAgICAgICAgICAgICAgIHggPSBkMy50aW1lLnNjYWxlKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yYW5nZShbMTIsIHdpZHRoXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kb21haW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZDMuZXh0ZW50KHRpbWVSYW5nZSkubWFwKGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRpbWVGb3JtYXQucGFyc2UodCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgICAgIHkgPSBkMy5zY2FsZS5saW5lYXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJhbmdlKFtoZWlnaHQsIDBdKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRvbWFpbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkMy5leHRlbnQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvZGFzaC5jaGFpbihkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxpbmVLZXlzLm1hcChmdW5jdGlvbihrKXtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICtkW2tdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5mbGF0dGVuKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC51bmlxdWUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnZhbHVlKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApLy8ubWFwKGZ1bmN0aW9uKHYsIGkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIHJldHVybiAoTWF0aC5jZWlsKHYvMTApICogMTApIC0gMTA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICByZXR1cm4gKE1hdGguZmxvb3Iodi8xMCkgKiAxMCkgKyAxMDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAubmljZSg1LCAxMCksXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gLy8gYXhpcyBmdW5jdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgeEF4aXMgPSBkMy5zdmcuYXhpcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2NhbGUoeClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vcmllbnQoXCJib3R0b21cIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aWNrcyhkMy50aW1lLnllYXIsIDEpLFxuICAgICAgICAgICAgICAgICAgICB5QXhpcyA9IGQzLnN2Zy5heGlzKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zY2FsZSh5KVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9yaWVudChcImxlZnRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5pbm5lclRpY2tTaXplKC13aWR0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aWNrUGFkZGluZygxMClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aWNrRm9ybWF0KGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDMuZm9ybWF0KFwiZlwiKSh0KSArIFwiJVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gLy8gbGluZSBjaGFydGluZyBmdW5jdGlvblxuICAgICAgICAgICAgICAgICAgICBsaW5lID0gZDMuc3ZnLmxpbmUoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLngoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB4KGQuWWVhcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC55KGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geShkLlZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLFxuXG4gICAgICAgICAgICAgICAgICAgIC8vIC8vIHNsdWcgZnVuY3Rpb24gZm9yIGNsYXNzaW5nIGFuZCBoaWdobGlnaHRpbmdcbiAgICAgICAgICAgICAgICAgICAgLy8gc2x1Z2dpZnkgPSBmdW5jdGlvbih0ZXh0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vICAgICByZXR1cm4gdGV4dC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1xccy9nLCBcIl9cIik7XG4gICAgICAgICAgICAgICAgICAgIC8vIH07XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gcmVzaGFwZSBkYXRhIGZvciBsaW5lc1xuICAgICAgICAgICAgICAgICAgICBkYXRhID0gbGluZUtleXMubWFwKGZ1bmN0aW9uKGspIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJLZXlcIiA6IGssXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVmFsdWVzIDogbG9kYXNoLm1hcChkYXRhLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1wiWWVhclwiIDogdGltZUZvcm1hdC5wYXJzZShkLlllYXIpLCBcIlZhbHVlXCIgOiArZFtrXX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgICAgICAvLyAvLyB0ZXN0IG91dHB1dCBmb3IgdHJvdWJsZXNob290aW5nIHRoZSBkYXRhIHN0dWZmXG4gICAgICAgICAgICAgICAgICAgIC8vIGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoXCJwcmVcIilcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC50ZXh0KEpTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIDQpKVxuICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgY2hhcnQuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwieC1heGlzXCIgOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYXhpc1wiIDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKDAsIFwiICsgaGVpZ2h0ICsgXCIpXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2FsbCh4QXhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgY2hhcnQuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwieS1heGlzXCIgOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYXhpc1wiIDogdHJ1ZVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKC0xMiwgMClcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYWxsKHlBeGlzKTtcblxuICAgICAgICAgICAgICAgICAgICBjaGFydC5zZWxlY3RBbGwoXCJnLnRpbWVzZXJpZXMtbGluZXNcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kYXRhKGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZChcInRpbWVzZXJpZXMtbGluZXNcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKFwicGF0aFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZChcInRpbWVzZXJpZXMtcGF0aFwiLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcImRcIiwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxpbmUoZC5WYWx1ZXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY29sb3JzKGQuS2V5KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHBvaW50RGF0YSA9IGRhdGEubWFwKGZ1bmN0aW9uKGQsIGRpLCBkYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuVmFsdWVzLm1hcChmdW5jdGlvbih2LCB2aSwgdmEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2LktleSA9IGQuS2V5O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2O1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIHBvaW50RGF0YSA9IGxvZGFzaC5mbGF0dGVuKHBvaW50RGF0YSk7XG5cbiAgICAgICAgICAgICAgICAgICAgY2hhcnQuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJ0aW1lc2VyaWVzLXBvaW50c1wiLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNlbGVjdEFsbChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kYXRhKHBvaW50RGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInN0cm9rZVwiLCBmdW5jdGlvbihkLCBpKSB7cmV0dXJuIGNvbG9ycyhkLktleSk7IH0gKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiZFwiLCBkMy5zdmcuc3ltYm9sKCkudHlwZShcImNpcmNsZVwiKS5zaXplKDY1KSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiBcInRyYW5zbGF0ZShcIiArIHgoZC5ZZWFyKSArIFwiLCBcIiArIHkoZC5WYWx1ZSkgK1wiKVwiO30pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uKFwibW91c2VvdmVyXCIsIHRpcC5zaG93KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vbihcIm1vdXNlb3V0XCIsIHRpcC5oaWRlKTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aW1lc2VyaWVzU2VydmljZTtcbn1dKVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignQWJvdXRQYWdlQ29udHJvbGxlcicsXG4gICAgWyckc2NvcGUnLCAnJGh0dHAnLCAnJGxvZycsICckbG9jYXRpb24nLC8qICckYW5jaG9yU2Nyb2xsJywgJyRyb290U2NvcGUnLCovICckcm91dGVQYXJhbXMnLCAnc2lkZWJhckRpc3BsYXknLCAnY29udHJpYnV0b3JzJyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkbG9nLCAkbG9jYXRpb24sLyogJGFuY2hvclNjcm9sbCwgJHJvb3RTY29wZSwqLyAkcm91dGVQYXJhbXMsIHNpZGViYXJEaXNwbGF5LCBjb250cmlidXRvcnMpe1xuICAgICAgICAkc2NvcGUudG9nZ2xlID0gc2lkZWJhckRpc3BsYXkudG9nZ2xlO1xuXG4gICAgICAgIHZhciBjb250cmlidXRvclByb21pc2UgPSBjb250cmlidXRvcnMuZ2V0Q29udHJpYnV0b3JzKFwiYWxsXCIpO1xuICAgICAgICBjb250cmlidXRvclByb21pc2UudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICRzY29wZS5jb250cmlidXRvcnMgPSBjb250cmlidXRvcnMubGlzdDtcbiAgICAgICAgfSwgZnVuY3Rpb24ocmVqZWN0aW9uKSB7XG4gICAgICAgICAgICBhbGVydChcInByb21pc2UgcmVqZWN0ZWQhXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUuJG9uKCckdmlld0NvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgJHNjb3BlLnRvZ2dsZS5vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICBzaWRlYmFyRGlzcGxheS5zZWN0aW9uID0gJ0ludHJvZHVjdGlvbic7XG4gICAgICAgICAgICAkc2NvcGUubmV4dFNlY3Rpb24gPSAnQ2l2aWMgRW5nYWdlbWVudCc7XG4gICAgICAgICAgICAkc2NvcGUubmV4dFNlY3Rpb25UZWFzZXIgPSAnUGFydGljaXBhdGlvbiBpbiBjb21tdW5pdHkgbGlmZSB0aHJvdWdoIGRpZmZlcmVudCBjaXZpYyBwYXRod2F5cyBcXHAnICtcbiAgICAgICAgICAgICAgICAncm92aWRlcyBvcHBvcnR1bml0aWVzIGZvciBldmVyeWRheSBjaXZpYyBjb250cmlidXRpb25zLCBhbGxvd2luZyBpbmRpdmlkdWFscyB0byBmaW5kIHBlcnNvbmFsICcgK1xuICAgICAgICAgICAgICAgICdlbnJpY2htZW50IHdoaWxlIGFkZHJlc3NpbmcgbG9jYWwgaXNzdWVzLic7XG4gICAgICAgICAgICAkc2NvcGUubmV4dFNlY3Rpb25VUkwgPSAnIy9jaXZpYy1lbmdhZ2VtZW50JztcbiAgICAgICAgICAgICRzY29wZS5yZXBvcnQyMDExVVJMID0gJ3BkZnMvMjAxMSBDb25uZWN0aWN1dCBDaXZpYyBIZWFsdGggSW5kZXggUmVwb3J0LnBkZic7XG4gICAgICAgICAgICAkc2NvcGUucmVwb3J0MjAxNlVSTCA9ICdwZGZzLzIwMTYgQ29ubmVjdGljdXQgQ2l2aWMgSGVhbHRoIEluZGV4IFJlcG9ydC5wZGYnXG4gICAgICAgIH0pO1xuXG4gICAgICAgICQoJyNjaXRhdGlvbicpLnRvb2x0aXAoJ3Nob3cnKTtcblxufV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdDbG9zZXJMb29rUGFnZUNvbnRyb2xsZXInLFxuICAgIFsnJHNjb3BlJywgJyRodHRwJywgJyRsb2cnLCAnJGxvY2F0aW9uJywgJ3NpZGViYXJEaXNwbGF5JyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkbG9nLCAkbG9jYXRpb24sIHNpZGViYXJEaXNwbGF5KXtcbiAgICAgICAgJHNjb3BlLnRvZ2dsZSA9IHNpZGViYXJEaXNwbGF5LnRvZ2dsZTtcblxuICAgICAgICAkc2NvcGUuJG9uKCckdmlld0NvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgJHNjb3BlLnRvZ2dsZS5vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICBzaWRlYmFyRGlzcGxheS5zZWN0aW9uID0gJ0EgQ2xvc2VyIExvb2snO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uID0gJ0NvbmNsdXNpb25zJztcbiAgICAgICAgICAgICRzY29wZS5uZXh0U2VjdGlvblRlYXNlciA9IFwiQXMgdGhpcyByZXBvcnQgaGFzIHNob3duLCB0aGVyZSBhcmUgbWFueSBlZmZvcnRzIHVuZGVyd2F5IHRvIGltcHJvdmUgdGhlIGNpdmljXCIgK1xuICAgICAgICAgICAgICAgIFwiaGVhbHRoIG9mIG91ciBzdGF0ZS4gQnV0IGV2ZW4gd2l0aCBpbXBvcnRhbnQgcHJvZ3Jlc3MsIHVyZ2VudCBjaGFsbGVuZ2VzIHJlbWFpbi5cIjtcbiAgICAgICAgICAgICRzY29wZS5uZXh0U2VjdGlvblVSTCA9ICcjL2NvbmNsdXNpb25zJztcbiAgICAgICAgfSk7XG5cbn1dKVxuXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdDb2hlc2lvblBhZ2VDb250cm9sbGVyJyxcbiAgICBbJyRzY29wZScsICckaHR0cCcsICckbG9nJywgJyRsb2NhdGlvbicsICdzaWRlYmFyRGlzcGxheScsXG4gICAgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJGxvZywgJGxvY2F0aW9uLCBzaWRlYmFyRGlzcGxheSl7XG4gICAgICAgICRzY29wZS50b2dnbGUgPSBzaWRlYmFyRGlzcGxheS50b2dnbGU7XG5cbiAgICAgICAgJHNjb3BlLiRvbignJHZpZXdDb250ZW50TG9hZGVkJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICRzY29wZS50b2dnbGUub3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgc2lkZWJhckRpc3BsYXkuc2VjdGlvbiA9ICdTb2NpYWwgTmV0d29ya3MgYW5kIENvbW11bml0eSBDb2hlc2lvbic7XG4gICAgICAgICAgICAkc2NvcGUubmV4dFNlY3Rpb24gPSAnSW5zdGl0dXRpb25hbCBQcmVzZW5jZSc7XG4gICAgICAgICAgICAkc2NvcGUubmV4dFNlY3Rpb25UZWFzZXIgPSBcIkluc3RpdHV0aW9ucyDigJQgZ292ZXJubWVudCwgbmV3cyBtZWRpYSwgY29ycG9yYXRpb25zLCBob3NwaXRhbHMsIGFuZCBzY2hvb2xzIOKAlCBcIiArXG4gICAgICAgICAgICAgICAgXCJhcmUgdGhlIGZvdW5kYXRpb24gb2Ygb3VyIHNvY2lldHkuXCI7XG4gICAgICAgICAgICAkc2NvcGUubmV4dFNlY3Rpb25VUkwgPSAnIy9pbnN0aXR1dGlvbmFsLXByZXNlbmNlJztcbiAgICAgICAgfSk7XG59XSlcblxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignQ29uY2x1c2lvbnNQYWdlQ29udHJvbGxlcicsXG4gICAgWyckc2NvcGUnLCAnJGh0dHAnLCAnJGxvZycsICckbG9jYXRpb24nLCAnc2lkZWJhckRpc3BsYXknLFxuICAgIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICRsb2csICRsb2NhdGlvbiwgc2lkZWJhckRpc3BsYXkpe1xuICAgICAgICAkc2NvcGUudG9nZ2xlID0gc2lkZWJhckRpc3BsYXkudG9nZ2xlO1xuXG4gICAgICAgICRzY29wZS4kb24oJyR2aWV3Q29udGVudExvYWRlZCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAkc2NvcGUudG9nZ2xlLm9wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIHNpZGViYXJEaXNwbGF5LnNlY3Rpb24gPSAnQ29uY2x1c2lvbnMnO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uID0gJ1BhcnRuZXJzJztcbiAgICAgICAgICAgIC8vJHNjb3BlLm5leHRTZWN0aW9uVGVhc2VyID0gXCJBIGRlZXBlciBhbmFseXNpcyByZXZlYWxzIG5vdGFibGUgZGlmZmVyZW5jZXMgaW4gY2l2aWMgZW5nYWdlbWVudCBiYXNlZCBvbiBcIiArXG4gICAgICAgICAgICAvLyAgICBcImRlbW9ncmFwaGljIGNoYXJhY3RlcmlzdGljcywgaW5jbHVkaW5nIGFnZSwgZ2VuZGVyLCBhbmQgcmFjZSBvciBldGhuaWNpdHkuXCI7XG4gICAgICAgICAgICAkc2NvcGUubmV4dFNlY3Rpb25VUkwgPSAnIy9wYXJ0bmVycyc7XG4gICAgICAgIH0pO1xuXG59XSlcblxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignRW5nYWdlbWVudFBhZ2VDb250cm9sbGVyJyxcbiAgICBbJyRzY29wZScsICckaHR0cCcsICckbG9nJywgJyRsb2NhdGlvbicsLyogJyRhbmNob3JTY3JvbGwnLCAnJHJvb3RTY29wZScsICckcm91dGVQYXJhbXMnLCovICdzaWRlYmFyRGlzcGxheScsXG4gICAgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJGxvZywgJGxvY2F0aW9uLC8qICRhbmNob3JTY3JvbGwsICRyb290U2NvcGUsICRyb3V0ZVBhcmFtcywqLyBzaWRlYmFyRGlzcGxheSl7XG4gICAgICAgICRzY29wZS50b2dnbGUgPSBzaWRlYmFyRGlzcGxheS50b2dnbGU7XG5cbiAgICAgICAgJHNjb3BlLiRvbignJHZpZXdDb250ZW50TG9hZGVkJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICRzY29wZS50b2dnbGUub3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgc2lkZWJhckRpc3BsYXkuc2VjdGlvbiA9ICdDaXZpYyBFbmdhZ2VtZW50JztcbiAgICAgICAgICAgICRzY29wZS5uZXh0U2VjdGlvbiA9ICdQb2xpdGljYWwgUGFydGljaXBhdGlvbic7XG4gICAgICAgICAgICAkc2NvcGUubmV4dFNlY3Rpb25UZWFzZXIgPSBcIkEgaGVhbHRoeSBkZW1vY3JhY3kgaXMgYmFzZWQgb24gYSBzdHJvbmcgcmVsYXRpb25zaGlwIGJldHdlZW4gZWxlY3RlZCBvZmZpY2lhbHMgYW5kIHRoZWlyIGNvbnN0aXR1ZW50cy5cIjtcbiAgICAgICAgICAgICRzY29wZS5uZXh0U2VjdGlvblVSTCA9ICcjL3BvbGl0aWNhbC1wYXJ0aWNpcGF0aW9uJztcbiAgICAgICAgfSk7XG5cbn1dKVxuXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdQYXJ0aWNpcGF0aW9uUGFnZUNvbnRyb2xsZXInLFxuICAgIFsnJHNjb3BlJywgJyRodHRwJywgJyRsb2cnLCAnJGxvY2F0aW9uJywgJ3NpZGViYXJEaXNwbGF5JyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkbG9nLCAkbG9jYXRpb24sIHNpZGViYXJEaXNwbGF5KXtcbiAgICAgICAgJHNjb3BlLnRvZ2dsZSA9IHNpZGViYXJEaXNwbGF5LnRvZ2dsZTtcblxuICAgICAgICAkc2NvcGUuJG9uKCckdmlld0NvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgJHNjb3BlLnRvZ2dsZS5vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICBzaWRlYmFyRGlzcGxheS5zZWN0aW9uID0gJ1BvbGl0aWNhbCBQYXJ0aWNpcGF0aW9uJztcbiAgICAgICAgICAgICRzY29wZS5uZXh0U2VjdGlvbiA9ICdDb21tdW5pdHkgQ29oZXNpb24nO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uVGVhc2VyID0gXCJTb2NpYWwgbmV0d29ya3MsIHdob3NlIGdyb3d0aCBpcyBsaW5rZWQgd2l0aCBkZWNyZWFzZWQgbmVpZ2hib3Job29kIGNyaW1lIGFuZCBcIiArXG4gICAgICAgICAgICAgICAgXCJiZXR0ZXIgaW5kaXZpZHVhbCB3ZWxsLWJlaW5nLCBlbnJpY2ggY29tbXVuaXRpZXMgaW4gbWFueSB3YXlzLlwiO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uVVJMID0gJyMvY29tbXVuaXR5LWNvaGVzaW9uJztcbiAgICAgICAgfSk7XG5cbn1dKVxuXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdQYXJ0bmVyc1BhZ2VDb250cm9sbGVyJyxcbiAgICBbJyRzY29wZScsICckaHR0cCcsICckbG9nJywgJyRsb2NhdGlvbicsLyogJyRhbmNob3JTY3JvbGwnLCAnJHJvb3RTY29wZScsKi8gJyRyb3V0ZVBhcmFtcycsICdzaWRlYmFyRGlzcGxheScsICdjb250cmlidXRvcnMnLFxuICAgIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICRsb2csICRsb2NhdGlvbiwvKiAkYW5jaG9yU2Nyb2xsLCAkcm9vdFNjb3BlLCovICRyb3V0ZVBhcmFtcywgc2lkZWJhckRpc3BsYXksIGNvbnRyaWJ1dG9ycyl7XG4gICAgICAgICRzY29wZS50b2dnbGUgPSBzaWRlYmFyRGlzcGxheS50b2dnbGU7XG5cbiAgICAgICAgdmFyIGNvbnRyaWJ1dG9yUHJvbWlzZSA9IGNvbnRyaWJ1dG9ycy5nZXRDb250cmlidXRvcnMoXCJhbGxcIik7XG4gICAgICAgIGNvbnRyaWJ1dG9yUHJvbWlzZS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgJHNjb3BlLmNvbnRyaWJ1dG9ycyA9IGNvbnRyaWJ1dG9ycy5saXN0O1xuICAgICAgICB9LCBmdW5jdGlvbihyZWplY3Rpb24pIHtcbiAgICAgICAgICAgIGFsZXJ0KFwicHJvbWlzZSByZWplY3RlZCFcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS4kb24oJyR2aWV3Q29udGVudExvYWRlZCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAkc2NvcGUudG9nZ2xlLm9wZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIHNpZGViYXJEaXNwbGF5LnNlY3Rpb24gPSAnUGFydG5lcnMnO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uID0gJ1JhdyBEYXRhJztcbiAgICAgICAgICAgICRzY29wZS5uZXh0U2VjdGlvblRlYXNlciA9IFwiXCI7XG4gICAgICAgICAgICAkc2NvcGUubmV4dFNlY3Rpb25VUkwgPSAnIy9yYXctZGF0YSc7XG4gICAgICAgIH0pO1xuXG59XSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0luc3RpdHV0aW9uUGFnZUNvbnRyb2xsZXInLFxuICAgIFsnJHNjb3BlJywgJyRodHRwJywgJyRsb2cnLCAnJGxvY2F0aW9uJywgJ3NpZGViYXJEaXNwbGF5JyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkbG9nLCAkbG9jYXRpb24sIHNpZGViYXJEaXNwbGF5KXtcbiAgICAgICAgJHNjb3BlLnRvZ2dsZSA9IHNpZGViYXJEaXNwbGF5LnRvZ2dsZTtcblxuICAgICAgICAkc2NvcGUuJG9uKCckdmlld0NvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgJHNjb3BlLnRvZ2dsZS5vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICBzaWRlYmFyRGlzcGxheS5zZWN0aW9uID0gJ0luc3RpdHV0aW9uYWwgUHJlc2VuY2UnO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uID0gJ0EgQ2xvc2VyIExvb2snO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uVGVhc2VyID0gXCJBIGRlZXBlciBhbmFseXNpcyByZXZlYWxzIG5vdGFibGUgZGlmZmVyZW5jZXMgaW4gY2l2aWMgZW5nYWdlbWVudCBiYXNlZCBvbiBcIiArXG4gICAgICAgICAgICAgICAgXCJkZW1vZ3JhcGhpYyBjaGFyYWN0ZXJpc3RpY3MsIGluY2x1ZGluZyBhZ2UsIGdlbmRlciwgYW5kIHJhY2Ugb3IgZXRobmljaXR5LlwiO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uVVJMID0gJyMvYS1jbG9zZXItbG9vayc7XG4gICAgICAgIH0pO1xuXG59XSlcblxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnY2F0ZWdvcmllcycsIFsnJGh0dHAnLCAnJHEnLCAnbG9kYXNoJywgZnVuY3Rpb24oJGh0dHAsICRxLCBsb2Rhc2gpIHtcbiAgICB2YXIgY2F0ZWdvcmllcyA9IHt9O1xuICAgIGNhdGVnb3JpZXMubGlzdCA9IFtdO1xuXG4gICAgY2F0ZWdvcmllcy50b2dnbGUgPSBmdW5jdGlvbihjYXRlZ29yeSkge1xuICAgICAgICBwb3NpdGlvbiA9IGxvZGFzaC5maW5kSW5kZXgoY2F0ZWdvcmllcy5saXN0LCBmdW5jdGlvbihsaXN0Y2F0KSB7XG4gICAgICAgICAgICByZXR1cm4gbGlzdGNhdC5uYW1lID09IGNhdGVnb3J5Lm5hbWU7XG4gICAgICAgIH0pO1xuICAgICAgICBjYXRlZ29yaWVzLmxpc3RbcG9zaXRpb25dLnNlbGVjdGVkID0gIWNhdGVnb3JpZXMubGlzdFtwb3NpdGlvbl0uc2VsZWN0ZWQ7XG4gICAgfTtcblxuICAgIGNhdGVnb3JpZXMuZ2V0Q2F0ZWdvcmllcyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoY2F0ZWdvcmllcy5saXN0Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIC8vIGlmIHRoaXMgb2JqZWN0IGFscmVhZHkgaGFzIGRhdGEsIGp1c3QgdXNlIHdoYXQncyBjdXJyZW50bHkgYXZhaWxhYmxlXG4gICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSl7cmVzb2x2ZShjYXRlZ29yaWVzKX0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGdldCBkYXRhIGZyZXNoIGZyb20gZmlsZVxuICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICRodHRwLmdldCgnL3N0YXRpYy9kaXN0L2RhdGEvZGF0YS5qc29uJylcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGxpc3QgPSBsb2Rhc2gubWFwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHNvcnQgY2F0ZWdvcmllcyBieSByYW5rXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9kYXNoLnNvcnRCeShyZXNwb25zZSwgXCJyYW5rXCIpLCBmdW5jdGlvbihvKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZm9yIGVhY2ggaW5kaWNhdG9yIGluIGVhY2ggY2F0ZWdvcnksIHNvcnQgJ2xldmVscycgYnkgYSByYW5rIGFzIHdlbGxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLmRhdGEuZm9yRWFjaChmdW5jdGlvbihpbmRpY2F0b3IsIGlpLCBpYSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLmRhdGFbaWldLmRhdGEgPSBsb2Rhc2guc29ydEJ5QWxsKG8uZGF0YVtpaV0uZGF0YSwgXCJyYW5rXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZXh0ZW5kIGVhY2ggY2F0ZWdvcnkgdG8gaGF2ZSBhIFwic2VsZWN0ZWRcIiB2YWx1ZSwgZGVmYXVsdCB0byB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbyA9IGxvZGFzaC5leHRlbmQoe30sIG8sIHtcInNlbGVjdGVkXCIgOiB0cnVlfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gc2V0IGNhdGVnb3JpZXMubGlzdCB0byBhIHNvcnRlZCBhcnJheVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcmllcy5saXN0ID0gbGlzdDtcblxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZShjYXRlZ29yaWVzKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwiVGhlcmUgd2FzIGFuIGVycm9yIGdldHRpbmcgY2F0ZWdvcmllc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gY2F0ZWdvcmllcztcbn1dKVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnY29udHJpYnV0b3JzJywgWyckaHR0cCcsICckcScsIGZ1bmN0aW9uKCRodHRwLCAkcSkge1xuICAgIHZhciBjb250cmlidXRvcnMgPSB7fTtcbiAgICBjb250cmlidXRvcnMubGlzdCA9IFtdO1xuXG4gICAgY29udHJpYnV0b3JzLmdldENvbnRyaWJ1dG9ycyA9IGZ1bmN0aW9uKCkge1xuICAgICAgICBpZiAoY29udHJpYnV0b3JzLmxpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gaWYgdGhpcyBvYmplY3QgYWxyZWFkeSBoYXMgZGF0YSwganVzdCB1c2Ugd2hhdCdzIGN1cnJlbnRseSBhdmFpbGFibGVcbiAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlKXtyZXNvbHZlKGNvbnRyaWJ1dG9ycyl9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSBnZXQgZGF0YSBmcmVzaCBmcm9tIGZpbGVcbiAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJy9zdGF0aWMvZGlzdC9kYXRhL2NvbnRyaWJ1dG9ycy5qc29uJylcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoZnVuY3Rpb24ocmVzcG9uc2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyaWJ1dG9ycy5saXN0ID0gcmVzcG9uc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGNvbnRyaWJ1dG9ycyk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC5lcnJvcihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChcIlRoZXJlIHdhcyBhbiBlcnJvciBnZXR0aW5nIGNvbnRyaWJ1dG9yc1wiKTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICByZXR1cm4gY29udHJpYnV0b3JzO1xufV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdTaWRlYmFyQ29udHJvbGxlcicsXG4gICAgWyckc2NvcGUnLCAnJGxvZycsJ2xvZGFzaCcsICdjYXRlZ29yaWVzJywgJ2NvbnRyaWJ1dG9ycycsXG4gICAgZnVuY3Rpb24oJHNjb3BlLCAkbG9nLCBsb2Rhc2gsIGNhdGVnb3JpZXMsIGNvbnRyaWJ1dG9ycykge1xuICAgICAgICAvLyAkc2NvcGUuc3RhdHVzID0ge1xuICAgICAgICAvLyAgICAgaXNvcGVuOiBmYWxzZVxuICAgICAgICAvLyB9O1xuXG4gICAgICAgIHZhciBjYXRlZ29yeVByb21pc2UgPSBjYXRlZ29yaWVzLmdldENhdGVnb3JpZXMoKTtcbiAgICAgICAgY2F0ZWdvcnlQcm9taXNlLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAkc2NvcGUuY2F0ZWdvcmllcyA9IGNhdGVnb3JpZXMubGlzdDtcbiAgICAgICAgfSwgZnVuY3Rpb24ocmVqZWN0aW9uKSB7XG4gICAgICAgICAgICBhbGVydChcInByb21pc2UgcmVqZWN0ZWQhXCIpO1xuICAgICAgICB9KVxuXG4gICAgICAgIHZhciBjb250cmlidXRvclByb21pc2UgPSBjb250cmlidXRvcnMuZ2V0Q29udHJpYnV0b3JzKCk7XG4gICAgICAgIGNvbnRyaWJ1dG9yUHJvbWlzZS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgJHNjb3BlLmNvbnRyaWJ1dG9ycyA9IGNvbnRyaWJ1dG9ycy5saXN0O1xuICAgICAgICB9LCBmdW5jdGlvbihyZWplY3Rpb24pIHtcbiAgICAgICAgICAgIGFsZXJ0KFwicHJvbWlzZSByZWplY3RlZCFcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgdGhlIHByZXNlbnRhdGlvbiBvZiB0aGUgc2VsZWN0ZWQgaXRlbXMgaW5cbiAgICAgICAgLy8gdGhlIHNpZGViYXIgYW5kIHByb3BpZ2F0aW5nIHNlbGVjdGlvbnMgdGhyb3VnaCB0aGUgY2F0Z29yaWVzIHNlcnZpY2VcbiAgICAgICAgJHNjb3BlLnVwZGF0ZVNlbGVjdGVkID0gZnVuY3Rpb24oY2F0ZWdvcnkpIHtcbiAgICAgICAgICAgIGNhdGVnb3JpZXMudG9nZ2xlKGNhdGVnb3J5KTtcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuY2hlY2tTZWxlY3RlZCA9IGZ1bmN0aW9uKGJvb2wpIHtcbiAgICAgICAgICAgIGlmIChib29sKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic2VsZWN0ZWRcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiZGVzZWxlY3RlZFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAkc2NvcGUudG9nZ2xlO1xuICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidG9nZ2xlZCB0cmlnZ2VyZWQgZnJvbSBzaWRlYmFyXCIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLnRvZ2dsZSk7XG4gICAgICAgIH0pO1xufV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdzaWRlYmFyRGlzcGxheScsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRvZ2dsZTogeyBvcGVuOiB0cnVlIH0sXG4gICAgICAgIHNlY3Rpb246ICdJbnRyb2R1Y3Rpb24nXG4gICAgfVxufSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5jb250cm9sbGVyKCdXcmFwQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJ3NpZGViYXJEaXNwbGF5JywgZnVuY3Rpb24gKCRzY29wZSwgc2lkZWJhckRpc3BsYXkpIHtcbiAgICAgICAgJHNjb3BlLnRvZ2dsZSA9IHNpZGViYXJEaXNwbGF5LnRvZ2dsZTtcbiAgICAgICAgJHNjb3BlLnNlY3Rpb24gPSBzaWRlYmFyRGlzcGxheS5zZWN0aW9uO1xuXG4gICAgICAgICRzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzaWRlYmFyRGlzcGxheS5zZWN0aW9uO1xuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAkc2NvcGUuc2VjdGlvbiA9IHNpZGViYXJEaXNwbGF5LnNlY3Rpb247XG4gICAgICAgIH0pO1xuICAgIH1dKVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
