var app=angular.module("app",["ngAnimate","ui.bootstrap","ngLodash","ngRoute"]);angular.module("app").config(["$routeProvider","$locationProvider",function(t,e){t.when("/data",{templateUrl:"static/dist/templates/data.html",controller:"DataVizController"}).when("/about",{templateUrl:"static/dist/templates/about.html",controller:"AboutPageController"}).otherwise({redirectTo:"/data"})}]),angular.module("app").filter("suppressions",function(){return function(t){return"-9,999.0"===t||"-9999"===t?"NA":"-666,666.0"===t||"-666666"===t?" * ":t}}).filter("percent",function(){return function(t){return parseInt(t)>0?t+"%":t}}).filter("sluggify",function(){return function(t){return t.toLowerCase().replace(/[^a-zA-Z0-9_]/g,"_")}}).filter("safe",["$sce",function(t){return function(e){return t.trustAsHtml(e.toString())}}]),angular.module("app").controller("AboutPageController",["$scope","$http","$log","$location","sidebarDisplay","contributors",function(t,e,o,n,r,i){t.toggle=r.toggle,console.log(t.toggle);var l=i.getContributors("all");l.then(function(e){t.contributors=i.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!1})}]),angular.module("app").controller("DataVizController",["$scope","$http","$log","$location","$filter","sidebarDisplay","categories","lodash",function(t,e,o,n,r,i,l,a){t.toggle=i.toggle,t.aboutCollapsed=!1,t.toggleChart=function(t){t=r("sluggify")(t),$("#"+t).toggle()};var c=l.getCategories("all");c.then(function(e){t.categories=l.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!0})}]),angular.module("app").directive("simpletable",function(){var t=tableChart();return{restrict:"E",scope:{data:"=data"},link:function(e,o,n){e.$watchCollection("data",function(e){d3.select(o[0]).datum(e).call(t)})}}}),angular.module("app").directive("timeseries",["$window",function(t){var e=timeSeries();return{restrict:"E",scope:{data:"=data"},link:function(o,n,r){o.render=function(){data={data:o.data,config:{width:.4*n.parent()[0].getBoundingClientRect().width}},d3.select(n[0]).datum(data).call(e)},o.$watchCollection("data",function(t){o.render()}),t.onresize=function(){o.render()}}}}]),angular.module("app").service("categories",["$http","$q","lodash",function(t,e,o){var n={};return n.list=[],n.toggle=function(t){position=o.findIndex(n.list,function(e){return e.name==t.name}),n.list[position].selected=!n.list[position].selected},n.getCategories=function(){return e(n.list.length>0?function(t){t(n)}:function(e,r){t.get("/static/dist/data/data.json").success(function(t){n.list=o.map(o.sortBy(t,"rank"),function(t){return o.extend({},t,{selected:!0})}),n.list,e(n)}).error(function(){r("There was an error getting categories")})})},n}]),angular.module("app").service("contributors",["$http","$q",function(t,e){var o={};return o.list=[],o.getContributors=function(){return e(o.list.length>0?function(t){t(o)}:function(e,n){t.get("/static/dist/data/contributors.json").success(function(t){o.list=t,e(o)}).error(function(){n("There was an error getting contributors")})})},o}]),angular.module("app").controller("SidebarController",["$scope","$log","lodash","categories","contributors",function(t,e,o,n,r){var i=n.getCategories();i.then(function(e){t.categories=n.list},function(t){alert("promise rejected!")});var l=r.getContributors();l.then(function(e){t.contributors=r.list},function(t){alert("promise rejected!")}),t.updateSelected=function(t){n.toggle(t),console.log(o.pluck(n.list,"selected"))},t.checkSelected=function(t){return t?"selected":"deselected"},t.$watchCollection(function(){return t.toggle},function(){console.log("toggled triggered from sidebar"),console.log(t.toggle)})}]),angular.module("app").service("sidebarDisplay",function(){return{toggle:{open:!0}}}),angular.module("app").controller("WrapController",["$scope","sidebarDisplay",function(t,e){t.toggle=e.toggle,t.$watchCollection(function(){return t.toggle},function(){console.log("toggled triggered from wrap"),console.log(t.toggle)})}]);
//# sourceMappingURL=data:application/json;base64,
