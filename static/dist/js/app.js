var app=angular.module("app",["ngAnimate","ui.bootstrap","ngLodash","ngRoute"]);angular.module("app").config(["$routeProvider","$locationProvider",function(t,e){t.when("/data",{templateUrl:"static/dist/templates/data.html",controller:"DataVizController"}).when("/about",{templateUrl:"static/dist/templates/about.html",controller:"AboutPageController"}).otherwise({redirectTo:"/data"})}]),angular.module("app").filter("suppressions",function(){return function(t){return"-9999"===t?"NA":"-666666"===t?" &mdash; ":t}}).filter("sluggify",function(){return function(t){return t.toLowerCase().replace(/[^a-zA-Z0-9_]/g,"_")}}).filter("safe",["$sce",function(t){return t.trustAsHtml}]),angular.module("app").controller("AboutPageController",["$scope","$http","$log","$location","$anchorScroll","$rootScope","$routeParams","sidebarDisplay","contributors",function(t,e,o,n,r,l,a,i,c){t.toggle=i.toggle,console.log(t.toggle);var s=c.getContributors("all");s.then(function(e){t.contributors=c.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!1})}]),angular.module("app").controller("DataVizController",["$scope","$http","$log","$location","$anchorScroll","$rootScope","$routeParams","sidebarDisplay","categories","lodash",function(t,e,o,n,r,l,a,i,c,s){t.toggle=i.toggle;var u=c.getCategories("all");u.then(function(e){t.categories=c.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!0})}]),angular.module("app").directive("simpletable",function(){var t=tableChart();return{restrict:"E",scope:{data:"=data"},link:function(e,o,n){e.$watchCollection("data",function(e){d3.select(o[0]).datum(e).call(t)})}}}),angular.module("app").service("categories",["$http","$q","lodash",function(t,e,o){var n={};return n.list=[],n.toggle=function(t){position=o.findIndex(n.list,function(e){return e.name==t.name}),n.list[position].selected=!n.list[position].selected},n.getCategories=function(){return e(n.list.length>0?function(t){t(n)}:function(e,r){t.get("/static/dist/data/data.json").success(function(t){n.list=o.map(o.sortBy(t,"rank"),function(t){return o.extend({},t,{selected:!0})}),n.list,e(n)}).error(function(){r("There was an error getting categories")})})},n}]),angular.module("app").service("contributors",["$http","$q",function(t,e){var o={};return o.list=[],o.getContributors=function(){return e(o.list.length>0?function(t){t(o)}:function(e,n){t.get("/static/dist/data/contributors.json").success(function(t){o.list=t,e(o)}).error(function(){n("There was an error getting contributors")})})},o}]),angular.module("app").controller("SidebarController",["$scope","$log","lodash","categories","contributors",function(t,e,o,n,r){var l=n.getCategories();l.then(function(e){t.categories=n.list},function(t){alert("promise rejected!")});var a=r.getContributors();a.then(function(e){t.contributors=r.list},function(t){alert("promise rejected!")}),t.updateSelected=function(t){n.toggle(t),console.log(o.pluck(n.list,"selected"))},t.checkSelected=function(t){return t?"selected":"deselected"},t.$watchCollection(function(){return t.toggle},function(){console.log("toggled triggered from sidebar"),console.log(t.toggle)})}]),angular.module("app").service("sidebarDisplay",function(){return{toggle:{open:!0}}}),angular.module("app").controller("WrapController",["$scope","sidebarDisplay",function(t,e){t.toggle=e.toggle,t.$watchCollection(function(){return t.toggle},function(){console.log("toggled triggered from wrap"),console.log(t.toggle)})}]);
//# sourceMappingURL=data:application/json;base64,
