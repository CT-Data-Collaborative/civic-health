var app=angular.module("app",["ngAnimate","ui.bootstrap","ngLodash","ngRoute"]);angular.module("app").config(["$routeProvider","$locationProvider",function(t,e){t.when("/data",{templateUrl:"static/dist/templates/data.html",controller:"DataVizController"}).when("/about",{templateUrl:"static/dist/templates/about.html",controller:"AboutPageController"}).otherwise({redirectTo:"/data"})}]),angular.module("app").filter("suppressions",function(){return function(t){return"-9999"===t?"NA":"-666666"===t?" &mdash; ":t}}).filter("sluggify",function(){return function(t){return t.toLowerCase().replace(/[^a-zA-Z0-9_]/g,"_")}}).filter("safe",["$sce",function(t){return t.trustAsHtml}]),angular.module("app").controller("DataVizController",["$scope","$http","$log","sidebarDisplay","categories","lodash",function(t,e,o,n,r,l){t.toggle=n.toggle;var i=r.getCategories("all");i.then(function(e){t.categories=r.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.toggled=!1})}]),angular.module("app").directive("simpletable",function(){var t=tableChart();return{restrict:"E",scope:{data:"=data"},link:function(e,o,n){e.$watchCollection("data",function(e){d3.select(o[0]).datum(e).call(t)})}}}),angular.module("app").controller("AboutPageController",["$scope","$http","$log","sidebarDisplay","contributors",function(t,e,o,n,r){t.toggle=n.toggle,console.log(t.toggle);var l=r.getContributors("all");l.then(function(e){t.contributors=r.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!0})}]),angular.module("app").service("categories",["$http","$q","lodash",function(t,e,o){var n={};return n.list=[],n.toggle=function(t){position=o.findIndex(n.list,function(e){return e.name==t.name}),n.list[position].selected=!n.list[position].selected},n.getCategories=function(){return e(n.list.length>0?function(t){t(n)}:function(e,r){t.get("/static/dist/data/data.json").success(function(t){n.list=o.map(o.sortBy(t,"rank"),function(t){return o.extend({},t,{selected:!0})}),n.list,e(n)}).error(function(){r("There was an error getting categories")})})},n}]),angular.module("app").service("contributors",["$http","$q",function(t,e){var o={};return o.list=[],o.getContributors=function(){return e(o.list.length>0?function(t){t(o)}:function(e,n){t.get("/static/dist/data/contributors.json").success(function(t){o.list=t,e(o)}).error(function(){n("There was an error getting contributors")})})},o}]),angular.module("app").controller("SidebarController",["$scope","$log","lodash","categories","contributors",function(t,e,o,n,r){var l=n.getCategories();l.then(function(e){t.categories=n.list},function(t){alert("promise rejected!")});var i=r.getContributors();i.then(function(e){t.contributors=r.list},function(t){alert("promise rejected!")}),t.updateSelected=function(t){n.toggle(t),console.log(o.pluck(n.list,"selected"))},t.checkSelected=function(t){return t?"selected":"deselected"},t.$watchCollection(function(){return t.toggle},function(){console.log("toggled triggered from sidebar"),console.log(t.toggle)})}]),angular.module("app").service("sidebarDisplay",function(){return{toggle:{open:!0}}}),angular.module("app").controller("WrapController",["$scope","sidebarDisplay",function(t,e){t.toggle=e.toggle,t.$watchCollection(function(){return t.toggle},function(){console.log("toggled triggered from wrap"),console.log(t.toggle)})}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsInJvdXRlcy5qcyIsImZpbHRlcnMuanMiLCJkYXRhdml6L2RhdGF2aXouY29udHJvbGxlci5qcyIsImRhdGF2aXovc2ltcGxldGFibGUuZGlyZWN0aXZlLmpzIiwiYWJvdXRwYWdlL2Fib3V0cGFnZS5jb250cm9sbGVyLmpzIiwic2lkZWJhci9jYXRlZ29yaWVzLnNlcnZpY2UuanMiLCJzaWRlYmFyL2NvbnRyaWJ1dG9ycy5zZXJ2aWNlLmpzIiwic2lkZWJhci9zaWRlYmFyLmNvbnRyb2xsZXIuanMiLCJzaWRlYmFyL3NpZGViYXJkaXNwbGF5LnNlcnZpY2UuanMiLCJzaWRlYmFyL3dyYXAuY29udHJvbGxlci5qcyJdLCJuYW1lcyI6WyJhcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCIkbG9jYXRpb25Qcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJvdGhlcndpc2UiLCJyZWRpcmVjdFRvIiwiZmlsdGVyIiwiaW5wdXQiLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCIkc2NlIiwidHJ1c3RBc0h0bWwiLCIkc2NvcGUiLCIkaHR0cCIsIiRsb2ciLCJzaWRlYmFyRGlzcGxheSIsImNhdGVnb3JpZXMiLCJsb2Rhc2giLCJ0b2dnbGUiLCJwcm9taXNlIiwiZ2V0Q2F0ZWdvcmllcyIsInRoZW4iLCJyZXN1bHQiLCJsaXN0IiwicmVqZWN0aW9uIiwiYWxlcnQiLCIkb24iLCJldmVudCIsInRvZ2dsZWQiLCJkaXJlY3RpdmUiLCJjaGFydCIsInRhYmxlQ2hhcnQiLCJyZXN0cmljdCIsInNjb3BlIiwiZGF0YSIsImxpbmsiLCJlbGVtZW50IiwiYXR0cnMiLCIkd2F0Y2hDb2xsZWN0aW9uIiwiZDMiLCJzZWxlY3QiLCJkYXR1bSIsImNhbGwiLCJjb250cmlidXRvcnMiLCJjb25zb2xlIiwibG9nIiwiY29udHJpYnV0b3JQcm9taXNlIiwiZ2V0Q29udHJpYnV0b3JzIiwib3BlbiIsInNlcnZpY2UiLCIkcSIsImNhdGVnb3J5IiwicG9zaXRpb24iLCJmaW5kSW5kZXgiLCJsaXN0Y2F0IiwibmFtZSIsInNlbGVjdGVkIiwibGVuZ3RoIiwicmVzb2x2ZSIsInJlamVjdCIsImdldCIsInN1Y2Nlc3MiLCJyZXNwb25zZSIsIm1hcCIsInNvcnRCeSIsIm8iLCJleHRlbmQiLCJlcnJvciIsImNhdGVnb3J5UHJvbWlzZSIsInVwZGF0ZVNlbGVjdGVkIiwicGx1Y2siLCJjaGVja1NlbGVjdGVkIiwiYm9vbCJdLCJtYXBwaW5ncyI6IkFBQUEsR0FBQUEsS0FBQUMsUUFBQUMsT0FBQSxPQUNBLFlBQ0EsZUFDQSxXQUNBLFdDSkFELFNBQUFDLE9BQUEsT0FDQUMsUUFBQSxpQkFBQSxvQkFBQSxTQUFBQyxFQUFBQyxHQUNBRCxFQUNBRSxLQUFBLFNBQ0FDLFlBQUEsa0NBQ0FDLFdBQUEsc0JBRUFGLEtBQUEsVUFDQUMsWUFBQSxtQ0FDQUMsV0FBQSx3QkFFQUMsV0FDQUMsV0FBQSxhQ1pBVCxRQUFBQyxPQUFBLE9BQ0FTLE9BQUEsZUFBQSxXQUNBLE1BQUEsVUFBQUMsR0FDQSxNQUFBLFVBQUFBLEVBQ0EsS0FDQSxZQUFBQSxFQUNBLFlBRUFBLEtBSUFELE9BQUEsV0FBQSxXQUNBLE1BQUEsVUFBQUMsR0FDQSxNQUFBQSxHQUFBQyxjQUFBQyxRQUFBLGlCQUFBLFFBR0FILE9BQUEsUUFBQSxPQUFBLFNBQUFJLEdBQ0EsTUFBQUEsR0FBQUMsZUNsQkFmLFFBQUFDLE9BQUEsT0FDQU0sV0FBQSxxQkFDQSxTQUFBLFFBQUEsT0FBQSxpQkFBQSxhQUFBLFNBQ0EsU0FBQVMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FFQUwsRUFBQU0sT0FBQUgsRUFBQUcsTUFFQSxJQUFBQyxHQUFBSCxFQUFBSSxjQUFBLE1BQ0FELEdBQUFFLEtBQUEsU0FBQUMsR0FDQVYsRUFBQUksV0FBQUEsRUFBQU8sTUFDQSxTQUFBQyxHQUNBQyxNQUFBLHVCQUdBYixFQUFBYyxJQUFBLHFCQUFBLFNBQUFDLEdB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QUNBLFdBQ0EwQixRQUFBQyxJQUFBLGtDQUNBRCxRQUFBQyxJQUFBakMsRUFBQU0sYUN4Q0F0QixRQUFBQyxPQUFBLE9BQ0FvRCxRQUFBLGlCQUFBLFdBQ0EsT0FDQS9CLFFBQUE4QixNQUFBLE1DSEFwRCxRQUFBQyxPQUFBLE9BQ0FNLFdBQUEsa0JBQUEsU0FBQSxpQkFBQSxTQUFBUyxFQUFBRyxHQUNBSCxFQUFBTSxPQUFBSCxFQUFBRyxPQUVBTixFQUFBMEIsaUJBQUEsV0FDQSxNQUFBMUIsR0FBQU0sUUFDQSxXQUNBMEIsUUFBQUMsSUFBQSwrQkFDQUQsUUFBQUMsSUFBQWpDLEVBQUFNIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJywgW1xuICAgICduZ0FuaW1hdGUnLFxuICAgICd1aS5ib290c3RyYXAnLFxuICAgICduZ0xvZGFzaCcsXG4gICAgJ25nUm91dGUnXG4gICAgXSk7XG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb25maWcoZnVuY3Rpb24oJHJvdXRlUHJvdmlkZXIsICRsb2NhdGlvblByb3ZpZGVyKSB7XG4gICAgJHJvdXRlUHJvdmlkZXJcbiAgICAgICAgLndoZW4oJy9kYXRhJywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdGF0aWMvZGlzdC90ZW1wbGF0ZXMvZGF0YS5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdEYXRhVml6Q29udHJvbGxlcidcbiAgICAgICAgfSlcbiAgICAgICAgLndoZW4oJy9hYm91dCcsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3RhdGljL2Rpc3QvdGVtcGxhdGVzL2Fib3V0Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0Fib3V0UGFnZUNvbnRyb2xsZXInXG4gICAgICAgIH0pXG4gICAgICAgIC5vdGhlcndpc2Uoe1xuICAgICAgICAgICAgcmVkaXJlY3RUbzogJy9kYXRhJ1xuICAgICAgICB9KTtcbn0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uZmlsdGVyKCdzdXBwcmVzc2lvbnMnLCBmdW5jdGlvbigpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgaWYgKGlucHV0ID09PSAnLTk5OTknKSB7XG4gICAgICAgIHJldHVybiAnTkEnO1xuICAgIH0gZWxzZSBpZiAoaW5wdXQgPT09ICctNjY2NjY2Jykge1xuICAgICAgICByZXR1cm4gJyAmbWRhc2g7ICc7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgfTtcbn0pXG4uZmlsdGVyKCdzbHVnZ2lmeScsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBmdW5jdGlvbihpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bXmEtekEtWjAtOV9dL2csIFwiX1wiKVxuICAgIH07XG59KVxuLmZpbHRlcignc2FmZScsIGZ1bmN0aW9uKCRzY2UpIHtcbiAgICByZXR1cm4gJHNjZS50cnVzdEFzSHRtbDtcbn0pOyIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0RhdGFWaXpDb250cm9sbGVyJyxcbiAgICBbJyRzY29wZScsICckaHR0cCcsICckbG9nJywgJ3NpZGViYXJEaXNwbGF5JywgJ2NhdGVnb3JpZXMnLCAnbG9kYXNoJyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkbG9nLCBzaWRlYmFyRGlzcGxheSwgY2F0ZWdvcmllcywgbG9kYXNoKXtcbiAgICAgICAgdmFyIGxvID0gbG9kYXNoO1xuICAgICAgICAkc2NvcGUudG9nZ2xlID0gc2lkZWJhckRpc3BsYXkudG9nZ2xlO1xuXG4gICAgICAgIHZhciBwcm9taXNlID0gY2F0ZWdvcmllcy5nZXRDYXRlZ29yaWVzKFwiYWxsXCIpO1xuICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAkc2NvcGUuY2F0ZWdvcmllcyA9IGNhdGVnb3JpZXMubGlzdDtcbiAgICAgICAgfSwgZnVuY3Rpb24ocmVqZWN0aW9uKSB7XG4gICAgICAgICAgICBhbGVydChcInByb21pc2UgcmVqZWN0ZWQhXCIpO1xuICAgICAgICB9KVxuXG4gICAgICAgICAkc2NvcGUuJG9uKCckdmlld0NvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgJHNjb3BlLnRvZ2dsZS50b2dnbGVkID0gZmFsc2U7XG4gICAgICAgIH0pO1xufV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5kaXJlY3RpdmUoJ3NpbXBsZXRhYmxlJywgZnVuY3Rpb24oKSB7XG4gICAgLy8gVGhpcyBmdW5jdGlvbiBzaG91bGQgcmVmbGVjdCB3aGF0ZXZlciB5b3VyIGQzIHRhYmxlIGZ1bmN0aW9uIGlzIGNhbGxlZC5cbiAgICB2YXIgY2hhcnQgPSB0YWJsZUNoYXJ0KCk7XG4gICAgcmV0dXJuICB7XG4gICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICBkYXRhOiBcIj1kYXRhXCIgLy8gV2UgY2FuIGNhbGwgdGhpcyB3L2Ugd2Ugd2FudC5cbiAgICAgICAgfSxcbiAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgICAgICBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKCdkYXRhJywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIGQzLnNlbGVjdChlbGVtZW50WzBdKS5kYXR1bShkYXRhKS5jYWxsKGNoYXJ0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0Fib3V0UGFnZUNvbnRyb2xsZXInLFxuICAgIFsnJHNjb3BlJywgJyRodHRwJywgJyRsb2cnLCAnc2lkZWJhckRpc3BsYXknLCAnY29udHJpYnV0b3JzJyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkbG9nLCBzaWRlYmFyRGlzcGxheSwgY29udHJpYnV0b3JzKXtcbiAgICAgICAgJHNjb3BlLnRvZ2dsZSA9IHNpZGViYXJEaXNwbGF5LnRvZ2dsZTtcbiAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLnRvZ2dsZSk7XG5cbiAgICAgICAgdmFyIGNvbnRyaWJ1dG9yUHJvbWlzZSA9IGNvbnRyaWJ1dG9ycy5nZXRDb250cmlidXRvcnMoXCJhbGxcIik7XG4gICAgICAgIGNvbnRyaWJ1dG9yUHJvbWlzZS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgJHNjb3BlLmNvbnRyaWJ1dG9ycyA9IGNvbnRyaWJ1dG9ycy5saXN0O1xuICAgICAgICB9LCBmdW5jdGlvbihyZWplY3Rpb24pIHtcbiAgICAgICAgICAgIGFsZXJ0KFwicHJvbWlzZSByZWplY3RlZCFcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS4kb24oJyR2aWV3Q29udGVudExvYWRlZCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAvLyBJIG1hZGUgY2hhbmdlcyB0byB0aGUgc2lkZWJhciBkaXNwbGF5IHNlcnZpY2UsIHJlbmFtaW5nIHRoZSBpbnRlcm5hbFxuICAgICAgICAgICAgLy8gc2V0dGluZyB0byBiZSBcIm9wZW5cIiwgd2hpY2ggbWFrZXMgaXQgZWFzaWVyIHRvIGludGVycHJldCB0aGlzLiBJIG1hZGVcbiAgICAgICAgICAgIC8vIGNvcnJlc3BvbmRpbmcgY2hhbmdlcyBpbiB0aGUgYWJvdXQgYW5kIGRhdGEgdGVtcGxhdGVzLlxuICAgICAgICAgICAgLy8gVGhpcyBsaXN0ZW5lciBlbnN1cmVzIHRoYXQgdGhlIHNpZGViYXIgZG9lc24ndCBnZXQgY2xvc2VkLCB3aGljaCBzb21laG93XG4gICAgICAgICAgICAvLyByZXNvbHZlcyB0aGUgaXNzdWUgb2YgcmVuZGVyaW5nIHRoZSB0ZW1wbGF0ZSB1bmRlcm5lYXQgdGhlIHNsaWRlb3V0IG1lbnVcbiAgICAgICAgICAgICRzY29wZS50b2dnbGUub3BlbiA9IHRydWU7XG4gICAgICAgIH0pO1xuXG59XSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ2NhdGVnb3JpZXMnLCBbJyRodHRwJywgJyRxJywgJ2xvZGFzaCcsIGZ1bmN0aW9uKCRodHRwLCAkcSwgbG9kYXNoKSB7XG4gICAgdmFyIGNhdGVnb3JpZXMgPSB7fTtcbiAgICBjYXRlZ29yaWVzLmxpc3QgPSBbXTtcblxuICAgIGNhdGVnb3JpZXMudG9nZ2xlID0gZnVuY3Rpb24oY2F0ZWdvcnkpIHtcbiAgICAgICAgcG9zaXRpb24gPSBsb2Rhc2guZmluZEluZGV4KGNhdGVnb3JpZXMubGlzdCwgZnVuY3Rpb24obGlzdGNhdCkge1xuICAgICAgICAgICAgcmV0dXJuIGxpc3RjYXQubmFtZSA9PSBjYXRlZ29yeS5uYW1lO1xuICAgICAgICB9KTtcbiAgICAgICAgY2F0ZWdvcmllcy5saXN0W3Bvc2l0aW9uXS5zZWxlY3RlZCA9ICFjYXRlZ29yaWVzLmxpc3RbcG9zaXRpb25dLnNlbGVjdGVkO1xuICAgIH07XG5cbiAgICBjYXRlZ29yaWVzLmdldENhdGVnb3JpZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGNhdGVnb3JpZXMubGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBpZiB0aGlzIG9iamVjdCBhbHJlYWR5IGhhcyBkYXRhLCBqdXN0IHVzZSB3aGF0J3MgY3VycmVudGx5IGF2YWlsYWJsZVxuICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUpe3Jlc29sdmUoY2F0ZWdvcmllcyl9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSBnZXQgZGF0YSBmcmVzaCBmcm9tIGZpbGVcbiAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJy9zdGF0aWMvZGlzdC9kYXRhL2RhdGEuanNvbicpXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yaWVzLmxpc3QgPSBsb2Rhc2gubWFwKGxvZGFzaC5zb3J0QnkocmVzcG9uc2UsIFwicmFua1wiKSwgZnVuY3Rpb24obykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2Rhc2guZXh0ZW5kKHt9LCBvLCB7XCJzZWxlY3RlZFwiIDogdHJ1ZX0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcmllcy5saXN0XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGNhdGVnb3JpZXMpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoXCJUaGVyZSB3YXMgYW4gZXJyb3IgZ2V0dGluZyBjYXRlZ29yaWVzXCIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBjYXRlZ29yaWVzO1xufV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdjb250cmlidXRvcnMnLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24oJGh0dHAsICRxKSB7XG4gICAgdmFyIGNvbnRyaWJ1dG9ycyA9IHt9O1xuICAgIGNvbnRyaWJ1dG9ycy5saXN0ID0gW107XG5cbiAgICBjb250cmlidXRvcnMuZ2V0Q29udHJpYnV0b3JzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChjb250cmlidXRvcnMubGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBpZiB0aGlzIG9iamVjdCBhbHJlYWR5IGhhcyBkYXRhLCBqdXN0IHVzZSB3aGF0J3MgY3VycmVudGx5IGF2YWlsYWJsZVxuICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUpe3Jlc29sdmUoY29udHJpYnV0b3JzKX0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGdldCBkYXRhIGZyZXNoIGZyb20gZmlsZVxuICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICRodHRwLmdldCgnL3N0YXRpYy9kaXN0L2RhdGEvY29udHJpYnV0b3JzLmpzb24nKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0b3JzLmxpc3QgPSByZXNwb25zZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoY29udHJpYnV0b3JzKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwiVGhlcmUgd2FzIGFuIGVycm9yIGdldHRpbmcgY29udHJpYnV0b3JzXCIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBjb250cmlidXRvcnM7XG59XSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ1NpZGViYXJDb250cm9sbGVyJyxcbiAgICBbJyRzY29wZScsICckbG9nJywnbG9kYXNoJywgJ2NhdGVnb3JpZXMnLCAnY29udHJpYnV0b3JzJyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRsb2csIGxvZGFzaCwgY2F0ZWdvcmllcywgY29udHJpYnV0b3JzKSB7XG4gICAgICAgIC8vICRzY29wZS5zdGF0dXMgPSB7XG4gICAgICAgIC8vICAgICBpc29wZW46IGZhbHNlXG4gICAgICAgIC8vIH07XG5cbiAgICAgICAgdmFyIGNhdGVnb3J5UHJvbWlzZSA9IGNhdGVnb3JpZXMuZ2V0Q2F0ZWdvcmllcygpO1xuICAgICAgICBjYXRlZ29yeVByb21pc2UudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICRzY29wZS5jYXRlZ29yaWVzID0gY2F0ZWdvcmllcy5saXN0O1xuICAgICAgICB9LCBmdW5jdGlvbihyZWplY3Rpb24pIHtcbiAgICAgICAgICAgIGFsZXJ0KFwicHJvbWlzZSByZWplY3RlZCFcIik7XG4gICAgICAgIH0pXG5cbiAgICAgICAgdmFyIGNvbnRyaWJ1dG9yUHJvbWlzZSA9IGNvbnRyaWJ1dG9ycy5nZXRDb250cmlidXRvcnMoKTtcbiAgICAgICAgY29udHJpYnV0b3JQcm9taXNlLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAkc2NvcGUuY29udHJpYnV0b3JzID0gY29udHJpYnV0b3JzLmxpc3Q7XG4gICAgICAgIH0sIGZ1bmN0aW9uKHJlamVjdGlvbikge1xuICAgICAgICAgICAgYWxlcnQoXCJwcm9taXNlIHJlamVjdGVkIVwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRnVuY3Rpb25zIGZvciBtYW5hZ2luZyB0aGUgcHJlc2VudGF0aW9uIG9mIHRoZSBzZWxlY3RlZCBpdGVtcyBpblxuICAgICAgICAvLyB0aGUgc2lkZWJhciBhbmQgcHJvcGlnYXRpbmcgc2VsZWN0aW9ucyB0aHJvdWdoIHRoZSBjYXRnb3JpZXMgc2VydmljZVxuICAgICAgICAkc2NvcGUudXBkYXRlU2VsZWN0ZWQgPSBmdW5jdGlvbihjYXRlZ29yeSkge1xuICAgICAgICAgICAgY2F0ZWdvcmllcy50b2dnbGUoY2F0ZWdvcnkpO1xuICAgICAgICAgICAgY29uc29sZS5sb2cobG9kYXNoLnBsdWNrKGNhdGVnb3JpZXMubGlzdCwgXCJzZWxlY3RlZFwiKSlcbiAgICAgICAgfTtcblxuICAgICAgICAkc2NvcGUuY2hlY2tTZWxlY3RlZCA9IGZ1bmN0aW9uKGJvb2wpIHtcbiAgICAgICAgICAgIGlmIChib29sKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwic2VsZWN0ZWRcIjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiZGVzZWxlY3RlZFwiO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICAkc2NvcGUuJHdhdGNoQ29sbGVjdGlvbihmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIHJldHVybiAkc2NvcGUudG9nZ2xlO1xuICAgICAgICB9LCBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidG9nZ2xlZCB0cmlnZ2VyZWQgZnJvbSBzaWRlYmFyXCIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLnRvZ2dsZSk7XG4gICAgICAgIH0pO1xufV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdzaWRlYmFyRGlzcGxheScsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHRvZ2dsZTogeyBvcGVuOiB0cnVlIH1cbiAgICB9XG59KVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignV3JhcENvbnRyb2xsZXInLCBbJyRzY29wZScsICdzaWRlYmFyRGlzcGxheScsIGZ1bmN0aW9uKCRzY29wZSwgc2lkZWJhckRpc3BsYXkpIHtcbiAgICAkc2NvcGUudG9nZ2xlID0gc2lkZWJhckRpc3BsYXkudG9nZ2xlO1xuXG4gICAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJHNjb3BlLnRvZ2dsZTtcbiAgICAgICAgfSwgZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhcInRvZ2dsZWQgdHJpZ2dlcmVkIGZyb20gd3JhcFwiKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCRzY29wZS50b2dnbGUpO1xuICAgICAgICB9KTtcbn1dKVxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
