var app=angular.module("app",["ngAnimate","ui.bootstrap","ngLodash","ngRoute"]);angular.module("app").config(["$routeProvider","$locationProvider",function(t,e){t.when("/introduction",{templateUrl:"static/dist/templates/introduction.html",controller:"AboutPageController"}).when("/civic-engagement",{templateUrl:"static/dist/templates/civic-engagement.html",controller:"EngagementPageController"}).when("/political-participation",{templateUrl:"static/dist/templates/political-participation.html",controller:"ParticipationPageController"}).when("/community-cohesion",{templateUrl:"static/dist/templates/community-cohesion.html",controller:"CohesionPageController"}).when("/institutional-presence",{templateUrl:"static/dist/templates/institutional-presence.html",controller:"InstitutionPageController"}).when("/call-to-action",{templateUrl:"static/dist/templates/call-to-action.html",controller:"CallToActionPageController"}).when("/partners",{templateUrl:"static/dist/templates/partners.html",controller:"PartnersPageController"}).when("/raw-data",{templateUrl:"static/dist/templates/data.html",controller:"DataVizController"}).otherwise({redirectTo:"/introduction"})}]),angular.module("app").filter("suppressions",function(){return function(t){return"-9,999.0"===t||"-9999"===t?"&ddagger;":"-666,666.0"===t||"-666666"===t?"&dagger;":t}}).filter("percent",function(){return function(t){return parseInt(t)>0?t+"%":t}}).filter("anySuppressed",["lodash",function(t){return function(e,n){return e=t.flattenDeep(t.pluck(e,"data")),"undefined"!=typeof n?t.some(e,function(e){return e=t.values(e),-1!==t.indexOf(e,n)}):t.some(e,function(e){return e=t.values(e),-1!==t.indexOf(e,"-666666")||-1!==t.indexOf(e,"-9999")})}}]).filter("any",["lodash",function(t){return function(e,n){return"undefined"!=typeof n?t.some(e,n):t.some(e)}}]).filter("none",["lodash",function(t){return function(e,n){return"undefined"!=typeof n?!t.some(e,n):!t.some(e)}}]).filter("sluggify",function(){return function(t){return t.toLowerCase().replace(/[^a-zA-Z0-9_]/g,"_")}}).filter("safe",["$sce",function(t){return t.trustAsHtml}]),angular.module("app").controller("DataVizController",["$scope","$http","$log","$location","$filter","sidebarDisplay","categories","lodash",function(t,e,n,o,a,i,r,l){t.toggle=i.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,i.section="Raw Data"})}]),angular.module("app").directive("dataviz",["$window","$http","timeseriesService",function(t,e,n){var o={line:n.chart};return{restrict:"E",scope:{which:"=which",type:"=type"},link:function(t,n,a){t.render=function(){t.data?o[t.type](n[0],result.data,{}):e.get("/static/dist/data/csv/"+t.which+".csv").then(function(e){t.data=e.data,o[t.type](n[0],t.data,{})})},t.$watchCollection("which",function(){t.render()})}}}]),angular.module("app").directive("simpletable",function(){var t=tableChart();return{restrict:"E",scope:{data:"=data"},link:function(e,n,o){e.$watchCollection("data",function(e){d3.select(n[0]).datum(e).call(t)})}}}),angular.module("app").service("timeseriesService",["$q","$http","lodash",function(t,e,n){var o={};return o.chart=function(t,e,o){function a(t){t.each(function(t){var e=this.getBoundingClientRect(),n={top:.01*e.height,right:.01*e.width,bottom:.01*e.height,left:.01*e.width},o=e.width-(n.left+n.right);height=e.height-(n.top+n.bottom),colors=d3.scale.ordinal().range(["#1EACF1","#B94A48"]).domain(t);var a=(d3.select(this).selectAll("div").data(t).enter().append("svg").attr("height",height).attr("width",o).append("g").classed("legend",!0).attr("height",height).attr("width",o).attr("transform","translate("+n.left+", "+n.top+")"),legend.selectAll("g.entry").data(legendData).enter().append("g").attr("data-class",function(t){return sluggify(t)}).attr("class",function(t){var e=["entry",sluggify(t)].join(" ");return e}).attr("transform",function(t,e){return"translate(0, "+19*e+")"}).datum(function(t){return t}));a.each(function(){var t=a.selectAll("tspan").size();d3.select(this).attr("transform",function(e,n){return"translate(0, "+19*n+19*(t-n)+")"}),d3.select(this).append("path").attr("fill",function(t,e){return colors(t)}).attr("stroke",function(t,e){return colors(t)}).attr("stroke-width",0).attr("d",d3.svg.symbol().type(function(t){return symbolScale(t)}).size(25)),d3.select(this).append("text").attr("fill","#4A4A4A").attr("y",6).attr("dx",8).tspans(function(t){return d3.wordwrap(t,20)})}),d3.selectAll("tspan").attr("dx",8)})}function i(t){t.each(function(t){var e=this.getBoundingClientRect(),o={top:.05*e.height,right:.05*e.width,bottom:.1*e.height,left:d3.max([.05*e.width,55])},a=e.width-(o.left+o.right);height=e.height-(o.top+o.bottom),svg=d3.select(this).append("svg").attr("height",e.height).attr("width",e.width),chart=svg.append("g").attr("height",height).attr("width",a).attr("transform","translate("+o.left+", "+o.top+")"),colors=d3.scale.ordinal().range(["#1EACF1","#B94A48"]).domain(r),symbolScale=d3.scale.ordinal().range(d3.svg.symbolTypes).domain(r),timeFormat=d3.time.format("%Y"),timeRange=n.chain(t).map(function(t){return t.Year}).value(),x=d3.time.scale().range([12,a]).domain(d3.extent(timeRange).map(function(t){return timeFormat.parse(t)})),y=d3.scale.linear().range([height,0]).domain(d3.extent(n.chain(t).map(function(t){return r.map(function(e){return+t[e]})}).flatten().unique().value())).nice(5,10),xAxis=d3.svg.axis().scale(x).orient("bottom").ticks(d3.time.year,1),yAxis=d3.svg.axis().scale(y).orient("left").innerTickSize(-a).tickPadding(10),line=d3.svg.line().x(function(t){return x(t.Year)}).y(function(t){return y(t.Value)}),t=r.map(function(e){return{Key:e,Values:n.map(t,function(t){return{Year:timeFormat.parse(t.Year),Value:+t[e]}})}}),chart.append("g").classed({"x-axis":!0,axis:!0}).attr("transform","translate(0, "+height+")").call(xAxis),chart.append("g").classed({"y-axis":!0,axis:!0}).attr("transform","translate(-12, 0)").call(yAxis),chart.selectAll("g.timeseries-lines").data(t).enter().append("g").classed("timeseries-lines",!0).append("path").classed("timeseries-path",!0).attr("d",function(t){return line(t.Values)}).attr("stroke",function(t,e){return colors(t.Key)});var i=t.map(function(t,e,n){return t.Values.map(function(e,n,o){return e.Key=t.Key,e})});i=n.flatten(i),chart.append("g").classed("timeseries-points",!0).selectAll("g").data(i).enter().append("path").attr("stroke",function(t,e){return colors(t.Key)}).attr("d",d3.svg.symbol().type("circle").size(65)).attr("transform",function(t){return"translate("+x(t.Year)+", "+y(t.Value)+")"})})}o.facet=n.difference(["structure","time"],[o.facet])[0],e=d3.csv.parse(e);var r=n.chain(e[0]).keys().filter(function(t){return"Year"!==t}).value();chartContainer=d3.select(t).append("div").classed("timeseries-container",!0).append("div").classed("timeseries-container-internal",!0).datum(e),legendContainer=d3.select(t).append("div").classed({"legend-container":!0,"timeseries-legend-container":!0}),i(chartContainer);var l=legendContainer.selectAll("div.legend").data([r]).enter().append("div").classed({legend:!0,"timeseries-legend":!0});a(l)},o}]),angular.module("app").controller("AboutPageController",["$scope","$http","$log","$location","$routeParams","sidebarDisplay","contributors",function(t,e,n,o,a,i,r){t.toggle=i.toggle;var l=r.getContributors("all");l.then(function(e){t.contributors=r.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!1,i.section="Introduction",t.nextSection="Civic Engagement",t.nextSectionTeaser="Testing",t.nextSectionURL="#/civic-engagement"})}]),angular.module("app").controller("CallToActionPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,o,a){t.toggle=a.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,a.section="Call To Action"})}]),angular.module("app").controller("CohesionPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,o,a){t.toggle=a.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,a.section="Social Networks and Community Cohesion",t.nextSection="Institutional Presence",t.nextSectionTeaser="Stuff about institutions",t.nextSectionURL="#/institutional-presence"})}]),angular.module("app").controller("EngagementPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,o,a){t.toggle=a.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,a.section="Civic Engagement",t.nextSection="Political Participation",t.nextSectionTeaser="Stuff about political participation",t.nextSectionURL="#/political-participation"})}]),angular.module("app").controller("ParticipationPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,o,a){t.toggle=a.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,a.section="Political Participation",t.nextSection="Community Cohesion",t.nextSectionTeaser="Stuff about cohesion",t.nextSectionURL="#/community-cohesion"})}]),angular.module("app").controller("PartnersPageController",["$scope","$http","$log","$location","$routeParams","sidebarDisplay","contributors",function(t,e,n,o,a,i,r){t.toggle=i.toggle;var l=r.getContributors("all");l.then(function(e){t.contributors=r.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,i.section="Partners",t.nextSection="Raw Data",t.nextSectionTeaser="Stuff about raw data",t.nextSectionURL="#/raw-data"})}]),angular.module("app").controller("InstitutionPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,o,a){t.toggle=a.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,a.section="Institutional Presence",t.nextSection="Call to Action",t.nextSectionTeaser="Stuff about call to action",t.nextSectionURL="#/call-to-action"})}]),angular.module("app").service("categories",["$http","$q","lodash",function(t,e,n){var o={};return o.list=[],o.toggle=function(t){position=n.findIndex(o.list,function(e){return e.name==t.name}),o.list[position].selected=!o.list[position].selected},o.getCategories=function(){return e(o.list.length>0?function(t){t(o)}:function(e,a){t.get("/static/dist/data/data.json").success(function(t){list=n.map(n.sortBy(t,"rank"),function(t){return t.data.forEach(function(e,o,a){t.data[o].data=n.sortByAll(t.data[o].data,"rank")}),t=n.extend({},t,{selected:!0})}),o.list=list,e(o)}).error(function(){a("There was an error getting categories")})})},o}]),angular.module("app").service("contributors",["$http","$q",function(t,e){var n={};return n.list=[],n.getContributors=function(){return e(n.list.length>0?function(t){t(n)}:function(e,o){t.get("/static/dist/data/contributors.json").success(function(t){n.list=t,e(n)}).error(function(){o("There was an error getting contributors")})})},n}]),angular.module("app").controller("SidebarController",["$scope","$log","lodash","categories","contributors",function(t,e,n,o,a){var i=o.getCategories();i.then(function(e){t.categories=o.list},function(t){alert("promise rejected!")});var r=a.getContributors();r.then(function(e){t.contributors=a.list},function(t){alert("promise rejected!")}),t.updateSelected=function(t){o.toggle(t)},t.checkSelected=function(t){return t?"selected":"deselected"},t.$watchCollection(function(){return t.toggle},function(){console.log("toggled triggered from sidebar"),console.log(t.toggle)})}]),angular.module("app").service("sidebarDisplay",function(){return{toggle:{open:!0},section:"Introduction"}}),angular.module("app").controller("WrapController",["$scope","sidebarDisplay",function(t,e){t.toggle=e.toggle,t.section=e.section,t.$watchCollection(function(){return t.toggle},function(){console.log("toggled triggered from wrap"),console.log(t.toggle)}),t.$watchCollection(function(){return e.section},function(){t.section=e.section})}]);
//# sourceMappingURL=data:application/json;base64,
