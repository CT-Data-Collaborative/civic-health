var app=angular.module("app",["ngAnimate","ui.bootstrap","ngLodash","ngRoute"]);angular.module("app").config(["$routeProvider","$locationProvider",function(t,e){t.when("/data",{templateUrl:"static/dist/templates/data.html",controller:"DataVizController"}).when("/about",{templateUrl:"static/dist/templates/about.html"}).otherwise({redirectTo:"/data"})}]),angular.module("app").filter("suppressions",function(){return function(t){return"-9999"===t?"NA":"-666666"===t?" &mdash; ":t}}).filter("sluggify",function(){return function(t){return t.toLowerCase().replace(/[^a-zA-Z0-9_]/g,"_")}}).filter("safe",["$sce",function(t){return t.trustAsHtml}]),angular.module("app").controller("AboutPageController",["$scope","$http","$log","sidebarDisplay","contributors","lodash",function(t,e,o,n,r,i){t.toggle=n.toggle;var l=r.getContributors("all");l.then(function(e){t.contributors=r.list},function(t){alert("promise rejected!")}),t.$watchCollection(function(){return t.contributors},function(){console.log("Selection Detected")},!0)}]),angular.module("app").controller("DataVizController",["$scope","$http","$log","sidebarDisplay","categories","lodash",function(t,e,o,n,r,i){t.toggle=n.toggle;var l=r.getCategories("all");l.then(function(e){t.categories=r.list},function(t){alert("promise rejected!")}),t.$watchCollection(function(){return t.categories},function(){console.log("Selection Detected")},!0)}]),angular.module("app").directive("simpletable",function(){var t=tableChart();return{restrict:"E",scope:{data:"=data"},link:function(e,o,n){e.$watchCollection("data",function(e){d3.select(o[0]).datum(e).call(t)})}}}),angular.module("app").service("categories",["$http","$q","lodash",function(t,e,o){var n={};return n.list=[],n.toggle=function(t){position=o.findIndex(n.list,function(e){return e.name==t.name}),n.list[position].selected=!n.list[position].selected},n.getCategories=function(){return e(n.list.length>0?function(t){t(n)}:function(e,r){t.get("/static/dist/data/data.json").success(function(t){n.list=o.map(o.sortBy(t,"rank"),function(t){return o.extend({},t,{selected:!0})}),n.list,e(n)}).error(function(){r("There was an error getting categories")})})},n}]),angular.module("app").service("contributors",["$http","$q",function(t,e){var o={};return o.list=[],o.getContributors=function(){return e(o.list.length>0?function(t){t(o)}:function(e,n){t.get("/static/dist/data/contributors.json").success(function(t){o.list=t,e(o)}).error(function(){n("There was an error getting contributors")})})},o}]),angular.module("app").controller("SidebarController",["$scope","$log","lodash","categories","contributors",function(t,e,o,n,r){t.status={isopen:!1};var i=n.getCategories();i.then(function(e){t.categories=n.list},function(t){alert("promise rejected!")});var l=r.getContributors();l.then(function(e){t.contributors=r.list},function(t){alert("promise rejected!")}),t.updateSelected=function(t){n.toggle(t),console.log(o.pluck(n.list,"selected"))},t.checkSelected=function(t){return t?"selected":"deselected"}}]),angular.module("app").service("sidebarDisplay",function(){return{toggle:{toggled:!1}}}),angular.module("app").controller("WrapController",["$scope","sidebarDisplay",function(t,e){t.toggle=e.toggle}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsInJvdXRlcy5qcyIsImZpbHRlcnMuanMiLCJhYm91dHBhZ2UvYWJvdXRwYWdlLmNvbnRyb2xsZXIuanMiLCJkYXRhdml6L2RhdGF2aXouY29udHJvbGxlci5qcyIsImRhdGF2aXovc2ltcGxldGFibGUuZGlyZWN0aXZlLmpzIiwic2lkZWJhci9jYXRlZ29yaWVzLnNlcnZpY2UuanMiLCJzaWRlYmFyL2NvbnRyaWJ1dG9ycy5zZXJ2aWNlLmpzIiwic2lkZWJhci9zaWRlYmFyLmNvbnRyb2xsZXIuanMiLCJzaWRlYmFyL3NpZGViYXJkaXNwbGF5LnNlcnZpY2UuanMiLCJzaWRlYmFyL3dyYXAuY29udHJvbGxlci5qcyJdLCJuYW1lcyI6WyJhcHAiLCJhbmd1bGFyIiwibW9kdWxlIiwiY29uZmlnIiwiJHJvdXRlUHJvdmlkZXIiLCIkbG9jYXRpb25Qcm92aWRlciIsIndoZW4iLCJ0ZW1wbGF0ZVVybCIsImNvbnRyb2xsZXIiLCJvdGhlcndpc2UiLCJyZWRpcmVjdFRvIiwiZmlsdGVyIiwiaW5wdXQiLCJ0b0xvd2VyQ2FzZSIsInJlcGxhY2UiLCIkc2NlIiwidHJ1c3RBc0h0bWwiLCIkc2NvcGUiLCIkaHR0cCIsIiRsb2ciLCJzaWRlYmFyRGlzcGxheSIsImNvbnRyaWJ1dG9ycyIsImxvZGFzaCIsInRvZ2dsZSIsImNvbnRyaWJ1dG9yUHJvbWlzZSIsImdldENvbnRyaWJ1dG9ycyIsInRoZW4iLCJyZXN1bHQiLCJsaXN0IiwicmVqZWN0aW9uIiwiYWxlcnQiLCIkd2F0Y2hDb2xsZWN0aW9uIiwiY29uc29sZSIsImxvZyIsImNhdGVnb3JpZXMiLCJwcm9taXNlIiwiZ2V0Q2F0ZWdvcmllcyIsImRpcmVjdGl2ZSIsImNoYXJ0IiwidGFibGVDaGFydCIsInJlc3RyaWN0Iiwic2NvcGUiLCJkYXRhIiwibGluayIsImVsZW1lbnQiLCJhdHRycyIsImQzIiwic2VsZWN0IiwiZGF0dW0iLCJjYWxsIiwic2VydmljZSIsIiRxIiwiY2F0ZWdvcnkiLCJwb3NpdGlvbiIsImZpbmRJbmRleCIsImxpc3RjYXQiLCJuYW1lIiwic2VsZWN0ZWQiLCJsZW5ndGgiLCJyZXNvbHZlIiwicmVqZWN0IiwiZ2V0Iiwic3VjY2VzcyIsInJlc3BvbnNlIiwibWFwIiwic29ydEJ5IiwibyIsImV4dGVuZCIsImVycm9yIiwic3RhdHVzIiwiaXNvcGVuIiwiY2F0ZWdvcnlQcm9taXNlIiwidXBkYXRlU2VsZWN0ZWQiLCJwbHVjayIsImNoZWNrU2VsZWN0ZWQiLCJib29sIiwidG9nZ2xlZCJdLCJtYXBwaW5ncyI6IkFBQUEsR0FBQUEsS0FBQUMsUUFBQUMsT0FBQSxPQUNBLFlBQ0EsZUFDQSxXQUNBLFdDSkFELFNBQUFDLE9BQUEsT0FDQUMsUUFBQSxpQkFBQSxvQkFBQSxTQUFBQyxFQUFBQyxHQUNBRCxFQUNBRSxLQUFBLFNBQ0FDLFlBQUEsa0NBQ0FDLFdBQUEsc0JBRUFGLEtBQUEsVUFDQUMsWUFBQSxxQ0FFQUUsV0FDQUMsV0FBQSxhQ1hBVCxRQUFBQyxPQUFBLE9BQ0FTLE9BQUEsZUFBQSxXQUNBLE1BQUEsVUFBQUMsR0FDQSxNQUFBLFVBQUFBLEVBQ0EsS0FDQSxZQUFBQSxFQUNBLFlBRUFBLEtBSUFELE9BQUEsV0FBQSxXQUNBLE1BQUEsVUFBQUMsR0FDQSxNQUFBQSxHQUFBQyxjQUFBQyxRQUFBLGlCQUFBLFFBR0FILE9BQUEsUUFBQSxPQUFBLFNBQUFJLEdBQ0EsTUFBQUEsR0FBQUMsZUNsQkFmLFFBQUFDLE9BQUEsT0FDQU0sV0FBQSx1QkFDQSxTQUFBLFFBQUEsT0FBQSxpQkFBQSxlQUFBLFNBQ0EsU0FBQVMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsRUFBQUMsR0FFQUwsRUFBQU0sT0FBQUgsRUFBQUcsTUFFQSxJQUFBQyxHQUFBSCxFQUFBSSxnQkFBQSxNQUNBRCxHQUFBRSxLQUFBLFNBQUFDLEdBQ0FWLEVBQUFJLGFBQUFBLEVBQUFPLE1BQ0EsU0FBQUMsR0FDQUMsTUFBQSx1QkFLQWIsRUFBQWMsaUJBQUEsV0FDQSxNQUFBZCxHQUFBSSxjQUNBLFdBQ0FX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LGlCQUFBLFdBQ0EsT0FDQTNCLFFBQUFxRCxTQUFBLE1DSEEzRSxRQUFBQyxPQUFBLE9BQ0FNLFdBQUEsa0JBQUEsU0FBQSxpQkFBQSxTQUFBUyxFQUFBRyxHQUNBSCxFQUFBTSxPQUFBSCxFQUFBRyIsImZpbGUiOiJhcHAuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2FwcCcsIFtcbiAgICAnbmdBbmltYXRlJyxcbiAgICAndWkuYm9vdHN0cmFwJyxcbiAgICAnbmdMb2Rhc2gnLFxuICAgICduZ1JvdXRlJ1xuICAgIF0pO1xuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29uZmlnKGZ1bmN0aW9uKCRyb3V0ZVByb3ZpZGVyLCAkbG9jYXRpb25Qcm92aWRlcikge1xuICAgICRyb3V0ZVByb3ZpZGVyXG4gICAgICAgIC53aGVuKCcvZGF0YScsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3RhdGljL2Rpc3QvdGVtcGxhdGVzL2RhdGEuaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnRGF0YVZpekNvbnRyb2xsZXInXG4gICAgICAgIH0pXG4gICAgICAgIC53aGVuKCcvYWJvdXQnLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0YXRpYy9kaXN0L3RlbXBsYXRlcy9hYm91dC5odG1sJ1xuICAgICAgICB9KVxuICAgICAgICAub3RoZXJ3aXNlKHtcbiAgICAgICAgICAgIHJlZGlyZWN0VG86ICcvZGF0YSdcbiAgICAgICAgfSk7XG59KTsiLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5maWx0ZXIoJ3N1cHByZXNzaW9ucycsIGZ1bmN0aW9uKCkge1xuICByZXR1cm4gZnVuY3Rpb24oaW5wdXQpIHtcbiAgICBpZiAoaW5wdXQgPT09ICctOTk5OScpIHtcbiAgICAgICAgcmV0dXJuICdOQSc7XG4gICAgfSBlbHNlIGlmIChpbnB1dCA9PT0gJy02NjY2NjYnKSB7XG4gICAgICAgIHJldHVybiAnICZtZGFzaDsgJztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICB9O1xufSlcbi5maWx0ZXIoJ3NsdWdnaWZ5JywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dC50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1teYS16QS1aMC05X10vZywgXCJfXCIpXG4gICAgfTtcbn0pXG4uZmlsdGVyKCdzYWZlJywgZnVuY3Rpb24oJHNjZSkge1xuICAgIHJldHVybiAkc2NlLnRydXN0QXNIdG1sO1xufSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignQWJvdXRQYWdlQ29udHJvbGxlcicsXG4gICAgWyckc2NvcGUnLCAnJGh0dHAnLCAnJGxvZycsICdzaWRlYmFyRGlzcGxheScsICdjb250cmlidXRvcnMnLCAnbG9kYXNoJyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkbG9nLCBzaWRlYmFyRGlzcGxheSwgY29udHJpYnV0b3JzLCBsb2Rhc2gpe1xuICAgICAgICB2YXIgbG8gPSBsb2Rhc2g7XG4gICAgICAgICRzY29wZS50b2dnbGUgPSBzaWRlYmFyRGlzcGxheS50b2dnbGU7XG5cbiAgICAgICAgdmFyIGNvbnRyaWJ1dG9yUHJvbWlzZSA9IGNvbnRyaWJ1dG9ycy5nZXRDb250cmlidXRvcnMoXCJhbGxcIik7XG4gICAgICAgIGNvbnRyaWJ1dG9yUHJvbWlzZS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgJHNjb3BlLmNvbnRyaWJ1dG9ycyA9IGNvbnRyaWJ1dG9ycy5saXN0O1xuICAgICAgICB9LCBmdW5jdGlvbihyZWplY3Rpb24pIHtcbiAgICAgICAgICAgIGFsZXJ0KFwicHJvbWlzZSByZWplY3RlZCFcIik7XG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8gU2FtcGxlIHdhdGNoLi4uZG9lc24ndCBkbyBtdWNoLCBidXQgZGVtb25zdHJhdGVzIGhvd1xuICAgICAgICAvLyB0byB3YXRjaCBvYmplY3QgZnJvbSBhIHNlcnZpY2UuXG4gICAgICAgICRzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICRzY29wZS5jb250cmlidXRvcnM7XG4gICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJTZWxlY3Rpb24gRGV0ZWN0ZWRcIik7XG4gICAgICAgIH0sIHRydWUpO1xufV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdEYXRhVml6Q29udHJvbGxlcicsXG4gICAgWyckc2NvcGUnLCAnJGh0dHAnLCAnJGxvZycsICdzaWRlYmFyRGlzcGxheScsICdjYXRlZ29yaWVzJywgJ2xvZGFzaCcsXG4gICAgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJGxvZywgc2lkZWJhckRpc3BsYXksIGNhdGVnb3JpZXMsIGxvZGFzaCl7XG4gICAgICAgIHZhciBsbyA9IGxvZGFzaDtcbiAgICAgICAgJHNjb3BlLnRvZ2dsZSA9IHNpZGViYXJEaXNwbGF5LnRvZ2dsZTtcblxuICAgICAgICB2YXIgcHJvbWlzZSA9IGNhdGVnb3JpZXMuZ2V0Q2F0ZWdvcmllcyhcImFsbFwiKTtcbiAgICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgJHNjb3BlLmNhdGVnb3JpZXMgPSBjYXRlZ29yaWVzLmxpc3Q7XG4gICAgICAgIH0sIGZ1bmN0aW9uKHJlamVjdGlvbikge1xuICAgICAgICAgICAgYWxlcnQoXCJwcm9taXNlIHJlamVjdGVkIVwiKTtcbiAgICAgICAgfSlcblxuICAgICAgICAvLyBTYW1wbGUgd2F0Y2guLi5kb2Vzbid0IGRvIG11Y2gsIGJ1dCBkZW1vbnN0cmF0ZXMgaG93XG4gICAgICAgIC8vIHRvIHdhdGNoIG9iamVjdCBmcm9tIGEgc2VydmljZS5cbiAgICAgICAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICByZXR1cm4gJHNjb3BlLmNhdGVnb3JpZXM7XG4gICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJTZWxlY3Rpb24gRGV0ZWN0ZWRcIik7XG4gICAgICAgIH0sIHRydWUpO1xufV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5kaXJlY3RpdmUoJ3NpbXBsZXRhYmxlJywgZnVuY3Rpb24oKSB7XG4gICAgLy8gVGhpcyBmdW5jdGlvbiBzaG91bGQgcmVmbGVjdCB3aGF0ZXZlciB5b3VyIGQzIHRhYmxlIGZ1bmN0aW9uIGlzIGNhbGxlZC5cbiAgICB2YXIgY2hhcnQgPSB0YWJsZUNoYXJ0KCk7XG4gICAgcmV0dXJuICB7XG4gICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICBkYXRhOiBcIj1kYXRhXCIgLy8gV2UgY2FuIGNhbGwgdGhpcyB3L2Ugd2Ugd2FudC5cbiAgICAgICAgfSxcbiAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgICAgICBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKCdkYXRhJywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIGQzLnNlbGVjdChlbGVtZW50WzBdKS5kYXR1bShkYXRhKS5jYWxsKGNoYXJ0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ2NhdGVnb3JpZXMnLCBbJyRodHRwJywgJyRxJywgJ2xvZGFzaCcsIGZ1bmN0aW9uKCRodHRwLCAkcSwgbG9kYXNoKSB7XG4gICAgdmFyIGNhdGVnb3JpZXMgPSB7fTtcbiAgICBjYXRlZ29yaWVzLmxpc3QgPSBbXTtcblxuICAgIGNhdGVnb3JpZXMudG9nZ2xlID0gZnVuY3Rpb24oY2F0ZWdvcnkpIHtcbiAgICAgICAgcG9zaXRpb24gPSBsb2Rhc2guZmluZEluZGV4KGNhdGVnb3JpZXMubGlzdCwgZnVuY3Rpb24obGlzdGNhdCkge1xuICAgICAgICAgICAgcmV0dXJuIGxpc3RjYXQubmFtZSA9PSBjYXRlZ29yeS5uYW1lO1xuICAgICAgICB9KTtcbiAgICAgICAgY2F0ZWdvcmllcy5saXN0W3Bvc2l0aW9uXS5zZWxlY3RlZCA9ICFjYXRlZ29yaWVzLmxpc3RbcG9zaXRpb25dLnNlbGVjdGVkO1xuICAgIH07XG5cbiAgICBjYXRlZ29yaWVzLmdldENhdGVnb3JpZXMgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGNhdGVnb3JpZXMubGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBpZiB0aGlzIG9iamVjdCBhbHJlYWR5IGhhcyBkYXRhLCBqdXN0IHVzZSB3aGF0J3MgY3VycmVudGx5IGF2YWlsYWJsZVxuICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUpe3Jlc29sdmUoY2F0ZWdvcmllcyl9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSBnZXQgZGF0YSBmcmVzaCBmcm9tIGZpbGVcbiAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgICAgICAkaHR0cC5nZXQoJy9zdGF0aWMvZGlzdC9kYXRhL2RhdGEuanNvbicpXG4gICAgICAgICAgICAgICAgICAgIC5zdWNjZXNzKGZ1bmN0aW9uKHJlc3BvbnNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yaWVzLmxpc3QgPSBsb2Rhc2gubWFwKGxvZGFzaC5zb3J0QnkocmVzcG9uc2UsIFwicmFua1wiKSwgZnVuY3Rpb24obykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsb2Rhc2guZXh0ZW5kKHt9LCBvLCB7XCJzZWxlY3RlZFwiIDogdHJ1ZX0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgY2F0ZWdvcmllcy5saXN0XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGNhdGVnb3JpZXMpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoXCJUaGVyZSB3YXMgYW4gZXJyb3IgZ2V0dGluZyBjYXRlZ29yaWVzXCIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBjYXRlZ29yaWVzO1xufV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdjb250cmlidXRvcnMnLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24oJGh0dHAsICRxKSB7XG4gICAgdmFyIGNvbnRyaWJ1dG9ycyA9IHt9O1xuICAgIGNvbnRyaWJ1dG9ycy5saXN0ID0gW107XG5cbiAgICBjb250cmlidXRvcnMuZ2V0Q29udHJpYnV0b3JzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChjb250cmlidXRvcnMubGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBpZiB0aGlzIG9iamVjdCBhbHJlYWR5IGhhcyBkYXRhLCBqdXN0IHVzZSB3aGF0J3MgY3VycmVudGx5IGF2YWlsYWJsZVxuICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUpe3Jlc29sdmUoY29udHJpYnV0b3JzKX0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGdldCBkYXRhIGZyZXNoIGZyb20gZmlsZVxuICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICRodHRwLmdldCgnL3N0YXRpYy9kaXN0L2RhdGEvY29udHJpYnV0b3JzLmpzb24nKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0b3JzLmxpc3QgPSByZXNwb25zZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoY29udHJpYnV0b3JzKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwiVGhlcmUgd2FzIGFuIGVycm9yIGdldHRpbmcgY29udHJpYnV0b3JzXCIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBjb250cmlidXRvcnM7XG59XSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ1NpZGViYXJDb250cm9sbGVyJyxcbiAgICBbJyRzY29wZScsICckbG9nJywgJ2xvZGFzaCcsICdjYXRlZ29yaWVzJywgJ2NvbnRyaWJ1dG9ycycsXG4gICAgZnVuY3Rpb24oJHNjb3BlLCAkbG9nLCBsb2Rhc2gsIGNhdGVnb3JpZXMsIGNvbnRyaWJ1dG9ycykge1xuICAgICAgICAkc2NvcGUuc3RhdHVzID0ge1xuICAgICAgICAgICAgaXNvcGVuOiBmYWxzZVxuICAgICAgICB9O1xuXG4gICAgICAgIHZhciBjYXRlZ29yeVByb21pc2UgPSBjYXRlZ29yaWVzLmdldENhdGVnb3JpZXMoKTtcbiAgICAgICAgY2F0ZWdvcnlQcm9taXNlLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAkc2NvcGUuY2F0ZWdvcmllcyA9IGNhdGVnb3JpZXMubGlzdDtcbiAgICAgICAgfSwgZnVuY3Rpb24ocmVqZWN0aW9uKSB7XG4gICAgICAgICAgICBhbGVydChcInByb21pc2UgcmVqZWN0ZWQhXCIpO1xuICAgICAgICB9KVxuXG4gICAgICAgIHZhciBjb250cmlidXRvclByb21pc2UgPSBjb250cmlidXRvcnMuZ2V0Q29udHJpYnV0b3JzKCk7XG4gICAgICAgIGNvbnRyaWJ1dG9yUHJvbWlzZS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgJHNjb3BlLmNvbnRyaWJ1dG9ycyA9IGNvbnRyaWJ1dG9ycy5saXN0O1xuICAgICAgICB9LCBmdW5jdGlvbihyZWplY3Rpb24pIHtcbiAgICAgICAgICAgIGFsZXJ0KFwicHJvbWlzZSByZWplY3RlZCFcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIC8vIEZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgdGhlIHByZXNlbnRhdGlvbiBvZiB0aGUgc2VsZWN0ZWQgaXRlbXMgaW5cbiAgICAgICAgLy8gdGhlIHNpZGViYXIgYW5kIHByb3BpZ2F0aW5nIHNlbGVjdGlvbnMgdGhyb3VnaCB0aGUgY2F0Z29yaWVzIHNlcnZpY2VcbiAgICAgICAgJHNjb3BlLnVwZGF0ZVNlbGVjdGVkID0gZnVuY3Rpb24oY2F0ZWdvcnkpIHtcbiAgICAgICAgICAgIGNhdGVnb3JpZXMudG9nZ2xlKGNhdGVnb3J5KTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGxvZGFzaC5wbHVjayhjYXRlZ29yaWVzLmxpc3QsIFwic2VsZWN0ZWRcIikpXG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS5jaGVja1NlbGVjdGVkID0gZnVuY3Rpb24oYm9vbCkge1xuICAgICAgICAgICAgaWYgKGJvb2wpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJzZWxlY3RlZFwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJkZXNlbGVjdGVkXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG59XSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ3NpZGViYXJEaXNwbGF5JywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9nZ2xlOiB7IHRvZ2dsZWQ6IGZhbHNlIH1cbiAgICB9XG59KVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignV3JhcENvbnRyb2xsZXInLCBbJyRzY29wZScsICdzaWRlYmFyRGlzcGxheScsIGZ1bmN0aW9uKCRzY29wZSwgc2lkZWJhckRpc3BsYXkpIHtcbiAgICAkc2NvcGUudG9nZ2xlID0gc2lkZWJhckRpc3BsYXkudG9nZ2xlO1xufV0pXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
