var app=angular.module("app",["ngAnimate","ui.bootstrap","ngLodash","ngRoute"]);angular.module("app").config(["$routeProvider","$locationProvider",function(t,e){t.when("/introduction",{templateUrl:"static/dist/templates/introduction.html",controller:"AboutPageController"}).when("/civic-engagement",{templateUrl:"static/dist/templates/civic-engagement.html",controller:"EngagementPageController"}).when("/political-participation",{templateUrl:"static/dist/templates/political-participation.html",controller:"ParticipationPageController"}).when("/community-cohesion",{templateUrl:"static/dist/templates/community-cohesion.html",controller:"CohesionPageController"}).when("/institutional-presence",{templateUrl:"static/dist/templates/institutional-presence.html",controller:"InstitutionPageController"}).when("/call-to-action",{templateUrl:"static/dist/templates/call-to-action.html",controller:"CallToActionPageController"}).when("/partners",{templateUrl:"static/dist/templates/partners.html",controller:"PartnersPageController"}).when("/raw-data",{templateUrl:"static/dist/templates/data.html",controller:"DataVizController"}).otherwise({redirectTo:"/introduction"})}]),angular.module("app").filter("suppressions",function(){return function(t){return"-9,999.0"===t||"-9999"===t?"&ddagger;":"-666,666.0"===t||"-666666"===t?"&dagger;":t}}).filter("percent",function(){return function(t){return parseInt(t)>0?t+"%":t}}).filter("anySuppressed",["lodash",function(t){return function(e,n){return e=t.flattenDeep(t.pluck(e,"data")),"undefined"!=typeof n?t.some(e,function(e){return e=t.values(e),-1!==t.indexOf(e,n)}):t.some(e,function(e){return e=t.values(e),-1!==t.indexOf(e,"-666666")||-1!==t.indexOf(e,"-9999")})}}]).filter("any",["lodash",function(t){return function(e,n){return"undefined"!=typeof n?t.some(e,n):t.some(e)}}]).filter("none",["lodash",function(t){return function(e,n){return"undefined"!=typeof n?!t.some(e,n):!t.some(e)}}]).filter("sluggify",function(){return function(t){return t.toLowerCase().replace(/[^a-zA-Z0-9_]/g,"_")}}).filter("safe",["$sce",function(t){return t.trustAsHtml}]),angular.module("app").service("barChartService",["$q","$http","lodash",function(t,e,n){var a={};return a.chart=function(t,e,a){function r(t){function e(t,e){t.each(function(){for(var t,n=d3.select(this),a=n.text().split(/\s+/).reverse(),r=[],o=0,i=1.1,l=n.attr("y"),c=parseFloat(n.attr("dy")),s=n.text(null).append("tspan").attr("x",0).attr("y",l).attr("dy",c+"em");t=a.pop();)r.push(t),s.text(r.join(" ")),s.node().getComputedTextLength()>e&&(r.pop(),s.text(r.join(" ")),r=[t],s=n.append("tspan").attr("x",0).attr("y",l).attr("dy",++o*i+c+"em").text(t))})}t.each(function(t){var n=this.getBoundingClientRect(),a={top:.05*n.height,right:.05*n.width,bottom:.2*n.height,left:d3.max([.05*n.width,55])},r=n.width-(a.left+a.right);height=n.height-(a.top+a.bottom),svg=d3.select(this).append("svg").attr("height",n.height).attr("width",n.width),chart=svg.append("g").attr("height",height).attr("width",r).attr("transform","translate("+a.left+", "+a.top+")"),x=d3.scale.ordinal().rangeRoundBands([0,r],.1,.1).domain(o),y=d3.scale.linear().range([height,0]).domain([0,yRangeMax]).nice(10),xAxis=d3.svg.axis().scale(x).orient("bottom"),yAxis=d3.svg.axis().scale(y).orient("left").innerTickSize(-r).tickPadding(10).tickFormat(function(t){return d3.format("f")(t)+"%"});var i=chart.append("g").classed({"x-axis":!0,axis:!0}).attr("transform","translate(0, "+height+")").call(xAxis);i.selectAll(".tick text").call(e,x.rangeBand()),chart.append("g").classed({"y-axis":!0,axis:!0}).attr("transform","translate(-12, 0)").call(yAxis),chart.selectAll("rect.barchart-bar").data(t).enter().append("rect").attr("class",function(t,e){var n="bar-color-"+(e%2+1);return["barchart-bar",n].join(" ")}).attr("width",x.rangeBand()).attr("height",function(t){return height-y(t.Value)}).attr("x",function(t){return x(t.Bar)}).attr("y",function(t){return y(t.Value)}),chart.selectAll("text.barchart-value").data(t).enter().append("text").classed("barchart-value",!0).text(function(t){return d3.format("0.1f")(t.Value)+"%"}).attr("width",x.rangeBand()).attr("y",function(t){return y(t.Value)}).attr("text-anchor","middle").attr("x",function(t){return x(t.Bar)+x.rangeBand()/2}).attr("dy",-4)})}a.facet=n.difference(["structure","time"],[a.facet])[0],e=d3.csv.parse(e);var o=n.chain(e).map(function(t){return t.Bar}).unique().value();yRangeMax=n.chain(e).map(function(t){return+t.Value}).max().value(),chartContainer=d3.select(t).append("div").classed("barchart-container",!0).append("div").classed("barchart-container-internal",!0).datum(e),r(chartContainer)},a}]),angular.module("app").controller("DataVizController",["$scope","$http","$log","$location","$filter","sidebarDisplay","categories",function(t,e,n,a,r,o,i){t.toggle=o.toggle;var l=i.getCategories("all");l.then(function(e){t.categories=i.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,o.section="Raw Data"})}]),angular.module("app").directive("dataviz",["$window","$http","timeseriesService","groupedBarChartService","barChartService","tableService",function(t,e,n,a,r,o){var i={line:n.chart,bar:r.chart,groupedBar:a.chart,table:o.chart};return{restrict:"E",scope:{which:"=which",type:"=type"},link:function(t,n,a){t.render=function(){t.data?i[t.type](n[0],result.data,{}):e.get("/static/dist/data/csv/"+t.which+".csv").then(function(e){t.data=e.data,i[t.type](n[0],t.data,{})})},t.$watchCollection("which",function(){t.render()})}}}]),angular.module("app").service("groupedBarChartService",["$q","$http","lodash",function(t,e,n){var a={};return a.chart=function(t,e,a){function r(t){t.each(function(t){var e=d3.scale.ordinal().range(["bar-color-1","bar-color-2","bar-color-3","bar-color-4"]).domain(l),n=d3.select(this).selectAll("div.groupedbar-legend-entry").data(t).enter().append("div").classed("groupedbar-legend-entry",!0).datum(function(t){return t});n.each(function(t){d3.select(this).append("span").attr("class",function(n){return["groupedbar-legend-entry-color",e(t)].join(" ")}),d3.select(this).append("span").classed("groupedbar-legend-entry-label",!0).text(t)})})}function o(t){function e(t,e){t.each(function(){for(var t,n=d3.select(this),a=n.text().split(/\s+/).reverse(),r=[],o=0,i=1.1,l=n.attr("y"),c=parseFloat(n.attr("dy")),s=n.text(null).append("tspan").attr("x",0).attr("y",l).attr("dy",c+"em");t=a.pop();)r.push(t),s.text(r.join(" ")),s.node().getComputedTextLength()>e&&(r.pop(),s.text(r.join(" ")),r=[t],s=n.append("tspan").attr("x",0).attr("y",l).attr("dy",++o*i+c+"em").text(t))})}t.each(function(t){var a=this.getBoundingClientRect(),r={top:.05*a.height,right:.05*a.width,bottom:.3*a.height,left:d3.max([.05*a.width,55])},o=a.width-(r.left+r.right);height=a.height-(r.top+r.bottom),svg=d3.select(this).append("svg").attr("height",a.height).attr("width",a.width),chart=svg.append("g").attr("height",height).attr("width",o).attr("transform","translate("+r.left+", "+r.top+")"),colors=d3.scale.ordinal().range(["bar-color-1","bar-color-2","bar-color-3","bar-color-4"]).domain(l),x0=d3.scale.ordinal().rangeRoundBands([0,o],.2,.2).domain(i),x1=d3.scale.ordinal().rangeRoundBands([0,x0.rangeBand()],.1,0).domain(l),y=d3.scale.linear().range([height,0]).domain([0,yRangeMax]).nice(5),x0Axis=d3.svg.axis().scale(x0).orient("bottom"),x1Axis=d3.svg.axis().scale(x1).orient("bottom"),yAxis=d3.svg.axis().scale(y).orient("left").innerTickSize(-o).tickPadding(10).tickFormat(function(t){return d3.format("f")(t)+"%"});var c=chart.append("g").classed({"x-axis":!0,axis:!0}).attr("transform","translate(0, "+height+")").call(x0Axis);c.selectAll(".tick text").call(e,x0.rangeBand()),chart.append("g").classed({"y-axis":!0,axis:!0}).attr("transform","translate(-12, 0)").call(yAxis);var s=chart.selectAll("g.groupedbar-group").data(t).enter().append("g").classed("groupedbar-group",!0).attr("width",x0.rangeBand()).attr("height",height).attr("transform",function(t){return"translate("+x0(t.key)+", 0)"}).datum(function(t){return t.values});s.each(function(t){var e=n.chain(t).map(function(t){return t.Bar}).without("").value(),a=n.chain(t).map(function(t){return t.Label}).without("").value(),o=x1.copy().domain(e);a.length>0&&c.attr("transform","translate(0, "+(height+r.bottom/2)+")"),d3.select(this).selectAll("rect.groupdbar-bar").data(t).enter().append("rect").attr("class",function(t){return["groupedbar-bar",colors(t.Bar)].join(" ")}).attr("width",o.rangeBand()).attr("height",function(t){return height-y(t.Value)}).attr("x",function(t){return o(t.Bar)}).attr("y",function(t){return y(t.Value)}),d3.select(this).selectAll("text.groupdbar-value").data(t).enter().append("text").classed("groupdbar-value",!0).text(function(t){return d3.format("0.1f")(t.Value)+"%"}).attr("width",o.rangeBand()).attr("y",function(t){return y(t.Value)}).attr("text-anchor","middle").attr("x",function(t){return o(t.Bar)+o.rangeBand()/2}).attr("dy",-4),d3.select(this).selectAll("text.groupdbar-label").data(t).enter().append("text").classed("groupdbar-label",!0).text(function(t){return t.Label}).attr("width",x1.rangeBand()).attr("y",height).attr("text-anchor","middle").attr("x",function(t){return x1(t.Bar)+x1.rangeBand()/2}).attr("dy",16)})})}a.facet=n.difference(["structure","time"],[a.facet])[0],e=d3.csv.parse(e);var i=n.chain(e).map(function(t){return t.Group}).unique().value(),l=n.chain(e).map(function(t){return t.Bar}).unique().value();yRangeMax=n.chain(e).map(function(t){return+t.Value}).max().value(),e=d3.nest().key(function(t){return t.Group}).entries(e),chartContainer=d3.select(t).append("div").classed("groupedbar-container",!0).append("div").classed("groupedbar-container-internal",!0).datum(e),legendContainer=d3.select(t).append("div").classed({"legend-container":!0,"groupedbar-legend-container":!0}).append("div").classed({"groupedbar-legend-container-internal":!0}).datum(l),o(chartContainer),r(legendContainer)},a}]),angular.module("app").directive("simpletable",function(){var t=tableChart();return{restrict:"E",scope:{data:"=data"},link:function(e,n,a){e.$watchCollection("data",function(e){d3.select(n[0]).datum(e).call(t)})}}}),angular.module("app").service("tableService",["$q","$http","lodash",function(t,e,n){var a={};return a.chart=function(t,e,a){function r(t){t.each(function(t){table=d3.select(this).append("table"),thead=table.append("thead"),tbody=table.append("body"),thead.append("tr").selectAll("th").data(o).enter().append("th").text(function(t){return t})})}a.facet=n.difference(["structure","time"],[a.facet])[0],e=d3.csv.parse(e);var o=[];for(k in e[0])o.push(k);return chartContainer=d3.select(t).append("div").classed("table-container",!0).append("div").classed("table-container-internal",!0).datum(e),void r(chartContainer)},a}]),angular.module("app").service("timeseriesService",["$q","$http","lodash",function(t,e,n){var a={};return a.chart=function(t,e,a){function r(t){t.each(function(t){colors=d3.scale.ordinal().range(["#1EACF1","#B94A48"]).domain(i);var e=d3.select(this).selectAll("div.timeseries-legend-entry").data(t).enter().append("div").classed("timeseries-legend-entry",!0).datum(function(t){return t});e.each(function(t){d3.select(this).append("span").classed("timeseries-legend-entry-color",!0).style("background-color",colors(t)),d3.select(this).append("span").classed("timeseries-legend-entry-label",!0).text(t)})})}function o(t){t.each(function(t){var e=this.getBoundingClientRect(),a={top:.05*e.height,right:.05*e.width,bottom:.1*e.height,left:d3.max([.05*e.width,55])},r=e.width-(a.left+a.right);height=e.height-(a.top+a.bottom),svg=d3.select(this).append("svg").attr("height",e.height).attr("width",e.width),chart=svg.append("g").attr("height",height).attr("width",r).attr("transform","translate("+a.left+", "+a.top+")"),colors=d3.scale.ordinal().range(["#1EACF1","#B94A48"]).domain(i),symbolScale=d3.scale.ordinal().range(d3.svg.symbolTypes).domain(i),timeFormat=d3.time.format("%Y"),timeRange=n.chain(t).map(function(t){return t.Year}).value(),x=d3.time.scale().range([12,r]).domain(d3.extent(timeRange).map(function(t){return timeFormat.parse(t)})),y=d3.scale.linear().range([height,0]).domain(d3.extent(n.chain(t).map(function(t){return i.map(function(e){return+t[e]})}).flatten().unique().value())).nice(5,10),xAxis=d3.svg.axis().scale(x).orient("bottom").ticks(d3.time.year,1),yAxis=d3.svg.axis().scale(y).orient("left").innerTickSize(-r).tickPadding(10).tickFormat(function(t){return d3.format("f")(t)+"%"}),line=d3.svg.line().x(function(t){return x(t.Year)}).y(function(t){return y(t.Value)}),t=i.map(function(e){return{Key:e,Values:n.map(t,function(t){return{Year:timeFormat.parse(t.Year),Value:+t[e]}})}}),chart.append("g").classed({"x-axis":!0,axis:!0}).attr("transform","translate(0, "+height+")").call(xAxis),chart.append("g").classed({"y-axis":!0,axis:!0}).attr("transform","translate(-12, 0)").call(yAxis),chart.selectAll("g.timeseries-lines").data(t).enter().append("g").classed("timeseries-lines",!0).append("path").classed("timeseries-path",!0).attr("d",function(t){return line(t.Values)}).attr("stroke",function(t,e){return colors(t.Key)});var o=t.map(function(t,e,n){return t.Values.map(function(e,n,a){return e.Key=t.Key,e})});o=n.flatten(o),chart.append("g").classed("timeseries-points",!0).selectAll("g").data(o).enter().append("path").attr("stroke",function(t,e){return colors(t.Key)}).attr("d",d3.svg.symbol().type("circle").size(65)).attr("transform",function(t){return"translate("+x(t.Year)+", "+y(t.Value)+")"})})}a.facet=n.difference(["structure","time"],[a.facet])[0],e=d3.csv.parse(e);var i=n.chain(e[0]).keys().filter(function(t){return"Year"!==t}).value();chartContainer=d3.select(t).append("div").classed("timeseries-container",!0).append("div").classed("timeseries-container-internal",!0).datum(e),legendContainer=d3.select(t).append("div").classed({"legend-container":!0,"timeseries-legend-container":!0}),o(chartContainer),legendContainer=d3.select(t).append("div").classed({"legend-container":!0,"timeseries-legend-container":!0}).append("div").classed({"timeseries-legend-container-internal":!0}).datum(i),r(legendContainer)},a}]),angular.module("app").controller("AboutPageController",["$scope","$http","$log","$location","$routeParams","sidebarDisplay","contributors",function(t,e,n,a,r,o,i){t.toggle=o.toggle;var l=i.getContributors("all");l.then(function(e){t.contributors=i.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!1,o.section="Introduction",t.nextSection="Civic Engagement",t.nextSectionTeaser="Testing",t.nextSectionURL="#/civic-engagement"})}]),angular.module("app").controller("CallToActionPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,a,r){t.toggle=r.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,r.section="Call To Action"})}]),angular.module("app").controller("CohesionPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,a,r){t.toggle=r.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,r.section="Social Networks and Community Cohesion",t.nextSection="Institutional Presence",t.nextSectionTeaser="Stuff about institutions",t.nextSectionURL="#/institutional-presence"})}]),angular.module("app").controller("EngagementPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,a,r){t.toggle=r.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,r.section="Civic Engagement",t.nextSection="Political Participation",t.nextSectionTeaser="Stuff about political participation",t.nextSectionURL="#/political-participation"})}]),angular.module("app").controller("ParticipationPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,a,r){t.toggle=r.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,r.section="Political Participation",t.nextSection="Community Cohesion",t.nextSectionTeaser="Stuff about cohesion",t.nextSectionURL="#/community-cohesion"})}]),angular.module("app").controller("PartnersPageController",["$scope","$http","$log","$location","$routeParams","sidebarDisplay","contributors",function(t,e,n,a,r,o,i){t.toggle=o.toggle;var l=i.getContributors("all");l.then(function(e){t.contributors=i.list},function(t){alert("promise rejected!")}),t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,o.section="Partners",t.nextSection="Raw Data",t.nextSectionTeaser="Stuff about raw data",t.nextSectionURL="#/raw-data"})}]),angular.module("app").controller("InstitutionPageController",["$scope","$http","$log","$location","sidebarDisplay",function(t,e,n,a,r){t.toggle=r.toggle,t.$on("$viewContentLoaded",function(e){t.toggle.open=!0,r.section="Institutional Presence",t.nextSection="Call to Action",t.nextSectionTeaser="Stuff about call to action",t.nextSectionURL="#/call-to-action"})}]),angular.module("app").service("categories",["$http","$q","lodash",function(t,e,n){var a={};return a.list=[],a.toggle=function(t){position=n.findIndex(a.list,function(e){return e.name==t.name}),a.list[position].selected=!a.list[position].selected},a.getCategories=function(){return e(a.list.length>0?function(t){t(a)}:function(e,r){t.get("/static/dist/data/data.json").success(function(t){list=n.map(n.sortBy(t,"rank"),function(t){return t.data.forEach(function(e,a,r){t.data[a].data=n.sortByAll(t.data[a].data,"rank")}),t=n.extend({},t,{selected:!0})}),a.list=list,e(a)}).error(function(){r("There was an error getting categories")})})},a}]),angular.module("app").service("contributors",["$http","$q",function(t,e){var n={};return n.list=[],n.getContributors=function(){return e(n.list.length>0?function(t){t(n)}:function(e,a){t.get("/static/dist/data/contributors.json").success(function(t){n.list=t,e(n)}).error(function(){a("There was an error getting contributors")})})},n}]),angular.module("app").controller("SidebarController",["$scope","$log","lodash","categories","contributors",function(t,e,n,a,r){var o=a.getCategories();o.then(function(e){t.categories=a.list},function(t){alert("promise rejected!")});var i=r.getContributors();i.then(function(e){t.contributors=r.list},function(t){alert("promise rejected!")}),t.updateSelected=function(t){a.toggle(t)},t.checkSelected=function(t){return t?"selected":"deselected"},t.$watchCollection(function(){return t.toggle},function(){console.log("toggled triggered from sidebar"),console.log(t.toggle)})}]),angular.module("app").service("sidebarDisplay",function(){return{toggle:{open:!0},section:"Introduction"}}),angular.module("app").controller("WrapController",["$scope","sidebarDisplay",function(t,e){t.toggle=e.toggle,t.section=e.section,t.$watchCollection(function(){return t.toggle},function(){console.log("toggled triggered from wrap"),console.log(t.toggle)}),t.$watchCollection(function(){return e.section},function(){t.section=e.section})}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1vZHVsZS5qcyIsInJvdXRlcy5qcyIsImZpbHRlcnMuanMiLCJkYXRhdml6L2JhckNoYXJ0U2VydmljZS5zZXJ2aWNlLmpzIiwiZGF0YXZpei9kYXRhdml6LmNvbnRyb2xsZXIuanMiLCJkYXRhdml6L2RhdGF2aXouZGlyZWN0aXZlLmpzIiwiZGF0YXZpei9ncm91cGVkQmFyQ2hhcnQuc2VydmljZS5qcyIsImRhdGF2aXovc2ltcGxldGFibGUuZGlyZWN0aXZlLmpzIiwiZGF0YXZpei90YWJsZS5zZXJ2aWNlLmpzIiwiZGF0YXZpei90aW1lc2VyaWVzLnNlcnZpY2UuanMiLCJwYWdlcy9hYm91dHBhZ2UuY29udHJvbGxlci5qcyIsInBhZ2VzL2NhbGx0b2FjdGlvbi5jb250cm9sbGVyLmpzIiwicGFnZXMvY29oZXNpb24uY29udHJvbGxlci5qcyIsInBhZ2VzL2VuZ2FnZW1lbnQuY29udHJvbGxlci5qcyIsInBhZ2VzL3BhcnRpY2lwYXRpb24uY29udHJvbGxlci5qcyIsInBhZ2VzL3BhcnRuZXJzLmNvbnRyb2xsZXJzLmpzIiwicGFnZXMvcHJlc2VuY2UuY29udHJvbGxlci5qcyIsInNpZGViYXIvY2F0ZWdvcmllcy5zZXJ2aWNlLmpzIiwic2lkZWJhci9jb250cmlidXRvcnMuc2VydmljZS5qcyIsInNpZGViYXIvc2lkZWJhci5jb250cm9sbGVyLmpzIiwic2lkZWJhci9zaWRlYmFyZGlzcGxheS5zZXJ2aWNlLmpzIiwic2lkZWJhci93cmFwLmNvbnRyb2xsZXIuanMiXSwibmFtZXMiOlsiYXBwIiwiYW5ndWxhciIsIm1vZHVsZSIsImNvbmZpZyIsIiRyb3V0ZVByb3ZpZGVyIiwiJGxvY2F0aW9uUHJvdmlkZXIiLCJ3aGVuIiwidGVtcGxhdGVVcmwiLCJjb250cm9sbGVyIiwib3RoZXJ3aXNlIiwicmVkaXJlY3RUbyIsImZpbHRlciIsImlucHV0Iiwic3RyIiwicGFyc2VJbnQiLCJsb2Rhc2giLCJhcnIiLCJzdXBwcmVzc2lvbiIsImZsYXR0ZW5EZWVwIiwicGx1Y2siLCJzb21lIiwibyIsInZhbHVlcyIsImluZGV4T2YiLCJwcm9wIiwidG9Mb3dlckNhc2UiLCJyZXBsYWNlIiwiJHNjZSIsInRydXN0QXNIdG1sIiwic2VydmljZSIsIiRxIiwiJGh0dHAiLCJiYXJDaGFydFNlcnZpY2UiLCJjaGFydCIsImNvbnRhaW5lciIsImRhdGEiLCJtYWtlYmFyY2hhcnRDaGFydCIsInNlbGVjdGlvbiIsIndyYXAiLCJ0ZXh0Iiwid2lkdGgiLCJlYWNoIiwid29yZCIsImQzIiwic2VsZWN0IiwidGhpcyIsIndvcmRzIiwic3BsaXQiLCJyZXZlcnNlIiwibGluZSIsImxpbmVOdW1iZXIiLCJsaW5lSGVpZ2h0IiwieSIsImF0dHIiLCJkeSIsInBhcnNlRmxvYXQiLCJ0c3BhbiIsImFwcGVuZCIsInBvcCIsInB1c2giLCJqb2luIiwibm9kZSIsImdldENvbXB1dGVkVGV4dExlbmd0aCIsIkJCb3giLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJtYXJnaW4iLCJ0b3AiLCJoZWlnaHQiLCJyaWdodCIsImJvdHRvbSIsImxlZnQiLCJtYXgiLCJzdmciLCJ4Iiwic2NhbGUiLCJvcmRpbmFsIiwicmFuZ2VSb3VuZEJhbmRzIiwiZG9tYWluIiwiYmFyS2V5cyIsImxpbmVhciIsInJhbmdlIiwieVJhbmdlTWF4IiwibmljZSIsInhBeGlzIiwiYXhpcyIsIm9yaWVudCIsInlBeGlzIiwiaW5uZXJUaWNrU2l6ZSIsInRpY2tQYWRkaW5nIiwidGlja0Zvcm1hdCIsInQiLCJmb3JtYXQiLCJ4QXhpc0dyb3VwIiwiY2xhc3NlZCIsIngtYXhpcyIsImNhbGwiLCJzZWxlY3RBbGwiLCJyYW5nZUJhbmQiLCJ5LWF4aXMiLCJlbnRlciIsImQiLCJpIiwiY29sb3JDbGFzcyIsIlZhbHVlIiwiQmFyIiwiZmFjZXQiLCJkaWZmZXJlbmNlIiwiY3N2IiwicGFyc2UiLCJjaGFpbiIsIm1hcCIsInVuaXF1ZSIsInZhbHVlIiwiY2hhcnRDb250YWluZXIiLCJkYXR1bSIsIiRzY29wZSIsIiRsb2ciLCIkbG9jYXRpb24iLCIkZmlsdGVyIiwic2lkZWJhckRpc3BsYXkiLCJjYXRlZ29yaWVzIiwidG9nZ2xlIiwicHJvbWlzZSIsImdldENhdGVnb3JpZXMiLCJ0aGVuIiwicmVzdWx0IiwibGlzdCIsInJlamVjdGlvbiIsImFsZXJ0IiwiJG9uIiwiZXZlbnQiLCJvcGVuIiwic2VjdGlvbiIsImRpcmVjdGl2ZSIsIiR3aW5kb3ciLCJ0aW1lc2VyaWVzU2VydmljZSIsImdyb3VwZWRCYXJDaGFydFNlcnZpY2UiLCJ0YWJsZVNlcnZpY2UiLCJjaGFydHMiLCJiYXIiLCJncm91cGVkQmFyIiwidGFibGUiLCJyZXN0cmljdCIsInNjb3BlIiwid2hpY2giLCJ0eXBlIiwibGluayIsImVsZW1lbnQiLCJhdHRycyIsInJlbmRlciIsImdldCIsIiR3YXRjaENvbGxlY3Rpb24iLCJtYWtlTGVnZW5kIiwibGVnZW5kRGF0YSIsImNvbG9ycyIsImxlZ2VuZEVudHJpZXMiLCJlbnRyeURhdGEiLCJtYWtlR3JvdXBlZEJhckNoYXJ0IiwieDAiLCJncm91cEtleXMiLCJ4MSIsIngwQXhpcyIsIngxQXhpcyIsIngwQXhpc0dyb3VwIiwiYmFyR3JvdXBzIiwia2V5IiwiZ3JvdXBEYXRhIiwidGhpc0dyb3VwQmFycyIsIndpdGhvdXQiLCJ0aGlzR3JvdXBMYWJlbHMiLCJMYWJlbCIsInRoaXNHcm91cFgxIiwiY29weSIsImxlbmd0aCIsIkdyb3VwIiwibmVzdCIsImVudHJpZXMiLCJsZWdlbmRDb250YWluZXIiLCJsZWdlbmQtY29udGFpbmVyIiwiZ3JvdXBlZGJhci1sZWdlbmQtY29udGFpbmVyIiwiZ3JvdXBlZGJhci1sZWdlbmQtY29udGFpbmVyLWludGVybmFsIiwidGFibGVDaGFydCIsIm1ha2VUYWJsZSIsInRoZWFkIiwidGJvZHkiLCJjb2x1bW5LZXlzIiwiayIsImxpbmVLZXlzIiwic3R5bGUiLCJtYWtlVGltZVNlcmllcyIsInN5bWJvbFNjYWxlIiwic3ltYm9sVHlwZXMiLCJ0aW1lRm9ybWF0IiwidGltZSIsInRpbWVSYW5nZSIsIlllYXIiLCJleHRlbnQiLCJmbGF0dGVuIiwidGlja3MiLCJ5ZWFyIiwiS2V5IiwiVmFsdWVzIiwicG9pbnREYXRhIiwiZGkiLCJkYSIsInYiLCJ2aSIsInZhIiwic3ltYm9sIiwic2l6ZSIsImtleXMiLCJ0aW1lc2VyaWVzLWxlZ2VuZC1jb250YWluZXIiLCJ0aW1lc2VyaWVzLWxlZ2VuZC1jb250YWluZXItaW50ZXJuYWwiLCIkcm91dGVQYXJhbXMiLCJjb250cmlidXRvcnMiLCJjb250cmlidXRvclByb21pc2UiLCJnZXRDb250cmlidXRvcnMiLCJuZXh0U2VjdGlvbiIsIm5leHRTZWN0aW9uVGVhc2VyIiwibmV4dFNlY3Rpb25VUkwiLCJjYXRlZ29yeSIsInBvc2l0aW9uIiwiZmluZEluZGV4IiwibGlzdGNhdCIsIm5hbWUiLCJzZWxlY3RlZCIsInJlc29sdmUiLCJyZWplY3QiLCJzdWNjZXNzIiwicmVzcG9uc2UiLCJzb3J0QnkiLCJmb3JFYWNoIiwiaW5kaWNhdG9yIiwiaWkiLCJpYSIsInNvcnRCeUFsbCIsImV4dGVuZCIsImVycm9yIiwiY2F0ZWdvcnlQcm9taXNlIiwidXBkYXRlU2VsZWN0ZWQiLCJjaGVja1NlbGVjdGVkIiwiYm9vbCIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiJBQUFBLEdBQUFBLEtBQUFDLFFBQUFDLE9BQUEsT0FDQSxZQUNBLGVBQ0EsV0FDQSxXQ0pBRCxTQUFBQyxPQUFBLE9BQ0FDLFFBQUEsaUJBQUEsb0JBQUEsU0FBQUMsRUFBQUMsR0FDQUQsRUFDQUUsS0FBQSxpQkFDQUMsWUFBQSwwQ0FDQUMsV0FBQSx3QkFFQUYsS0FBQSxxQkFDQUMsWUFBQSw4Q0FDQUMsV0FBQSw2QkFFQUYsS0FBQSw0QkFDQUMsWUFBQSxxREFDQUMsV0FBQSxnQ0FFQUYsS0FBQSx1QkFDQUMsWUFBQSxnREFDQUMsV0FBQSwyQkFFQUYsS0FBQSwyQkFDQUMsWUFBQSxvREFDQUMsV0FBQSw4QkFFQUYsS0FBQSxtQkFDQUMsWUFBQSw0Q0FDQUMsV0FBQSwrQkFFQUYs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QSxrQ0FDQUQsUUFBQUMsSUFBQWhJLEVBQUFNLGFDdkNBeEgsUUFBQUMsT0FBQSxPQUNBMkIsUUFBQSxpQkFBQSxXQUNBLE9BQ0E0RixRQUFBVSxNQUFBLEdBQ0FDLFFBQUEsa0JDSkFuSSxRQUFBQyxPQUFBLE9BQ0FNLFdBQUEsa0JBQUEsU0FBQSxpQkFBQSxTQUFBMkcsRUFBQUksR0FDQUosRUFBQU0sT0FBQUYsRUFBQUUsT0FDQU4sRUFBQWlCLFFBQUFiLEVBQUFhLFFBRUFqQixFQUFBb0MsaUJBQUEsV0FDQSxNQUFBcEMsR0FBQU0sUUFDQSxXQUNBeUgsUUFBQUMsSUFBQSwrQkFDQUQsUUFBQUMsSUFBQWhJLEVBQUFNLFVBSUFOLEVBQUFvQyxpQkFBQSxXQUNBLE1BQUFoQyxHQUFBYSxTQUNBLFdBQ0FqQixFQUFBaUIsUUFBQWIsRUFBQWEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsidmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLCBbXG4gICAgJ25nQW5pbWF0ZScsXG4gICAgJ3VpLmJvb3RzdHJhcCcsXG4gICAgJ25nTG9kYXNoJyxcbiAgICAnbmdSb3V0ZSdcbiAgICBdKTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbmZpZyhmdW5jdGlvbigkcm91dGVQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcbiAgICAkcm91dGVQcm92aWRlclxuICAgICAgICAud2hlbignL2ludHJvZHVjdGlvbicsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3RhdGljL2Rpc3QvdGVtcGxhdGVzL2ludHJvZHVjdGlvbi5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdBYm91dFBhZ2VDb250cm9sbGVyJ1xuICAgICAgICB9KVxuICAgICAgICAud2hlbignL2NpdmljLWVuZ2FnZW1lbnQnLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0YXRpYy9kaXN0L3RlbXBsYXRlcy9jaXZpYy1lbmdhZ2VtZW50Lmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ0VuZ2FnZW1lbnRQYWdlQ29udHJvbGxlcidcbiAgICAgICAgfSlcbiAgICAgICAgLndoZW4oJy9wb2xpdGljYWwtcGFydGljaXBhdGlvbicsIHtcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc3RhdGljL2Rpc3QvdGVtcGxhdGVzL3BvbGl0aWNhbC1wYXJ0aWNpcGF0aW9uLmh0bWwnLFxuICAgICAgICAgICAgY29udHJvbGxlcjogJ1BhcnRpY2lwYXRpb25QYWdlQ29udHJvbGxlcidcbiAgICAgICAgfSlcbiAgICAgICAgLndoZW4oJy9jb21tdW5pdHktY29oZXNpb24nLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0YXRpYy9kaXN0L3RlbXBsYXRlcy9jb21tdW5pdHktY29oZXNpb24uaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQ29oZXNpb25QYWdlQ29udHJvbGxlcidcbiAgICAgICAgfSlcbiAgICAgICAgLndoZW4oJy9pbnN0aXR1dGlvbmFsLXByZXNlbmNlJywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdGF0aWMvZGlzdC90ZW1wbGF0ZXMvaW5zdGl0dXRpb25hbC1wcmVzZW5jZS5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdJbnN0aXR1dGlvblBhZ2VDb250cm9sbGVyJ1xuICAgICAgICB9KVxuICAgICAgICAud2hlbignL2NhbGwtdG8tYWN0aW9uJywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdGF0aWMvZGlzdC90ZW1wbGF0ZXMvY2FsbC10by1hY3Rpb24uaHRtbCcsXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnQ2FsbFRvQWN0aW9uUGFnZUNvbnRyb2xsZXInXG4gICAgICAgIH0pXG4gICAgICAgIC53aGVuKCcvcGFydG5lcnMnLCB7XG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3N0YXRpYy9kaXN0L3RlbXBsYXRlcy9wYXJ0bmVycy5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdQYXJ0bmVyc1BhZ2VDb250cm9sbGVyJ1xuICAgICAgICB9KVxuICAgICAgICAud2hlbignL3Jhdy1kYXRhJywge1xuICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzdGF0aWMvZGlzdC90ZW1wbGF0ZXMvZGF0YS5odG1sJyxcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdEYXRhVml6Q29udHJvbGxlcidcbiAgICAgICAgfSlcbiAgICAgICAgLm90aGVyd2lzZSh7XG4gICAgICAgICAgICByZWRpcmVjdFRvOiAnL2ludHJvZHVjdGlvbidcbiAgICAgICAgfSk7XG59KTtcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmZpbHRlcignc3VwcHJlc3Npb25zJywgZnVuY3Rpb24oKSB7XG4gIHJldHVybiBmdW5jdGlvbihpbnB1dCkge1xuICAgIGlmIChpbnB1dCA9PT0gXCItOSw5OTkuMFwiIHx8IGlucHV0ID09PSBcIi05OTk5XCIpIHtcbiAgICAgICAgcmV0dXJuICcmZGRhZ2dlcjsnO1xuICAgIH0gZWxzZSBpZiAoaW5wdXQgPT09IFwiLTY2Niw2NjYuMFwiIHx8IGlucHV0ID09PSBcIi02NjY2NjZcIikge1xuICAgICAgICByZXR1cm4gJyZkYWdnZXI7JztcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaW5wdXQ7XG4gICAgfVxuICB9O1xufSlcbi5maWx0ZXIoJ3BlcmNlbnQnLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oc3RyKSB7XG4gICAgICAgIGlmIChwYXJzZUludChzdHIpID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0ciArIFwiJVwiO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgICAgfVxuICAgIH1cbn0pXG4uZmlsdGVyKCdhbnlTdXBwcmVzc2VkJywgWydsb2Rhc2gnLCBmdW5jdGlvbihsb2Rhc2gpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXJyLCBzdXBwcmVzc2lvbikge1xuICAgICAgICBhcnIgPSBsb2Rhc2guZmxhdHRlbkRlZXAobG9kYXNoLnBsdWNrKGFyciwgXCJkYXRhXCIpKTtcblxuICAgICAgICBpZiAodHlwZW9mIHN1cHByZXNzaW9uICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhcImNoZWNraW5nIHN1cHByZXNzaW9uOiBcIitzdXBwcmVzc2lvbik7XG4gICAgICAgICAgICByZXR1cm4gbG9kYXNoLnNvbWUoYXJyLCBmdW5jdGlvbihvKSB7XG4gICAgICAgICAgICAgICAgbyA9IGxvZGFzaC52YWx1ZXMobyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvZGFzaC5pbmRleE9mKG8sIHN1cHByZXNzaW9uKSAhPT0gLTE7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGFzc3VtZSB0byBjaGVjayBlaXRoZXIgc3VwcHJlc3Npb25cbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiY2hlY2tpbmcgYm90aCBzdXBwcmVzc2lvbiB0eXBlc1wiKTtcbiAgICAgICAgICAgIHJldHVybiBsb2Rhc2guc29tZShhcnIsIGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgICAgICAgICBvID0gbG9kYXNoLnZhbHVlcyhvKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9kYXNoLmluZGV4T2YobywgJy02NjY2NjYnKSAhPT0gLTEgfHwgbG9kYXNoLmluZGV4T2YobywgJy05OTk5JykgIT09IC0xO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XSlcbi5maWx0ZXIoJ2FueScsIFsnbG9kYXNoJywgZnVuY3Rpb24obG9kYXNoKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKGFyciwgcHJvcCkge1xuICAgICAgICBpZiAodHlwZW9mIHByb3AgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2Rhc2guc29tZShhcnIsIHByb3ApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gbG9kYXNoLnNvbWUoYXJyKVxuICAgICAgICB9XG4gICAgfVxufV0pXG4uZmlsdGVyKCdub25lJywgWydsb2Rhc2gnLCBmdW5jdGlvbihsb2Rhc2gpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oYXJyLCBwcm9wKSB7XG4gICAgICAgIGlmICh0eXBlb2YgcHJvcCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICAgICAgcmV0dXJuICFsb2Rhc2guc29tZShhcnIsIHByb3ApXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gIWxvZGFzaC5zb21lKGFycilcbiAgICAgICAgfVxuICAgIH1cbn1dKVxuLmZpbHRlcignc2x1Z2dpZnknLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0LnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvW15hLXpBLVowLTlfXS9nLCBcIl9cIilcbiAgICB9O1xufSlcbi5maWx0ZXIoJ3NhZmUnLCBbJyRzY2UnLCBmdW5jdGlvbigkc2NlKSB7XG4gICAgcmV0dXJuICRzY2UudHJ1c3RBc0h0bWw7XG59XSk7IiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uc2VydmljZSgnYmFyQ2hhcnRTZXJ2aWNlJywgWyckcScsICckaHR0cCcsICdsb2Rhc2gnLCBmdW5jdGlvbigkcSwgJGh0dHAsIGxvZGFzaCkge1xuICAgIHZhciBiYXJDaGFydFNlcnZpY2UgPSB7fTtcblxuICAgIGJhckNoYXJ0U2VydmljZS5jaGFydCA9IGZ1bmN0aW9uKGNvbnRhaW5lciwgZGF0YSwgY29uZmlnKSB7XG4gICAgICAgIHZhciB0aW1lRm9ybWF0cyA9IHtcbiAgICAgICAgICAgIFwieWVhclwiIDogXCJZWVlZXCIsXG4gICAgICAgICAgICBcInF1YXJ0ZXJcIiA6IFwiW1FdUSBZWVlZXCIsXG4gICAgICAgICAgICBcIm1vbnRoXCIgOiBcIk1NTSBZWVlZXCJcbiAgICAgICAgfTtcblxuICAgICAgICBjb25maWcuZmFjZXQgPSBsb2Rhc2guZGlmZmVyZW5jZShbXCJzdHJ1Y3R1cmVcIiwgXCJ0aW1lXCJdLCBbY29uZmlnLmZhY2V0XSlbMF1cblxuICAgICAgICAvLyBjb252ZXJ0IGRhdGEgZnJvbSBzdHJpbmcgLT4gYXJyYXkgb2Ygb2JqXG4gICAgICAgIGRhdGEgPSBkMy5jc3YucGFyc2UoZGF0YSk7XG5cbiAgICAgICAgdmFyIGJhcktleXMgPWxvZGFzaC5jaGFpbihkYXRhKVxuICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5CYXI7IH0pXG4gICAgICAgICAgICAgICAgLnVuaXF1ZSgpXG4gICAgICAgICAgICAgICAgLnZhbHVlKClcbiAgICAgICAgICAgIHlSYW5nZU1heCA9IGxvZGFzaC5jaGFpbihkYXRhKVxuICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24oZCkgeyByZXR1cm4gK2QuVmFsdWU7IH0pXG4gICAgICAgICAgICAgICAgLm1heCgpXG4gICAgICAgICAgICAgICAgLnZhbHVlKCk7XG5cbiAgICAgICAgLy8gY3JlYXRlIGNvbnRhaW5lciBmb3IgbWFwc1xuICAgICAgICBjaGFydENvbnRhaW5lciA9IGQzLnNlbGVjdChjb250YWluZXIpXG4gICAgICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJiYXJjaGFydC1jb250YWluZXJcIiwgdHJ1ZSlcbiAgICAgICAgICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgICAgICAgICAuY2xhc3NlZChcImJhcmNoYXJ0LWNvbnRhaW5lci1pbnRlcm5hbFwiLCB0cnVlKVxuICAgICAgICAgICAgICAgIC5kYXR1bShkYXRhKTtcblxuICAgICAgICAvLyBjaGFydENvbnRhaW5lci5hcHBlbmQoXCJwcmVcIilcbiAgICAgICAgICAgIC8vIC50ZXh0KEpTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIDQpKTtcbiAgICAgICAgICAgIC8vIC50ZXh0KEpTT04uc3RyaW5naWZ5KHlSYW5nZU1heCwgbnVsbCwgNCkpO1xuICAgICAgICAgICAgLy8gLnRleHQoSlNPTi5zdHJpbmdpZnkoYmFyS2V5cywgbnVsbCwgNCkpO1xuICAgICAgICAgICAgLy8gLnRleHQoSlNPTi5zdHJpbmdpZnkoY29uZmlnLCBudWxsLCA0KSk7XG4gICAgICAgIC8vIHJldHVybjtcblxuICAgICAgICBtYWtlYmFyY2hhcnRDaGFydChjaGFydENvbnRhaW5lcik7XG5cbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICAgIC8vIC8qKiBTVEFSVCBTQ1JPTEwgTk9USUNFICoqL1xuICAgICAgICAvLyAvLyBpZiB3ZSBhcmUgdW5kZXIgYSBjZXJ0YWluIHBpeGVsIHNpemUsIHRoZXJlIHdpbGwgYmUgaG9yaXpvbnRhbCBzY3JvbGxpbmdcbiAgICAgICAgLy8gdmFyIGludGVybmFsQ29udGFpbmVyU2l6ZSA9IGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdChcImRpdi5iYXJjaGFydC1jb250YWluZXItaW50ZXJuYWxcIikubm9kZSgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAvLyAgICAgY29udGFpbmVyU2l6ZSA9IGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdChcImRpdi5iYXJjaGFydC1jb250YWluZXJcIikubm9kZSgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIC8vIC8vIGNvbnNvbGUubG9nKGludGVybmFsQ29udGFpbmVyU2l6ZS53aWR0aCArIFwiIC8gXCIgKyBjb250YWluZXJTaXplLndpZHRoKVxuICAgICAgICAvLyBpZiAoaW50ZXJuYWxDb250YWluZXJTaXplLndpZHRoID4gY29udGFpbmVyU2l6ZS53aWR0aCkge1xuICAgICAgICAvLyAgICAgLy8gY29uc29sZS5sb2coXCJzY3JvbGwgTm90aWNlIVwiKVxuICAgICAgICAvLyAgICAgLy8gY3JlYXRlIHNjcm9sbCBub3RpY2VcbiAgICAgICAgLy8gICAgIHZhciBzY3JvbGxOb3RpY2UgPSBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3QoXCJkaXYuYmFyY2hhcnQtY29udGFpbmVyXCIpLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAvLyAgICAgICAgIC5jbGFzc2VkKFwic2Nyb2xsLW5vdGljZVwiLCB0cnVlKVxuICAgICAgICAvLyAgICAgICAgIC5hcHBlbmQoXCJwXCIpO1xuXG4gICAgICAgIC8vICAgICBzY3JvbGxOb3RpY2UuYXBwZW5kKFwiaVwiKVxuICAgICAgICAvLyAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICAgICAgXCJmYVwiIDogdHJ1ZSxcbiAgICAgICAgLy8gICAgICAgICAgICAgXCJmYS1hbmdsZS1kb3VibGUtZG93biBcIiA6IHRydWVcbiAgICAgICAgLy8gICAgICAgICB9KTtcblxuICAgICAgICAvLyAgICAgc2Nyb2xsTm90aWNlLmFwcGVuZChcInNwYW5cIilcbiAgICAgICAgLy8gICAgICAgICAudGV4dChcIlNjcm9sbCBmb3IgbW9yZVwiKTtcblxuICAgICAgICAvLyAgICAgc2Nyb2xsTm90aWNlLmFwcGVuZChcImlcIilcbiAgICAgICAgLy8gICAgICAgICAuY2xhc3NlZCh7XG4gICAgICAgIC8vICAgICAgICAgICAgIFwiZmFcIiA6IHRydWUsXG4gICAgICAgIC8vICAgICAgICAgICAgIFwiZmEtYW5nbGUtZG91YmxlLWRvd24gXCIgOiB0cnVlXG4gICAgICAgIC8vICAgICAgICAgfSk7XG4gICAgICAgIC8vIH1cblxuICAgICAgICAvLyBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJkaXYuYmFyY2hhcnQtY29udGFpbmVyXCIpLm9uKFwic2Nyb2xsXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyAgICAgLy8gaWYgc2Nyb2xsIGF0IGJvdHRvbSwgaGlkZSBzY3JvbGwgbm90aWNlXG4gICAgICAgIC8vICAgICAvLyB1c2luZyBhIGRpZmZlcmVudCBjbGFzcyBzbyBhcyBub3QgdG8gaW50ZXJmZXJlIHdpdGggdGhlIG1vdXNlb3ZlciBlZmZlY3RzXG4gICAgICAgIC8vICAgICBpZiAoKGQzLnNlbGVjdCh0aGlzKS5ub2RlKCkuc2Nyb2xsTGVmdCArIGQzLnNlbGVjdCh0aGlzKS5ub2RlKCkub2Zmc2V0V2lkdGgpID49IChkMy5zZWxlY3QodGhpcykubm9kZSgpLnNjcm9sbFdpZHRoICogMC45NzUpKSB7XG4gICAgICAgIC8vICAgICAgICAgZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0QWxsKFwiZGl2LnNjcm9sbC1ub3RpY2VcIilcbiAgICAgICAgLy8gICAgICAgICAgICAgLmNsYXNzZWQoe1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgXCJoaWRkZW5cIiA6IHRydWVcbiAgICAgICAgLy8gICAgICAgICAgICAgfSk7XG4gICAgICAgIC8vICAgICB9IGVsc2Uge1xuICAgICAgICAvLyAgICAgICAgIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImRpdi5zY3JvbGwtbm90aWNlXCIpXG4gICAgICAgIC8vICAgICAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIFwiaGlkZGVuXCIgOiBmYWxzZVxuICAgICAgICAvLyAgICAgICAgICAgICB9KTtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfSlcbiAgICAgICAgLy8gLyoqIEVORCBTQ1JPTEwgTk9USUNFICoqL1xuXG4gICAgICAgIC8vIC8vIGFkZCBob3ZlciBlZmZlY3RzIC0gdXNlIGNsYXNzZXMgXCJoaWdobGlnaHRcIiBhbmQgXCJsb3dsaWdodFwiXG4gICAgICAgIC8vIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImcuZW50cnksIGcuYmFyY2hhcnQtbGluZXMgPiBwYXRoLCBnLmJhcmNoYXJ0LXBvaW50cyA+IHBhdGhcIilcbiAgICAgICAgLy8gLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vICAgICB2YXIgY2xhc3NUb0hpZ2hsaWdodCA9IGQzLnNlbGVjdCh0aGlzKS5hdHRyKFwiZGF0YS1jbGFzc1wiKTtcblxuICAgICAgICAvLyAgICAgLy8gbG93bGlnaHQgYWxsIGVsZW1lbnRzXG4gICAgICAgIC8vICAgICBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJnLmVudHJ5LCBnLmJhcmNoYXJ0LWxpbmVzID4gcGF0aCwgZy5iYXJjaGFydC1wb2ludHMgPiBwYXRoLCBkaXYuc2Nyb2xsLW5vdGljZVwiKVxuICAgICAgICAvLyAgICAgLmNsYXNzZWQoe1xuICAgICAgICAvLyAgICAgICAgIFwibG93bGlnaHRcIiA6IHRydWUsXG4gICAgICAgIC8vICAgICAgICAgXCJoaWdobGlnaHRcIiA6IGZhbHNlXG4gICAgICAgIC8vICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAvLyAgICAgLy8gaGlnaGxpZ2h0IGFsbCBlbGVtZW50cyB3aXRoIG1hdGNoaW5nIGRhdGEtY2xhc3NcbiAgICAgICAgLy8gICAgIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImcuZW50cnkuXCIrY2xhc3NUb0hpZ2hsaWdodCtcIiwgZy5iYXJjaGFydC1saW5lcyA+IHBhdGguXCIrY2xhc3NUb0hpZ2hsaWdodCtcIiwgZy5iYXJjaGFydC1wb2ludHMgcGF0aC5cIitjbGFzc1RvSGlnaGxpZ2h0KVxuICAgICAgICAvLyAgICAgLmNsYXNzZWQoe1xuICAgICAgICAvLyAgICAgICAgIFwibG93bGlnaHRcIiA6IGZhbHNlLFxuICAgICAgICAvLyAgICAgICAgIFwiaGlnaGxpZ2h0XCIgOiB0cnVlXG4gICAgICAgIC8vICAgICB9KTtcbiAgICAgICAgLy8gfSlcbiAgICAgICAgLy8gLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgLy8gICAgIC8vIHJlbW92ZSBhbGwgaGlnaGxpZ2h0L2xvd2xpZ2h0IGNsYXNzZXNcbiAgICAgICAgLy8gICAgIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImcuZW50cnksIGcuYmFyY2hhcnQtbGluZXMgPiBwYXRoLCBnLmJhcmNoYXJ0LXBvaW50cyA+IHBhdGgsIGRpdi5zY3JvbGwtbm90aWNlXCIpXG4gICAgICAgIC8vICAgICAuY2xhc3NlZCh7XG4gICAgICAgIC8vICAgICAgICAgXCJsb3dsaWdodFwiIDogZmFsc2UsXG4gICAgICAgIC8vICAgICAgICAgXCJoaWdobGlnaHRcIiA6IGZhbHNlXG4gICAgICAgIC8vICAgICB9KTtcbiAgICAgICAgLy8gfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gbWFrZWJhcmNoYXJ0Q2hhcnQoc2VsZWN0aW9uKSB7XG4gICAgICAgICAgICAvLyBoZWxwZXIgZnVuY3Rpb24sIHdyYXBzIHRleHQgZm9yIGF4aXMgbGFiZWxzXG4gICAgICAgICAgICBmdW5jdGlvbiB3cmFwKHRleHQsIHdpZHRoKSB7XG4gICAgICAgICAgICAgIHRleHQuZWFjaChmdW5jdGlvbigpIHtcbiAgICAgICAgICAgICAgICB2YXIgdGV4dCA9IGQzLnNlbGVjdCh0aGlzKSxcbiAgICAgICAgICAgICAgICAgICAgd29yZHMgPSB0ZXh0LnRleHQoKS5zcGxpdCgvXFxzKy8pLnJldmVyc2UoKSxcbiAgICAgICAgICAgICAgICAgICAgd29yZCxcbiAgICAgICAgICAgICAgICAgICAgbGluZSA9IFtdLFxuICAgICAgICAgICAgICAgICAgICBsaW5lTnVtYmVyID0gMCxcbiAgICAgICAgICAgICAgICAgICAgbGluZUhlaWdodCA9IDEuMSwgLy8gZW1zXG4gICAgICAgICAgICAgICAgICAgIHkgPSB0ZXh0LmF0dHIoXCJ5XCIpLFxuICAgICAgICAgICAgICAgICAgICBkeSA9IHBhcnNlRmxvYXQodGV4dC5hdHRyKFwiZHlcIikpLFxuICAgICAgICAgICAgICAgICAgICB0c3BhbiA9IHRleHQudGV4dChudWxsKS5hcHBlbmQoXCJ0c3BhblwiKS5hdHRyKFwieFwiLCAwKS5hdHRyKFwieVwiLCB5KS5hdHRyKFwiZHlcIiwgZHkgKyBcImVtXCIpO1xuICAgICAgICAgICAgICAgIHdoaWxlICh3b3JkID0gd29yZHMucG9wKCkpIHtcbiAgICAgICAgICAgICAgICAgIGxpbmUucHVzaCh3b3JkKTtcbiAgICAgICAgICAgICAgICAgIHRzcGFuLnRleHQobGluZS5qb2luKFwiIFwiKSk7XG4gICAgICAgICAgICAgICAgICBpZiAodHNwYW4ubm9kZSgpLmdldENvbXB1dGVkVGV4dExlbmd0aCgpID4gd2lkdGgpIHtcbiAgICAgICAgICAgICAgICAgICAgbGluZS5wb3AoKTtcbiAgICAgICAgICAgICAgICAgICAgdHNwYW4udGV4dChsaW5lLmpvaW4oXCIgXCIpKTtcbiAgICAgICAgICAgICAgICAgICAgbGluZSA9IFt3b3JkXTtcbiAgICAgICAgICAgICAgICAgICAgdHNwYW4gPSB0ZXh0LmFwcGVuZChcInRzcGFuXCIpLmF0dHIoXCJ4XCIsIDApLmF0dHIoXCJ5XCIsIHkpLmF0dHIoXCJkeVwiLCArK2xpbmVOdW1iZXIgKiBsaW5lSGVpZ2h0ICsgZHkgKyBcImVtXCIpLnRleHQod29yZCk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgc2VsZWN0aW9uLmVhY2goZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIHNpemluZyBhbmQgbWFyZ2luIHZhcnNcbiAgICAgICAgICAgICAgICB2YXIgQkJveCA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidG9wXCIgOiBCQm94LmhlaWdodCAqIDAuMDUsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInJpZ2h0XCIgOiBCQm94LndpZHRoICogMC4wNSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYm90dG9tXCIgOiBCQm94LmhlaWdodCAqIDAuMixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGVmdFwiIDogZDMubWF4KFtCQm94LndpZHRoICogMC4wNSwgNTVdKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IEJCb3gud2lkdGggLSAobWFyZ2luLmxlZnQgKyBtYXJnaW4ucmlnaHQpXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IEJCb3guaGVpZ2h0IC0gKG1hcmdpbi50b3AgKyBtYXJnaW4uYm90dG9tKSxcblxuICAgICAgICAgICAgICAgICAgICAvLyBjb250YWluZXJzXG4gICAgICAgICAgICAgICAgICAgIHN2ZyA9IGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIEJCb3guaGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBCQm94LndpZHRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCwgMClcIiksXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0ID0gc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsIFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGVzdGluZyBzdHVmZiAtIGRyYXdzIG91dGxpbmVzIGFyb3VuZCBzdmcgYW5kIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAvLyBzdmdPdXRsaW5lID0gc3ZnLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHN2Zy5hdHRyKFwiaGVpZ2h0XCIpKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzdmcuYXR0cihcIndpZHRoXCIpKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJmaWxsXCIsIFwicmdiYSgwLDAsMCwwKVwiKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJyZWRcIiksXG4gICAgICAgICAgICAgICAgICAgIC8vIGNoYXJ0T3V0bGluZSA9IHN2Zy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsIFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJoZWlnaHRcIiwgY2hhcnQuYXR0cihcImhlaWdodFwiKSlcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5hdHRyKFwid2lkdGhcIiwgY2hhcnQuYXR0cihcIndpZHRoXCIpKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJmaWxsXCIsIFwicmdiYSgwLDAsMCwwKVwiKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJzdHJva2VcIiAsXCJibHVlXCIpLFxuXG4gICAgICAgICAgICAgICAgICAgIC8vIHggYW5kIHkgc2NhbGVzXG4gICAgICAgICAgICAgICAgICAgIHggPSBkMy5zY2FsZS5vcmRpbmFsKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yYW5nZVJvdW5kQmFuZHMoWzAsIHdpZHRoXSwgMC4xLCAwLjEpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZG9tYWluKGJhcktleXMpLFxuICAgICAgICAgICAgICAgICAgICB5ID0gZDMuc2NhbGUubGluZWFyKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yYW5nZShbaGVpZ2h0LCAwXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kb21haW4oWzAsIHlSYW5nZU1heF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAubmljZSgxMCksXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gLy8gYXhpcyBmdW5jdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgeEF4aXMgPSBkMy5zdmcuYXhpcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2NhbGUoeClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vcmllbnQoXCJib3R0b21cIiksXG4gICAgICAgICAgICAgICAgICAgIHlBeGlzID0gZDMuc3ZnLmF4aXMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNjYWxlKHkpXG4gICAgICAgICAgICAgICAgICAgICAgICAub3JpZW50KFwibGVmdFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmlubmVyVGlja1NpemUoLXdpZHRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRpY2tQYWRkaW5nKDEwKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRpY2tGb3JtYXQoZnVuY3Rpb24odCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkMy5mb3JtYXQoXCJmXCIpKHQpICsgXCIlXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAvLyAvLyB0ZXN0IG91dHB1dCBmb3IgdHJvdWJsZXNob290aW5nIHRoZSBkYXRhIHN0dWZmXG4gICAgICAgICAgICAgICAgICAgIC8vIGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoXCJwcmVcIilcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC50ZXh0KEpTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIDQpKVxuICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm47XG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIHhBeGlzR3JvdXAgPSBjaGFydC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ4LWF4aXNcIiA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJheGlzXCIgOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCwgXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jYWxsKHhBeGlzKTtcblxuICAgICAgICAgICAgICAgICAgICAvLyB3b3Jkd3JhcCBheGlzIGxhYmVsc1xuICAgICAgICAgICAgICAgICAgICB4QXhpc0dyb3VwLnNlbGVjdEFsbChcIi50aWNrIHRleHRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2FsbCh3cmFwLCB4LnJhbmdlQmFuZCgpKTtcblxuICAgICAgICAgICAgICAgICAgICBjaGFydC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ5LWF4aXNcIiA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJheGlzXCIgOiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoLTEyLCAwKVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhbGwoeUF4aXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0LnNlbGVjdEFsbChcInJlY3QuYmFyY2hhcnQtYmFyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZGF0YShkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbihkLCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb2xvckNsYXNzID0gXCJiYXItY29sb3ItXCIgKyAoKGkgJSAyKSArIDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1wiYmFyY2hhcnQtYmFyXCIsIGNvbG9yQ2xhc3NdLmpvaW4oXCIgXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB4LnJhbmdlQmFuZCgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGhlaWdodCAtIHkoZC5WYWx1ZSk7IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHgoZC5CYXIpOyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB5KGQuVmFsdWUpOyB9KVxuXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0LnNlbGVjdEFsbChcInRleHQuYmFyY2hhcnQtdmFsdWVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kYXRhKGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcInRleHRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJiYXJjaGFydC12YWx1ZVwiLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQzLmZvcm1hdChcIjAuMWZcIikoZC5WYWx1ZSkgKyBcIiVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgeC5yYW5nZUJhbmQoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4geShkLlZhbHVlKTsgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHgoZC5CYXIpICsgKHgucmFuZ2VCYW5kKCkvMik7IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJkeVwiLCAtNClcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBiYXJDaGFydFNlcnZpY2U7XG59XSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuICAgIC5jb250cm9sbGVyKCdEYXRhVml6Q29udHJvbGxlcicsXG4gICAgICAgIFsnJHNjb3BlJywgJyRodHRwJywgJyRsb2cnLCAnJGxvY2F0aW9uJywgJyRmaWx0ZXInLCAnc2lkZWJhckRpc3BsYXknLCAnY2F0ZWdvcmllcycsXG4gICAgICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkaHR0cCwgJGxvZywgJGxvY2F0aW9uLCAkZmlsdGVyLCBzaWRlYmFyRGlzcGxheSwgY2F0ZWdvcmllcykge1xuICAgICAgICAgICAgICAgICRzY29wZS50b2dnbGUgPSBzaWRlYmFyRGlzcGxheS50b2dnbGU7XG5cbiAgICAgICAgICAgICAgICB2YXIgcHJvbWlzZSA9IGNhdGVnb3JpZXMuZ2V0Q2F0ZWdvcmllcyhcImFsbFwiKTtcbiAgICAgICAgICAgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2F0ZWdvcmllcyA9IGNhdGVnb3JpZXMubGlzdDtcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAocmVqZWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwicHJvbWlzZSByZWplY3RlZCFcIik7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAkc2NvcGUuJG9uKCckdmlld0NvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvZ2dsZS5vcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgc2lkZWJhckRpc3BsYXkuc2VjdGlvbiA9ICdSYXcgRGF0YSc7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmRpcmVjdGl2ZSgnZGF0YXZpeicsIFsnJHdpbmRvdycsICckaHR0cCcsICd0aW1lc2VyaWVzU2VydmljZScsICdncm91cGVkQmFyQ2hhcnRTZXJ2aWNlJywgJ2JhckNoYXJ0U2VydmljZScsICd0YWJsZVNlcnZpY2UnLCBmdW5jdGlvbigkd2luZG93LCAkaHR0cCwgdGltZXNlcmllc1NlcnZpY2UsIGdyb3VwZWRCYXJDaGFydFNlcnZpY2UsIGJhckNoYXJ0U2VydmljZSwgdGFibGVTZXJ2aWNlKSB7XG4gICAgLy8gVGhpcyBmdW5jdGlvbiBzaG91bGQgcmVmbGVjdCB3aGF0ZXZlciB5b3VyIGQzIGZ1bmN0aW9uIGlzIGNhbGxlZC5cbiAgICB2YXIgY2hhcnRzID0ge1xuICAgICAgICBcImxpbmVcIiA6IHRpbWVzZXJpZXNTZXJ2aWNlLmNoYXJ0LFxuICAgICAgICBcImJhclwiIDogYmFyQ2hhcnRTZXJ2aWNlLmNoYXJ0LFxuICAgICAgICBcImdyb3VwZWRCYXJcIiA6IGdyb3VwZWRCYXJDaGFydFNlcnZpY2UuY2hhcnQsXG4gICAgICAgIFwidGFibGVcIiA6IHRhYmxlU2VydmljZS5jaGFydFxuICAgIH07XG4gICAgcmV0dXJuICB7XG4gICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICB3aGljaDogXCI9d2hpY2hcIixcbiAgICAgICAgICAgIHR5cGU6IFwiPXR5cGVcIlxuICAgICAgICB9LFxuICAgICAgICBsaW5rOiBmdW5jdGlvbihzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgICAgIHNjb3BlLnJlbmRlciA9IGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIC8vIGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgLy8gICAgIGRhdGEgOiBzY29wZS5kYXRhLFxuICAgICAgICAgICAgICAgIC8vICAgICBjb25maWcgOiBzY29wZS5jb25maWdcbiAgICAgICAgICAgICAgICAvLyB9O1xuXG4gICAgICAgICAgICAgICAgaWYgKHNjb3BlLmRhdGEpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnRzW3Njb3BlLnR5cGVdKGVsZW1lbnRbMF0sIHJlc3VsdC5kYXRhLCB7fSk7IC8vc2NvcGUuY29uZmlnXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZ2V0KFwiL3N0YXRpYy9kaXN0L2RhdGEvY3N2L1wiICsgc2NvcGUud2hpY2ggKyBcIi5jc3ZcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLmRhdGEgPSByZXN1bHQuZGF0YTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGFydHNbc2NvcGUudHlwZV0oZWxlbWVudFswXSwgc2NvcGUuZGF0YSwge30pOyAvL3Njb3BlLmNvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybjtcblxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKCd3aGljaCcsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHNjb3BlLnJlbmRlcigpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8qKlxuICAgICAgICAgICAgICAgIFRoaXMgY29kZSBpcyBpbnRlbmRlZCB0byBnZXQgdGhlIGNoYXJ0IHRvIHJlZHJhdyB3aGVuIHRoZSB3aW5kb3cgaXMgcmVzaXplZFxuICAgICAgICAgICAgICAgIEJ1dCBhcyBpdCBzdGFuZHMsIHNvbWVob3cgdGhpcyBvdmVycmlkZXMgdGhlIGRhdGEgYW5kIHRoZSBjaGFydCBiZWNvbWVzIHVzZWxlc3MuXG4gICAgICAgICAgICAgICAgSSBkb24ndCB0aGluayB0aGlzIGZlYXR1cmUgaXMgd29ydGggdGhlIGRlYnVnIHRpbWUgbm93LCBidXQgaXQncyB3b3J0aCBrZWVwaW5nIGluIG1pbmQgZm9yIHRoZSBmdXR1cmUuXG4gICAgICAgICAgICAqKi9cbiAgICAgICAgICAgIC8vICR3aW5kb3cub25yZXNpemUgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgICAgIC8vICAgICBzY29wZS5yZW5kZXIoKVxuICAgICAgICAgICAgLy8gfTtcblxuICAgICAgICAgICAgLy8gc2NvcGUuJHdhdGNoQ29sbGVjdGlvbignZGF0YScsIGZ1bmN0aW9uKGRhdGEpIHtcbiAgICAgICAgICAgIC8vICAgICBzY29wZS5yZW5kZXIoZGF0YSk7XG4gICAgICAgICAgICAvLyB9KTtcblxuICAgICAgICB9XG4gICAgfVxufV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdncm91cGVkQmFyQ2hhcnRTZXJ2aWNlJywgWyckcScsICckaHR0cCcsICdsb2Rhc2gnLCBmdW5jdGlvbigkcSwgJGh0dHAsIGxvZGFzaCkge1xuICAgIHZhciBncm91cGVkQmFyQ2hhcnRTZXJ2aWNlID0ge307XG5cbiAgICBncm91cGVkQmFyQ2hhcnRTZXJ2aWNlLmNoYXJ0ID0gZnVuY3Rpb24oY29udGFpbmVyLCBkYXRhLCBjb25maWcpIHtcbiAgICAgICAgdmFyIHRpbWVGb3JtYXRzID0ge1xuICAgICAgICAgICAgXCJ5ZWFyXCIgOiBcIllZWVlcIixcbiAgICAgICAgICAgIFwicXVhcnRlclwiIDogXCJbUV1RIFlZWVlcIixcbiAgICAgICAgICAgIFwibW9udGhcIiA6IFwiTU1NIFlZWVlcIlxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbmZpZy5mYWNldCA9IGxvZGFzaC5kaWZmZXJlbmNlKFtcInN0cnVjdHVyZVwiLCBcInRpbWVcIl0sIFtjb25maWcuZmFjZXRdKVswXVxuXG4gICAgICAgIC8vIGNvbnZlcnQgZGF0YSBmcm9tIHN0cmluZyAtPiBhcnJheSBvZiBvYmpcbiAgICAgICAgZGF0YSA9IGQzLmNzdi5wYXJzZShkYXRhKTtcblxuICAgICAgICB2YXIgZ3JvdXBLZXlzID0gbG9kYXNoLmNoYWluKGRhdGEpXG4gICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbihkKSB7IHJldHVybiBkLkdyb3VwOyB9KVxuICAgICAgICAgICAgICAgIC51bmlxdWUoKVxuICAgICAgICAgICAgICAgIC52YWx1ZSgpLFxuICAgICAgICAgICAgYmFyS2V5cyA9bG9kYXNoLmNoYWluKGRhdGEpXG4gICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbihkKSB7IHJldHVybiBkLkJhcjsgfSlcbiAgICAgICAgICAgICAgICAudW5pcXVlKClcbiAgICAgICAgICAgICAgICAudmFsdWUoKVxuICAgICAgICAgICAgeVJhbmdlTWF4ID0gbG9kYXNoLmNoYWluKGRhdGEpXG4gICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbihkKSB7IHJldHVybiArZC5WYWx1ZTsgfSlcbiAgICAgICAgICAgICAgICAubWF4KClcbiAgICAgICAgICAgICAgICAudmFsdWUoKTtcblxuICAgICAgICAvLyBuZXN0IGRhdGEgYnkgYmFyIGdyb3Vwc1xuICAgICAgICBkYXRhID0gZDMubmVzdCgpXG4gICAgICAgICAgICAua2V5KGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuR3JvdXA7IH0pXG4gICAgICAgICAgICAuZW50cmllcyhkYXRhKTtcblxuICAgICAgICAvLyBjcmVhdGUgY29udGFpbmVyIGZvciBtYXBzXG4gICAgICAgIGNoYXJ0Q29udGFpbmVyID0gZDMuc2VsZWN0KGNvbnRhaW5lcilcbiAgICAgICAgICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgICAgICAgICAuY2xhc3NlZChcImdyb3VwZWRiYXItY29udGFpbmVyXCIsIHRydWUpXG4gICAgICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJncm91cGVkYmFyLWNvbnRhaW5lci1pbnRlcm5hbFwiLCB0cnVlKVxuICAgICAgICAgICAgICAgIC5kYXR1bShkYXRhKTtcblxuICAgICAgICAvLyBjcmVhdGUgY29udGFpbmVyIGZvciBsZWdlbmRzXG4gICAgICAgIGxlZ2VuZENvbnRhaW5lciA9IGQzLnNlbGVjdChjb250YWluZXIpXG4gICAgICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgICAgICAuY2xhc3NlZCh7XG4gICAgICAgICAgICAgICAgXCJsZWdlbmQtY29udGFpbmVyXCIgOiB0cnVlLFxuICAgICAgICAgICAgICAgIFwiZ3JvdXBlZGJhci1sZWdlbmQtY29udGFpbmVyXCIgOiB0cnVlLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgICAgICAgICAuY2xhc3NlZCh7XG4gICAgICAgICAgICAgICAgICAgIFwiZ3JvdXBlZGJhci1sZWdlbmQtY29udGFpbmVyLWludGVybmFsXCIgOiB0cnVlLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuZGF0dW0oYmFyS2V5cyk7XG5cbiAgICAgICAgLy8gY2hhcnRDb250YWluZXIuYXBwZW5kKFwicHJlXCIpXG4gICAgICAgICAgICAvLyAudGV4dChKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCA0KSk7XG4gICAgICAgICAgICAvLyAudGV4dChKU09OLnN0cmluZ2lmeSh5UmFuZ2VNYXgsIG51bGwsIDQpKTtcbiAgICAgICAgICAgIC8vIC50ZXh0KEpTT04uc3RyaW5naWZ5KGJhcktleXMsIG51bGwsIDQpKTtcbiAgICAgICAgICAgIC8vIC50ZXh0KEpTT04uc3RyaW5naWZ5KGNvbmZpZywgbnVsbCwgNCkpO1xuICAgICAgICAvLyByZXR1cm47XG5cbiAgICAgICAgbWFrZUdyb3VwZWRCYXJDaGFydChjaGFydENvbnRhaW5lcik7XG5cbiAgICAgICAgbWFrZUxlZ2VuZChsZWdlbmRDb250YWluZXIpO1xuXG4gICAgICAgIC8vIC8qKiBTVEFSVCBTQ1JPTEwgTk9USUNFICoqL1xuICAgICAgICAvLyAvLyBpZiB3ZSBhcmUgdW5kZXIgYSBjZXJ0YWluIHBpeGVsIHNpemUsIHRoZXJlIHdpbGwgYmUgaG9yaXpvbnRhbCBzY3JvbGxpbmdcbiAgICAgICAgLy8gdmFyIGludGVybmFsQ29udGFpbmVyU2l6ZSA9IGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdChcImRpdi5ncm91cGVkYmFyLWNvbnRhaW5lci1pbnRlcm5hbFwiKS5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgIC8vICAgICBjb250YWluZXJTaXplID0gZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0KFwiZGl2Lmdyb3VwZWRiYXItY29udGFpbmVyXCIpLm5vZGUoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAvLyAvLyBjb25zb2xlLmxvZyhpbnRlcm5hbENvbnRhaW5lclNpemUud2lkdGggKyBcIiAvIFwiICsgY29udGFpbmVyU2l6ZS53aWR0aClcbiAgICAgICAgLy8gaWYgKGludGVybmFsQ29udGFpbmVyU2l6ZS53aWR0aCA+IGNvbnRhaW5lclNpemUud2lkdGgpIHtcbiAgICAgICAgLy8gICAgIC8vIGNvbnNvbGUubG9nKFwic2Nyb2xsIE5vdGljZSFcIilcbiAgICAgICAgLy8gICAgIC8vIGNyZWF0ZSBzY3JvbGwgbm90aWNlXG4gICAgICAgIC8vICAgICB2YXIgc2Nyb2xsTm90aWNlID0gZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0KFwiZGl2Lmdyb3VwZWRiYXItY29udGFpbmVyXCIpLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAvLyAgICAgICAgIC5jbGFzc2VkKFwic2Nyb2xsLW5vdGljZVwiLCB0cnVlKVxuICAgICAgICAvLyAgICAgICAgIC5hcHBlbmQoXCJwXCIpO1xuXG4gICAgICAgIC8vICAgICBzY3JvbGxOb3RpY2UuYXBwZW5kKFwiaVwiKVxuICAgICAgICAvLyAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICAgICAgXCJmYVwiIDogdHJ1ZSxcbiAgICAgICAgLy8gICAgICAgICAgICAgXCJmYS1hbmdsZS1kb3VibGUtZG93biBcIiA6IHRydWVcbiAgICAgICAgLy8gICAgICAgICB9KTtcblxuICAgICAgICAvLyAgICAgc2Nyb2xsTm90aWNlLmFwcGVuZChcInNwYW5cIilcbiAgICAgICAgLy8gICAgICAgICAudGV4dChcIlNjcm9sbCBmb3IgbW9yZVwiKTtcblxuICAgICAgICAvLyAgICAgc2Nyb2xsTm90aWNlLmFwcGVuZChcImlcIilcbiAgICAgICAgLy8gICAgICAgICAuY2xhc3NlZCh7XG4gICAgICAgIC8vICAgICAgICAgICAgIFwiZmFcIiA6IHRydWUsXG4gICAgICAgIC8vICAgICAgICAgICAgIFwiZmEtYW5nbGUtZG91YmxlLWRvd24gXCIgOiB0cnVlXG4gICAgICAgIC8vICAgICAgICAgfSk7XG4gICAgICAgIC8vIH1cblxuICAgICAgICAvLyBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJkaXYuZ3JvdXBlZGJhci1jb250YWluZXJcIikub24oXCJzY3JvbGxcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vICAgICAvLyBpZiBzY3JvbGwgYXQgYm90dG9tLCBoaWRlIHNjcm9sbCBub3RpY2VcbiAgICAgICAgLy8gICAgIC8vIHVzaW5nIGEgZGlmZmVyZW50IGNsYXNzIHNvIGFzIG5vdCB0byBpbnRlcmZlcmUgd2l0aCB0aGUgbW91c2VvdmVyIGVmZmVjdHNcbiAgICAgICAgLy8gICAgIGlmICgoZDMuc2VsZWN0KHRoaXMpLm5vZGUoKS5zY3JvbGxMZWZ0ICsgZDMuc2VsZWN0KHRoaXMpLm5vZGUoKS5vZmZzZXRXaWR0aCkgPj0gKGQzLnNlbGVjdCh0aGlzKS5ub2RlKCkuc2Nyb2xsV2lkdGggKiAwLjk3NSkpIHtcbiAgICAgICAgLy8gICAgICAgICBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJkaXYuc2Nyb2xsLW5vdGljZVwiKVxuICAgICAgICAvLyAgICAgICAgICAgICAuY2xhc3NlZCh7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBcImhpZGRlblwiIDogdHJ1ZVxuICAgICAgICAvLyAgICAgICAgICAgICB9KTtcbiAgICAgICAgLy8gICAgIH0gZWxzZSB7XG4gICAgICAgIC8vICAgICAgICAgZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0QWxsKFwiZGl2LnNjcm9sbC1ub3RpY2VcIilcbiAgICAgICAgLy8gICAgICAgICAgICAgLmNsYXNzZWQoe1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgXCJoaWRkZW5cIiA6IGZhbHNlXG4gICAgICAgIC8vICAgICAgICAgICAgIH0pO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9KVxuICAgICAgICAvLyAvKiogRU5EIFNDUk9MTCBOT1RJQ0UgKiovXG5cbiAgICAgICAgLy8gLy8gYWRkIGhvdmVyIGVmZmVjdHMgLSB1c2UgY2xhc3NlcyBcImhpZ2hsaWdodFwiIGFuZCBcImxvd2xpZ2h0XCJcbiAgICAgICAgLy8gZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0QWxsKFwiZy5lbnRyeSwgZy5ncm91cGVkYmFyLWxpbmVzID4gcGF0aCwgZy5ncm91cGVkYmFyLXBvaW50cyA+IHBhdGhcIilcbiAgICAgICAgLy8gLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vICAgICB2YXIgY2xhc3NUb0hpZ2hsaWdodCA9IGQzLnNlbGVjdCh0aGlzKS5hdHRyKFwiZGF0YS1jbGFzc1wiKTtcblxuICAgICAgICAvLyAgICAgLy8gbG93bGlnaHQgYWxsIGVsZW1lbnRzXG4gICAgICAgIC8vICAgICBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJnLmVudHJ5LCBnLmdyb3VwZWRiYXItbGluZXMgPiBwYXRoLCBnLmdyb3VwZWRiYXItcG9pbnRzID4gcGF0aCwgZGl2LnNjcm9sbC1ub3RpY2VcIilcbiAgICAgICAgLy8gICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICBcImxvd2xpZ2h0XCIgOiB0cnVlLFxuICAgICAgICAvLyAgICAgICAgIFwiaGlnaGxpZ2h0XCIgOiBmYWxzZVxuICAgICAgICAvLyAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgLy8gICAgIC8vIGhpZ2hsaWdodCBhbGwgZWxlbWVudHMgd2l0aCBtYXRjaGluZyBkYXRhLWNsYXNzXG4gICAgICAgIC8vICAgICBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJnLmVudHJ5LlwiK2NsYXNzVG9IaWdobGlnaHQrXCIsIGcuZ3JvdXBlZGJhci1saW5lcyA+IHBhdGguXCIrY2xhc3NUb0hpZ2hsaWdodCtcIiwgZy5ncm91cGVkYmFyLXBvaW50cyBwYXRoLlwiK2NsYXNzVG9IaWdobGlnaHQpXG4gICAgICAgIC8vICAgICAuY2xhc3NlZCh7XG4gICAgICAgIC8vICAgICAgICAgXCJsb3dsaWdodFwiIDogZmFsc2UsXG4gICAgICAgIC8vICAgICAgICAgXCJoaWdobGlnaHRcIiA6IHRydWVcbiAgICAgICAgLy8gICAgIH0pO1xuICAgICAgICAvLyB9KVxuICAgICAgICAvLyAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbigpe1xuICAgICAgICAvLyAgICAgLy8gcmVtb3ZlIGFsbCBoaWdobGlnaHQvbG93bGlnaHQgY2xhc3Nlc1xuICAgICAgICAvLyAgICAgZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0QWxsKFwiZy5lbnRyeSwgZy5ncm91cGVkYmFyLWxpbmVzID4gcGF0aCwgZy5ncm91cGVkYmFyLXBvaW50cyA+IHBhdGgsIGRpdi5zY3JvbGwtbm90aWNlXCIpXG4gICAgICAgIC8vICAgICAuY2xhc3NlZCh7XG4gICAgICAgIC8vICAgICAgICAgXCJsb3dsaWdodFwiIDogZmFsc2UsXG4gICAgICAgIC8vICAgICAgICAgXCJoaWdobGlnaHRcIiA6IGZhbHNlXG4gICAgICAgIC8vICAgICB9KTtcbiAgICAgICAgLy8gfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gbWFrZUxlZ2VuZChzZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHNlbGVjdGlvbi5lYWNoKGZ1bmN0aW9uKGxlZ2VuZERhdGEpIHtcbiAgICAgICAgICAgICAgICAvLyBjb2xvciBzY2FsZVxuICAgICAgICAgICAgICAgIHZhciBjb2xvcnMgPSBkMy5zY2FsZS5vcmRpbmFsKClcbiAgICAgICAgICAgICAgICAgICAgLnJhbmdlKFtcImJhci1jb2xvci0xXCIsIFwiYmFyLWNvbG9yLTJcIiwgXCJiYXItY29sb3ItM1wiLCBcImJhci1jb2xvci00XCJdKVxuICAgICAgICAgICAgICAgICAgICAuZG9tYWluKGJhcktleXMpXG5cbiAgICAgICAgICAgICAgICB2YXIgbGVnZW5kRW50cmllcyA9IGQzLnNlbGVjdCh0aGlzKS5zZWxlY3RBbGwoXCJkaXYuZ3JvdXBlZGJhci1sZWdlbmQtZW50cnlcIilcbiAgICAgICAgICAgICAgICAgICAgLmRhdGEobGVnZW5kRGF0YSlcbiAgICAgICAgICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJncm91cGVkYmFyLWxlZ2VuZC1lbnRyeVwiLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRhdHVtKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQ7IH0pXG5cbiAgICAgICAgICAgICAgICBsZWdlbmRFbnRyaWVzLmVhY2goZnVuY3Rpb24oZW50cnlEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoXCJzcGFuXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcImNsYXNzXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImdyb3VwZWRiYXItbGVnZW5kLWVudHJ5LWNvbG9yXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbG9ycyhlbnRyeURhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5qb2luKFwiIFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuYXBwZW5kKFwic3BhblwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJncm91cGVkYmFyLWxlZ2VuZC1lbnRyeS1sYWJlbFwiLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnRleHQoZW50cnlEYXRhKTtcbiAgICAgICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICAgICAgLy8gYWxsIHNwYW5zIGFyZSBieSBkZWZhdWx0IHVuc3R5bGVkLCB3aXRoIG5vIHdheSB0byBkbyBpdCBpbiBqZXRwYWNrLFxuICAgICAgICAgICAgICAgIC8vIHNvIGluIG9yZGVyIHRvIGZpZ2h0IHRoZSBoYW5naW5nIGluZGVudCBlZmZlY3QsIG1vdmUgdGhlbSBvdmVyIDggcHhcbiAgICAgICAgICAgICAgICAvLyBkMy5zZWxlY3RBbGwoXCJ0c3BhblwiKS5hdHRyKFwiZHhcIiwgOClcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gbWFrZUdyb3VwZWRCYXJDaGFydChzZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIC8vIGhlbHBlciBmdW5jdGlvbiwgd3JhcHMgdGV4dCBmb3IgYXhpcyBsYWJlbHNcbiAgICAgICAgICAgIGZ1bmN0aW9uIHdyYXAodGV4dCwgd2lkdGgpIHtcbiAgICAgICAgICAgICAgdGV4dC5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgIHZhciB0ZXh0ID0gZDMuc2VsZWN0KHRoaXMpLFxuICAgICAgICAgICAgICAgICAgICB3b3JkcyA9IHRleHQudGV4dCgpLnNwbGl0KC9cXHMrLykucmV2ZXJzZSgpLFxuICAgICAgICAgICAgICAgICAgICB3b3JkLFxuICAgICAgICAgICAgICAgICAgICBsaW5lID0gW10sXG4gICAgICAgICAgICAgICAgICAgIGxpbmVOdW1iZXIgPSAwLFxuICAgICAgICAgICAgICAgICAgICBsaW5lSGVpZ2h0ID0gMS4xLCAvLyBlbXNcbiAgICAgICAgICAgICAgICAgICAgeSA9IHRleHQuYXR0cihcInlcIiksXG4gICAgICAgICAgICAgICAgICAgIGR5ID0gcGFyc2VGbG9hdCh0ZXh0LmF0dHIoXCJkeVwiKSksXG4gICAgICAgICAgICAgICAgICAgIHRzcGFuID0gdGV4dC50ZXh0KG51bGwpLmFwcGVuZChcInRzcGFuXCIpLmF0dHIoXCJ4XCIsIDApLmF0dHIoXCJ5XCIsIHkpLmF0dHIoXCJkeVwiLCBkeSArIFwiZW1cIik7XG4gICAgICAgICAgICAgICAgd2hpbGUgKHdvcmQgPSB3b3Jkcy5wb3AoKSkge1xuICAgICAgICAgICAgICAgICAgbGluZS5wdXNoKHdvcmQpO1xuICAgICAgICAgICAgICAgICAgdHNwYW4udGV4dChsaW5lLmpvaW4oXCIgXCIpKTtcbiAgICAgICAgICAgICAgICAgIGlmICh0c3Bhbi5ub2RlKCkuZ2V0Q29tcHV0ZWRUZXh0TGVuZ3RoKCkgPiB3aWR0aCkge1xuICAgICAgICAgICAgICAgICAgICBsaW5lLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICB0c3Bhbi50ZXh0KGxpbmUuam9pbihcIiBcIikpO1xuICAgICAgICAgICAgICAgICAgICBsaW5lID0gW3dvcmRdO1xuICAgICAgICAgICAgICAgICAgICB0c3BhbiA9IHRleHQuYXBwZW5kKFwidHNwYW5cIikuYXR0cihcInhcIiwgMCkuYXR0cihcInlcIiwgeSkuYXR0cihcImR5XCIsICsrbGluZU51bWJlciAqIGxpbmVIZWlnaHQgKyBkeSArIFwiZW1cIikudGV4dCh3b3JkKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBzZWxlY3Rpb24uZWFjaChmdW5jdGlvbihkYXRhKSB7XG4gICAgICAgICAgICAgICAgLy8gc2l6aW5nIGFuZCBtYXJnaW4gdmFyc1xuICAgICAgICAgICAgICAgIHZhciBCQm94ID0gdGhpcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSxcbiAgICAgICAgICAgICAgICAgICAgbWFyZ2luID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0b3BcIiA6IEJCb3guaGVpZ2h0ICogMC4wNSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicmlnaHRcIiA6IEJCb3gud2lkdGggKiAwLjA1LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJib3R0b21cIiA6IEJCb3guaGVpZ2h0ICogMC4zLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJsZWZ0XCIgOiBkMy5tYXgoW0JCb3gud2lkdGggKiAwLjA1LCA1NV0pXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIHdpZHRoID0gQkJveC53aWR0aCAtIChtYXJnaW4ubGVmdCArIG1hcmdpbi5yaWdodClcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0ID0gQkJveC5oZWlnaHQgLSAobWFyZ2luLnRvcCArIG1hcmdpbi5ib3R0b20pLFxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbnRhaW5lcnNcbiAgICAgICAgICAgICAgICAgICAgc3ZnID0gZDMuc2VsZWN0KHRoaXMpLmFwcGVuZChcInN2Z1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgQkJveC5oZWlnaHQpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIEJCb3gud2lkdGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLCAwKVwiKSxcbiAgICAgICAgICAgICAgICAgICAgY2hhcnQgPSBzdmcuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB3aWR0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIiwgXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpLFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyB0ZXN0aW5nIHN0dWZmIC0gZHJhd3Mgb3V0bGluZXMgYXJvdW5kIHN2ZyBhbmQgY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgIC8vIHN2Z091dGxpbmUgPSBzdmcuYXBwZW5kKFwicmVjdFwiKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJoZWlnaHRcIiwgc3ZnLmF0dHIoXCJoZWlnaHRcIikpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAuYXR0cihcIndpZHRoXCIsIHN2Zy5hdHRyKFwid2lkdGhcIikpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAuYXR0cihcImZpbGxcIiwgXCJyZ2JhKDAsMCwwLDApXCIpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAuYXR0cihcInN0cm9rZVwiLCBcInJlZFwiKSxcbiAgICAgICAgICAgICAgICAgICAgLy8gY2hhcnRPdXRsaW5lID0gc3ZnLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwidHJhbnNsYXRlKFwiICsgbWFyZ2luLmxlZnQgKyBcIiwgXCIgKyBtYXJnaW4udG9wICsgXCIpXCIpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAuYXR0cihcImhlaWdodFwiLCBjaGFydC5hdHRyKFwiaGVpZ2h0XCIpKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJ3aWR0aFwiLCBjaGFydC5hdHRyKFwid2lkdGhcIikpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAuYXR0cihcImZpbGxcIiwgXCJyZ2JhKDAsMCwwLDApXCIpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAuYXR0cihcInN0cm9rZVwiICxcImJsdWVcIiksXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gY29sb3Igc2NhbGVcbiAgICAgICAgICAgICAgICAgICAgY29sb3JzID0gZDMuc2NhbGUub3JkaW5hbCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmFuZ2UoW1wiYmFyLWNvbG9yLTFcIiwgXCJiYXItY29sb3ItMlwiLCBcImJhci1jb2xvci0zXCIsIFwiYmFyLWNvbG9yLTRcIl0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZG9tYWluKGJhcktleXMpLFxuXG4gICAgICAgICAgICAgICAgICAgIC8vIHggYW5kIHkgc2NhbGVzXG4gICAgICAgICAgICAgICAgICAgIHgwID0gZDMuc2NhbGUub3JkaW5hbCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmFuZ2VSb3VuZEJhbmRzKFswLCB3aWR0aF0sIDAuMiwgMC4yKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRvbWFpbihncm91cEtleXMpLFxuICAgICAgICAgICAgICAgICAgICB4MSA9IGQzLnNjYWxlLm9yZGluYWwoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJhbmdlUm91bmRCYW5kcyhbMCwgeDAucmFuZ2VCYW5kKCldLCAwLjEsIDApXG4gICAgICAgICAgICAgICAgICAgICAgICAuZG9tYWluKGJhcktleXMpLFxuICAgICAgICAgICAgICAgICAgICB5ID0gZDMuc2NhbGUubGluZWFyKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yYW5nZShbaGVpZ2h0LCAwXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kb21haW4oWzAsIHlSYW5nZU1heF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAubmljZSg1KSxcblxuICAgICAgICAgICAgICAgICAgICAvLyAvLyBheGlzIGZ1bmN0aW9uc1xuICAgICAgICAgICAgICAgICAgICB4MEF4aXMgPSBkMy5zdmcuYXhpcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2NhbGUoeDApXG4gICAgICAgICAgICAgICAgICAgICAgICAub3JpZW50KFwiYm90dG9tXCIpLFxuICAgICAgICAgICAgICAgICAgICB4MUF4aXMgPSBkMy5zdmcuYXhpcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2NhbGUoeDEpXG4gICAgICAgICAgICAgICAgICAgICAgICAub3JpZW50KFwiYm90dG9tXCIpLFxuICAgICAgICAgICAgICAgICAgICB5QXhpcyA9IGQzLnN2Zy5heGlzKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zY2FsZSh5KVxuICAgICAgICAgICAgICAgICAgICAgICAgLm9yaWVudChcImxlZnRcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5pbm5lclRpY2tTaXplKC13aWR0aClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aWNrUGFkZGluZygxMClcbiAgICAgICAgICAgICAgICAgICAgICAgIC50aWNrRm9ybWF0KGZ1bmN0aW9uKHQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZDMuZm9ybWF0KFwiZlwiKSh0KSArIFwiJVwiO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gLy8gdGVzdCBvdXRwdXQgZm9yIHRyb3VibGVzaG9vdGluZyB0aGUgZGF0YSBzdHVmZlxuICAgICAgICAgICAgICAgICAgICAvLyBkMy5zZWxlY3QodGhpcykuYXBwZW5kKFwicHJlXCIpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAudGV4dChKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCA0KSlcbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciB4MEF4aXNHcm91cCA9IGNoYXJ0LmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIngtYXhpc1wiIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImF4aXNcIiA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLCBcIiArIGhlaWdodCArIFwiKVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhbGwoeDBBeGlzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAvLyB3b3Jkd3JhcCBheGlzIGxhYmVsc1xuICAgICAgICAgICAgICAgICAgICB4MEF4aXNHcm91cC5zZWxlY3RBbGwoXCIudGljayB0ZXh0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhbGwod3JhcCwgeDAucmFuZ2VCYW5kKCkpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0LmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInktYXhpc1wiIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImF4aXNcIiA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgtMTIsIDApXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2FsbCh5QXhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gbWFrZSBiYXIgZ3JvdXBzXG5cbiAgICAgICAgICAgICAgICAgICAgdmFyIGJhckdyb3VwcyA9IGNoYXJ0LnNlbGVjdEFsbChcImcuZ3JvdXBlZGJhci1ncm91cFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRhdGEoZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKFwiZ1wiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwiZ3JvdXBlZGJhci1ncm91cFwiLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgeDAucmFuZ2VCYW5kKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJoZWlnaHRcIiwgaGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwidHJhbnNsYXRlKFwiICsgeDAoZC5rZXkpICsgXCIsIDApXCI7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZGF0dW0oZnVuY3Rpb24oZCkgeyByZXR1cm4gZC52YWx1ZXM7IH0pXG5cbiAgICAgICAgICAgICAgICAgICAgYmFyR3JvdXBzLmVhY2goZnVuY3Rpb24oZ3JvdXBEYXRhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBnZXQgc29tZSBncm91cC1zcGVjaWZpYyB2YXJzIHNldCB1cFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNHcm91cEJhcnMgPSBsb2Rhc2guY2hhaW4oZ3JvdXBEYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuQmFyOyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAud2l0aG91dChcIlwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudmFsdWUoKSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzR3JvdXBMYWJlbHMgPSBsb2Rhc2guY2hhaW4oZ3JvdXBEYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGQuTGFiZWw7IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC53aXRob3V0KFwiXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC52YWx1ZSgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNHcm91cFgxID0geDEuY29weSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5kb21haW4odGhpc0dyb3VwQmFycyk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzR3JvdXBMYWJlbHMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1vdmUgeDAtYXhpcyBkb3duXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeDBBeGlzR3JvdXAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLCBcIiArIChoZWlnaHQgKyAobWFyZ2luLmJvdHRvbS8yKSkgKyBcIilcIilcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIC8vIC8vIFVzaW5nIHgxIGF4aXMgdG8gbGFiZWwgaW5kaXZpZHVhbCBiYXJzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZDMuc2VsZWN0KHRoaXMpLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmNsYXNzZWQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgXCJ4LWF4aXNcIiA6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBcImF4aXNcIiA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCwgXCIgKyBoZWlnaHQgKyBcIilcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmNhbGwoeDEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc2VsZWN0QWxsKFwicmVjdC5ncm91cGRiYXItYmFyXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmRhdGEoZ3JvdXBEYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJjbGFzc1wiLCBmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW1wiZ3JvdXBlZGJhci1iYXJcIiwgY29sb3JzKGQuQmFyKV0uam9pbihcIiBcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgdGhpc0dyb3VwWDEucmFuZ2VCYW5kKCkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIGhlaWdodCAtIHkoZC5WYWx1ZSk7IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB0aGlzR3JvdXBYMShkLkJhcik7IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB5KGQuVmFsdWUpOyB9KVxuXG4gICAgICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuc2VsZWN0QWxsKFwidGV4dC5ncm91cGRiYXItdmFsdWVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZGF0YShncm91cERhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXBwZW5kKFwidGV4dFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJncm91cGRiYXItdmFsdWVcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRleHQoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQzLmZvcm1hdChcIjAuMWZcIikoZC5WYWx1ZSkgKyBcIiVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCB0aGlzR3JvdXBYMS5yYW5nZUJhbmQoKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ5XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHkoZC5WYWx1ZSk7IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidGV4dC1hbmNob3JcIiwgXCJtaWRkbGVcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIGZ1bmN0aW9uKGQpIHsgcmV0dXJuIHRoaXNHcm91cFgxKGQuQmFyKSArICh0aGlzR3JvdXBYMS5yYW5nZUJhbmQoKS8yKTsgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJkeVwiLCAtNClcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXNpbmcgdGV4dCB0byBsYWJlbCBpbmRpdmlkdWFsIGJhcnNcbiAgICAgICAgICAgICAgICAgICAgICAgIGQzLnNlbGVjdCh0aGlzKS5zZWxlY3RBbGwoXCJ0ZXh0Lmdyb3VwZGJhci1sYWJlbFwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5kYXRhKGdyb3VwRGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJ0ZXh0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuY2xhc3NlZChcImdyb3VwZGJhci1sYWJlbFwiLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7IHJldHVybiBkLkxhYmVsOyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcIndpZHRoXCIsIHgxLnJhbmdlQmFuZCgpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBWQVJJQVRJT05TICovXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB1bmRlciBiYXJzLCBtaWRkbGUgYWxpZ25lZFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInlcIiwgaGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRleHQtYW5jaG9yXCIsIFwibWlkZGxlXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieFwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB4MShkLkJhcikgKyAoeDEucmFuZ2VCYW5kKCkvMik7IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiZHlcIiwgMTYpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpbnNpZGUgYmFycywgcm90YXRlZCByaWdodCA5MCBkZWcsIGF0IHJpZ2h0IHNpZGUgb2YgYmFyIHdpdGggeCBhbmQgeSBwYWRkaW5nXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsIFwicm90YXRlKC05MClcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ4XCIsIC1oZWlnaHQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiZHhcIiwgNClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0ZXh0LWFuY2hvclwiLCBcInN0YXJ0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwieVwiLCBmdW5jdGlvbihkKSB7IHJldHVybiB4MShkLkJhcikgKyB4MS5yYW5nZUJhbmQoKTsgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJkeVwiLCAtNClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBncm91cGVkQmFyQ2hhcnRTZXJ2aWNlO1xufV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5kaXJlY3RpdmUoJ3NpbXBsZXRhYmxlJywgZnVuY3Rpb24oKSB7XG4gICAgLy8gVGhpcyBmdW5jdGlvbiBzaG91bGQgcmVmbGVjdCB3aGF0ZXZlciB5b3VyIGQzIHRhYmxlIGZ1bmN0aW9uIGlzIGNhbGxlZC5cbiAgICB2YXIgY2hhcnQgPSB0YWJsZUNoYXJ0KCk7XG4gICAgcmV0dXJuICB7XG4gICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICBkYXRhOiBcIj1kYXRhXCIgLy8gV2UgY2FuIGNhbGwgdGhpcyB3L2Ugd2Ugd2FudC5cbiAgICAgICAgfSxcbiAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XG4gICAgICAgICAgICBzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKCdkYXRhJywgZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIGQzLnNlbGVjdChlbGVtZW50WzBdKS5kYXR1bShkYXRhKS5jYWxsKGNoYXJ0KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxufSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ3RhYmxlU2VydmljZScsIFsnJHEnLCAnJGh0dHAnLCAnbG9kYXNoJywgZnVuY3Rpb24oJHEsICRodHRwLCBsb2Rhc2gpIHtcbiAgICB2YXIgdGFibGVTZXJ2aWNlID0ge307XG5cbiAgICB0YWJsZVNlcnZpY2UuY2hhcnQgPSBmdW5jdGlvbihjb250YWluZXIsIGRhdGEsIGNvbmZpZykge1xuICAgICAgICBjb25maWcuZmFjZXQgPSBsb2Rhc2guZGlmZmVyZW5jZShbXCJzdHJ1Y3R1cmVcIiwgXCJ0aW1lXCJdLCBbY29uZmlnLmZhY2V0XSlbMF1cblxuICAgICAgICAvLyBjb252ZXJ0IGRhdGEgZnJvbSBzdHJpbmcgLT4gYXJyYXkgb2Ygb2JqXG4gICAgICAgIGRhdGEgPSBkMy5jc3YucGFyc2UoZGF0YSk7XG5cbiAgICAgICAgLy8gdmFyIGdyb3VwS2V5cyA9IGxvZGFzaC5jaGFpbihkYXRhKVxuICAgICAgICAvLyAgICAgICAgIC5tYXAoZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5Hcm91cDsgfSlcbiAgICAgICAgLy8gICAgICAgICAudW5pcXVlKClcbiAgICAgICAgLy8gICAgICAgICAudmFsdWUoKSxcbiAgICAgICAgLy8gICAgIGJhcktleXMgPWxvZGFzaC5jaGFpbihkYXRhKVxuICAgICAgICAvLyAgICAgICAgIC5tYXAoZnVuY3Rpb24oZCkgeyByZXR1cm4gZC5CYXI7IH0pXG4gICAgICAgIC8vICAgICAgICAgLnVuaXF1ZSgpXG4gICAgICAgIC8vICAgICAgICAgLnZhbHVlKClcbiAgICAgICAgLy8gICAgIHlSYW5nZU1heCA9IGxvZGFzaC5jaGFpbihkYXRhKVxuICAgICAgICAvLyAgICAgICAgIC5tYXAoZnVuY3Rpb24oZCkgeyByZXR1cm4gK2QuVmFsdWU7IH0pXG4gICAgICAgIC8vICAgICAgICAgLm1heCgpXG4gICAgICAgIC8vICAgICAgICAgLnZhbHVlKCk7XG5cblxuICAgICAgICB2YXIgY29sdW1uS2V5cyA9IFtdO1xuICAgICAgICBmb3IoayBpbiBkYXRhWzBdKSB7XG4gICAgICAgICAgICBjb2x1bW5LZXlzLnB1c2goayk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjcmVhdGUgY29udGFpbmVyIGZvciBtYXBzXG4gICAgICAgIGNoYXJ0Q29udGFpbmVyID0gZDMuc2VsZWN0KGNvbnRhaW5lcilcbiAgICAgICAgICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgICAgICAgICAuY2xhc3NlZChcInRhYmxlLWNvbnRhaW5lclwiLCB0cnVlKVxuICAgICAgICAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwidGFibGUtY29udGFpbmVyLWludGVybmFsXCIsIHRydWUpXG4gICAgICAgICAgICAgICAgLmRhdHVtKGRhdGEpO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBjb250YWluZXIgZm9yIGxlZ2VuZHNcbiAgICAgICAgLy8gbGVnZW5kQ29udGFpbmVyID0gZDMuc2VsZWN0KGNvbnRhaW5lcilcbiAgICAgICAgLy8gICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgLy8gICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICBcImxlZ2VuZC1jb250YWluZXJcIiA6IHRydWUsXG4gICAgICAgIC8vICAgICAgICAgXCJ0YWJsZS1sZWdlbmQtY29udGFpbmVyXCIgOiB0cnVlLFxuICAgICAgICAvLyAgICAgfSk7XG5cbiAgICAgICAgLy8gY2hhcnRDb250YWluZXIuYXBwZW5kKFwicHJlXCIpXG4gICAgICAgICAgICAvLyAudGV4dChKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCA0KSk7XG4gICAgICAgICAgICAvLyAudGV4dChKU09OLnN0cmluZ2lmeShjb2x1bW5LZXlzLCBudWxsLCA0KSk7XG4gICAgICAgIC8vIHJldHVybjtcblxuICAgICAgICBtYWtlVGFibGUoY2hhcnRDb250YWluZXIpO1xuXG4gICAgICAgIHJldHVybjtcblxuICAgICAgICB2YXIgbGVnZW5kRGl2ID0gbGVnZW5kQ29udGFpbmVyLnNlbGVjdEFsbChcImRpdi5sZWdlbmRcIilcbiAgICAgICAgICAgIC5kYXRhKFtiYXJLZXlzXSlcbiAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAuYXBwZW5kKFwiZGl2XCIpXG4gICAgICAgICAgICAgICAgLmNsYXNzZWQoe1xuICAgICAgICAgICAgICAgICAgICBcImxlZ2VuZFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcInRhYmxlLWxlZ2VuZFwiOiB0cnVlXG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICBtYWtlTGVnZW5kKGxlZ2VuZERpdik7XG5cbiAgICAgICAgXG4gICAgICAgIC8vIC8qKiBTVEFSVCBTQ1JPTEwgTk9USUNFICoqL1xuICAgICAgICAvLyAvLyBpZiB3ZSBhcmUgdW5kZXIgYSBjZXJ0YWluIHBpeGVsIHNpemUsIHRoZXJlIHdpbGwgYmUgaG9yaXpvbnRhbCBzY3JvbGxpbmdcbiAgICAgICAgLy8gdmFyIGludGVybmFsQ29udGFpbmVyU2l6ZSA9IGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdChcImRpdi50YWJsZS1jb250YWluZXItaW50ZXJuYWxcIikubm9kZSgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpLFxuICAgICAgICAvLyAgICAgY29udGFpbmVyU2l6ZSA9IGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdChcImRpdi50YWJsZS1jb250YWluZXJcIikubm9kZSgpLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG4gICAgICAgIC8vIC8vIGNvbnNvbGUubG9nKGludGVybmFsQ29udGFpbmVyU2l6ZS53aWR0aCArIFwiIC8gXCIgKyBjb250YWluZXJTaXplLndpZHRoKVxuICAgICAgICAvLyBpZiAoaW50ZXJuYWxDb250YWluZXJTaXplLndpZHRoID4gY29udGFpbmVyU2l6ZS53aWR0aCkge1xuICAgICAgICAvLyAgICAgLy8gY29uc29sZS5sb2coXCJzY3JvbGwgTm90aWNlIVwiKVxuICAgICAgICAvLyAgICAgLy8gY3JlYXRlIHNjcm9sbCBub3RpY2VcbiAgICAgICAgLy8gICAgIHZhciBzY3JvbGxOb3RpY2UgPSBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3QoXCJkaXYudGFibGUtY29udGFpbmVyXCIpLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAvLyAgICAgICAgIC5jbGFzc2VkKFwic2Nyb2xsLW5vdGljZVwiLCB0cnVlKVxuICAgICAgICAvLyAgICAgICAgIC5hcHBlbmQoXCJwXCIpO1xuXG4gICAgICAgIC8vICAgICBzY3JvbGxOb3RpY2UuYXBwZW5kKFwiaVwiKVxuICAgICAgICAvLyAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICAgICAgXCJmYVwiIDogdHJ1ZSxcbiAgICAgICAgLy8gICAgICAgICAgICAgXCJmYS1hbmdsZS1kb3VibGUtZG93biBcIiA6IHRydWVcbiAgICAgICAgLy8gICAgICAgICB9KTtcblxuICAgICAgICAvLyAgICAgc2Nyb2xsTm90aWNlLmFwcGVuZChcInNwYW5cIilcbiAgICAgICAgLy8gICAgICAgICAudGV4dChcIlNjcm9sbCBmb3IgbW9yZVwiKTtcblxuICAgICAgICAvLyAgICAgc2Nyb2xsTm90aWNlLmFwcGVuZChcImlcIilcbiAgICAgICAgLy8gICAgICAgICAuY2xhc3NlZCh7XG4gICAgICAgIC8vICAgICAgICAgICAgIFwiZmFcIiA6IHRydWUsXG4gICAgICAgIC8vICAgICAgICAgICAgIFwiZmEtYW5nbGUtZG91YmxlLWRvd24gXCIgOiB0cnVlXG4gICAgICAgIC8vICAgICAgICAgfSk7XG4gICAgICAgIC8vIH1cblxuICAgICAgICAvLyBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJkaXYudGFibGUtY29udGFpbmVyXCIpLm9uKFwic2Nyb2xsXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAvLyAgICAgLy8gaWYgc2Nyb2xsIGF0IGJvdHRvbSwgaGlkZSBzY3JvbGwgbm90aWNlXG4gICAgICAgIC8vICAgICAvLyB1c2luZyBhIGRpZmZlcmVudCBjbGFzcyBzbyBhcyBub3QgdG8gaW50ZXJmZXJlIHdpdGggdGhlIG1vdXNlb3ZlciBlZmZlY3RzXG4gICAgICAgIC8vICAgICBpZiAoKGQzLnNlbGVjdCh0aGlzKS5ub2RlKCkuc2Nyb2xsTGVmdCArIGQzLnNlbGVjdCh0aGlzKS5ub2RlKCkub2Zmc2V0V2lkdGgpID49IChkMy5zZWxlY3QodGhpcykubm9kZSgpLnNjcm9sbFdpZHRoICogMC45NzUpKSB7XG4gICAgICAgIC8vICAgICAgICAgZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0QWxsKFwiZGl2LnNjcm9sbC1ub3RpY2VcIilcbiAgICAgICAgLy8gICAgICAgICAgICAgLmNsYXNzZWQoe1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgXCJoaWRkZW5cIiA6IHRydWVcbiAgICAgICAgLy8gICAgICAgICAgICAgfSk7XG4gICAgICAgIC8vICAgICB9IGVsc2Uge1xuICAgICAgICAvLyAgICAgICAgIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImRpdi5zY3JvbGwtbm90aWNlXCIpXG4gICAgICAgIC8vICAgICAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICAgICAgICAgIFwiaGlkZGVuXCIgOiBmYWxzZVxuICAgICAgICAvLyAgICAgICAgICAgICB9KTtcbiAgICAgICAgLy8gICAgIH1cbiAgICAgICAgLy8gfSlcbiAgICAgICAgLy8gLyoqIEVORCBTQ1JPTEwgTk9USUNFICoqL1xuXG4gICAgICAgIC8vIC8vIGFkZCBob3ZlciBlZmZlY3RzIC0gdXNlIGNsYXNzZXMgXCJoaWdobGlnaHRcIiBhbmQgXCJsb3dsaWdodFwiXG4gICAgICAgIC8vIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImcuZW50cnksIGcudGFibGUtbGluZXMgPiBwYXRoLCBnLnRhYmxlLXBvaW50cyA+IHBhdGhcIilcbiAgICAgICAgLy8gLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vICAgICB2YXIgY2xhc3NUb0hpZ2hsaWdodCA9IGQzLnNlbGVjdCh0aGlzKS5hdHRyKFwiZGF0YS1jbGFzc1wiKTtcblxuICAgICAgICAvLyAgICAgLy8gbG93bGlnaHQgYWxsIGVsZW1lbnRzXG4gICAgICAgIC8vICAgICBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJnLmVudHJ5LCBnLnRhYmxlLWxpbmVzID4gcGF0aCwgZy50YWJsZS1wb2ludHMgPiBwYXRoLCBkaXYuc2Nyb2xsLW5vdGljZVwiKVxuICAgICAgICAvLyAgICAgLmNsYXNzZWQoe1xuICAgICAgICAvLyAgICAgICAgIFwibG93bGlnaHRcIiA6IHRydWUsXG4gICAgICAgIC8vICAgICAgICAgXCJoaWdobGlnaHRcIiA6IGZhbHNlXG4gICAgICAgIC8vICAgICB9KTtcbiAgICAgICAgICAgIFxuICAgICAgICAvLyAgICAgLy8gaGlnaGxpZ2h0IGFsbCBlbGVtZW50cyB3aXRoIG1hdGNoaW5nIGRhdGEtY2xhc3NcbiAgICAgICAgLy8gICAgIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImcuZW50cnkuXCIrY2xhc3NUb0hpZ2hsaWdodCtcIiwgZy50YWJsZS1saW5lcyA+IHBhdGguXCIrY2xhc3NUb0hpZ2hsaWdodCtcIiwgZy50YWJsZS1wb2ludHMgcGF0aC5cIitjbGFzc1RvSGlnaGxpZ2h0KVxuICAgICAgICAvLyAgICAgLmNsYXNzZWQoe1xuICAgICAgICAvLyAgICAgICAgIFwibG93bGlnaHRcIiA6IGZhbHNlLFxuICAgICAgICAvLyAgICAgICAgIFwiaGlnaGxpZ2h0XCIgOiB0cnVlXG4gICAgICAgIC8vICAgICB9KTtcbiAgICAgICAgLy8gfSlcbiAgICAgICAgLy8gLm9uKFwibW91c2VvdXRcIiwgZnVuY3Rpb24oKXtcbiAgICAgICAgLy8gICAgIC8vIHJlbW92ZSBhbGwgaGlnaGxpZ2h0L2xvd2xpZ2h0IGNsYXNzZXNcbiAgICAgICAgLy8gICAgIGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdEFsbChcImcuZW50cnksIGcudGFibGUtbGluZXMgPiBwYXRoLCBnLnRhYmxlLXBvaW50cyA+IHBhdGgsIGRpdi5zY3JvbGwtbm90aWNlXCIpXG4gICAgICAgIC8vICAgICAuY2xhc3NlZCh7XG4gICAgICAgIC8vICAgICAgICAgXCJsb3dsaWdodFwiIDogZmFsc2UsXG4gICAgICAgIC8vICAgICAgICAgXCJoaWdobGlnaHRcIiA6IGZhbHNlXG4gICAgICAgIC8vICAgICB9KTtcbiAgICAgICAgLy8gfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gbWFrZVRhYmxlKHNlbGVjdGlvbikge1xuICAgICAgICAgICAgc2VsZWN0aW9uLmVhY2goZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIGNvbnRhaW5lcnNcbiAgICAgICAgICAgICAgICB0YWJsZSA9IGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoXCJ0YWJsZVwiKSxcbiAgICAgICAgICAgICAgICB0aGVhZCA9IHRhYmxlLmFwcGVuZChcInRoZWFkXCIpLFxuICAgICAgICAgICAgICAgIHRib2R5ID0gdGFibGUuYXBwZW5kKFwiYm9keVwiKVxuICAgICAgICAgICAgICAgIDtcblxuICAgICAgICAgICAgICAgIC8vIC8vIHRlc3Qgb3V0cHV0IGZvciB0cm91Ymxlc2hvb3RpbmcgdGhlIGRhdGEgc3R1ZmZcbiAgICAgICAgICAgICAgICAvLyBkMy5zZWxlY3QodGhpcykuYXBwZW5kKFwicHJlXCIpXG4gICAgICAgICAgICAgICAgLy8gICAgIC50ZXh0KEpTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIDQpKVxuICAgICAgICAgICAgICAgIC8vIHJldHVybjtcblxuICAgICAgICAgICAgICAgIC8vIHBvcHVsYXRlIGhlYWRlclxuICAgICAgICAgICAgICAgIHRoZWFkLmFwcGVuZChcInRyXCIpXG4gICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJ0aFwiKVxuICAgICAgICAgICAgICAgICAgICAuZGF0YShjb2x1bW5LZXlzKVxuICAgICAgICAgICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcInRoXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGV4dChmdW5jdGlvbihkKSB7IHJldHVybiBkOyB9KVxuXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFibGVTZXJ2aWNlO1xufV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCd0aW1lc2VyaWVzU2VydmljZScsIFsnJHEnLCAnJGh0dHAnLCAnbG9kYXNoJywgZnVuY3Rpb24oJHEsICRodHRwLCBsb2Rhc2gpIHtcbiAgICB2YXIgdGltZXNlcmllc1NlcnZpY2UgPSB7fTtcblxuICAgIHRpbWVzZXJpZXNTZXJ2aWNlLmNoYXJ0ID0gZnVuY3Rpb24oY29udGFpbmVyLCBkYXRhLCBjb25maWcpIHtcbiAgICAgICAgdmFyIHRpbWVGb3JtYXRzID0ge1xuICAgICAgICAgICAgXCJ5ZWFyXCIgOiBcIllZWVlcIixcbiAgICAgICAgICAgIFwicXVhcnRlclwiIDogXCJbUV1RIFlZWVlcIixcbiAgICAgICAgICAgIFwibW9udGhcIiA6IFwiTU1NIFlZWVlcIlxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbmZpZy5mYWNldCA9IGxvZGFzaC5kaWZmZXJlbmNlKFtcInN0cnVjdHVyZVwiLCBcInRpbWVcIl0sIFtjb25maWcuZmFjZXRdKVswXVxuXG4gICAgICAgIC8vIGNvbnZlcnQgZGF0YSBmcm9tIHN0cmluZyAtPiBhcnJheSBvZiBvYmpcbiAgICAgICAgZGF0YSA9IGQzLmNzdi5wYXJzZShkYXRhKTtcblxuICAgICAgICAvLyBrZXlzIGZvciBjb2xvciBhbmQgc2hhcGUgc2NhbGVzXG4gICAgICAgIHZhciBsaW5lS2V5cyA9IGxvZGFzaC5jaGFpbihkYXRhWzBdKVxuICAgICAgICAgICAgLmtleXMoKVxuICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbihrKSB7IHJldHVybiBrICE9PSBcIlllYXJcIjsgfSlcbiAgICAgICAgICAgIC52YWx1ZSgpO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBjb250YWluZXIgZm9yIG1hcHNcbiAgICAgICAgY2hhcnRDb250YWluZXIgPSBkMy5zZWxlY3QoY29udGFpbmVyKVxuICAgICAgICAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwidGltZXNlcmllcy1jb250YWluZXJcIiwgdHJ1ZSlcbiAgICAgICAgICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgICAgICAgICAuY2xhc3NlZChcInRpbWVzZXJpZXMtY29udGFpbmVyLWludGVybmFsXCIsIHRydWUpXG4gICAgICAgICAgICAgICAgLmRhdHVtKGRhdGEpO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBjb250YWluZXIgZm9yIGxlZ2VuZHNcbiAgICAgICAgbGVnZW5kQ29udGFpbmVyID0gZDMuc2VsZWN0KGNvbnRhaW5lcilcbiAgICAgICAgICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgICAgICAgICBcImxlZ2VuZC1jb250YWluZXJcIiA6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJ0aW1lc2VyaWVzLWxlZ2VuZC1jb250YWluZXJcIiA6IHRydWUsXG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBjaGFydENvbnRhaW5lci5hcHBlbmQoXCJwcmVcIilcbiAgICAgICAgICAgIC8vIC50ZXh0KEpTT04uc3RyaW5naWZ5KGRhdGEsIG51bGwsIDQpKTtcbiAgICAgICAgICAgIC8vIC50ZXh0KEpTT04uc3RyaW5naWZ5KGNvbmZpZywgbnVsbCwgNCkpO1xuICAgICAgICAvLyByZXR1cm47XG5cbiAgICAgICAgbWFrZVRpbWVTZXJpZXMoY2hhcnRDb250YWluZXIpO1xuXG4gICAgICAgIC8vIGNyZWF0ZSBjb250YWluZXIgZm9yIGxlZ2VuZHNcbiAgICAgICAgbGVnZW5kQ29udGFpbmVyID0gZDMuc2VsZWN0KGNvbnRhaW5lcilcbiAgICAgICAgICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgICAgICAgICBcImxlZ2VuZC1jb250YWluZXJcIiA6IHRydWUsXG4gICAgICAgICAgICAgICAgXCJ0aW1lc2VyaWVzLWxlZ2VuZC1jb250YWluZXJcIiA6IHRydWUsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0aW1lc2VyaWVzLWxlZ2VuZC1jb250YWluZXItaW50ZXJuYWxcIiA6IHRydWUsXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5kYXR1bShsaW5lS2V5cyk7XG5cbiAgICAgICAgbWFrZUxlZ2VuZChsZWdlbmRDb250YWluZXIpO1xuXG4gICAgICAgIC8vIC8qKiBTVEFSVCBTQ1JPTEwgTk9USUNFICoqL1xuICAgICAgICAvLyAvLyBpZiB3ZSBhcmUgdW5kZXIgYSBjZXJ0YWluIHBpeGVsIHNpemUsIHRoZXJlIHdpbGwgYmUgaG9yaXpvbnRhbCBzY3JvbGxpbmdcbiAgICAgICAgLy8gdmFyIGludGVybmFsQ29udGFpbmVyU2l6ZSA9IGQzLnNlbGVjdChjb250YWluZXIpLnNlbGVjdChcImRpdi50aW1lc2VyaWVzLWNvbnRhaW5lci1pbnRlcm5hbFwiKS5ub2RlKCkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgIC8vICAgICBjb250YWluZXJTaXplID0gZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0KFwiZGl2LnRpbWVzZXJpZXMtY29udGFpbmVyXCIpLm5vZGUoKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuICAgICAgICAvLyAvLyBjb25zb2xlLmxvZyhpbnRlcm5hbENvbnRhaW5lclNpemUud2lkdGggKyBcIiAvIFwiICsgY29udGFpbmVyU2l6ZS53aWR0aClcbiAgICAgICAgLy8gaWYgKGludGVybmFsQ29udGFpbmVyU2l6ZS53aWR0aCA+IGNvbnRhaW5lclNpemUud2lkdGgpIHtcbiAgICAgICAgLy8gICAgIC8vIGNvbnNvbGUubG9nKFwic2Nyb2xsIE5vdGljZSFcIilcbiAgICAgICAgLy8gICAgIC8vIGNyZWF0ZSBzY3JvbGwgbm90aWNlXG4gICAgICAgIC8vICAgICB2YXIgc2Nyb2xsTm90aWNlID0gZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0KFwiZGl2LnRpbWVzZXJpZXMtY29udGFpbmVyXCIpLmFwcGVuZChcImRpdlwiKVxuICAgICAgICAvLyAgICAgICAgIC5jbGFzc2VkKFwic2Nyb2xsLW5vdGljZVwiLCB0cnVlKVxuICAgICAgICAvLyAgICAgICAgIC5hcHBlbmQoXCJwXCIpO1xuXG4gICAgICAgIC8vICAgICBzY3JvbGxOb3RpY2UuYXBwZW5kKFwiaVwiKVxuICAgICAgICAvLyAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICAgICAgXCJmYVwiIDogdHJ1ZSxcbiAgICAgICAgLy8gICAgICAgICAgICAgXCJmYS1hbmdsZS1kb3VibGUtZG93biBcIiA6IHRydWVcbiAgICAgICAgLy8gICAgICAgICB9KTtcblxuICAgICAgICAvLyAgICAgc2Nyb2xsTm90aWNlLmFwcGVuZChcInNwYW5cIilcbiAgICAgICAgLy8gICAgICAgICAudGV4dChcIlNjcm9sbCBmb3IgbW9yZVwiKTtcblxuICAgICAgICAvLyAgICAgc2Nyb2xsTm90aWNlLmFwcGVuZChcImlcIilcbiAgICAgICAgLy8gICAgICAgICAuY2xhc3NlZCh7XG4gICAgICAgIC8vICAgICAgICAgICAgIFwiZmFcIiA6IHRydWUsXG4gICAgICAgIC8vICAgICAgICAgICAgIFwiZmEtYW5nbGUtZG91YmxlLWRvd24gXCIgOiB0cnVlXG4gICAgICAgIC8vICAgICAgICAgfSk7XG4gICAgICAgIC8vIH1cblxuICAgICAgICAvLyBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJkaXYudGltZXNlcmllcy1jb250YWluZXJcIikub24oXCJzY3JvbGxcIiwgZnVuY3Rpb24oKSB7XG4gICAgICAgIC8vICAgICAvLyBpZiBzY3JvbGwgYXQgYm90dG9tLCBoaWRlIHNjcm9sbCBub3RpY2VcbiAgICAgICAgLy8gICAgIC8vIHVzaW5nIGEgZGlmZmVyZW50IGNsYXNzIHNvIGFzIG5vdCB0byBpbnRlcmZlcmUgd2l0aCB0aGUgbW91c2VvdmVyIGVmZmVjdHNcbiAgICAgICAgLy8gICAgIGlmICgoZDMuc2VsZWN0KHRoaXMpLm5vZGUoKS5zY3JvbGxMZWZ0ICsgZDMuc2VsZWN0KHRoaXMpLm5vZGUoKS5vZmZzZXRXaWR0aCkgPj0gKGQzLnNlbGVjdCh0aGlzKS5ub2RlKCkuc2Nyb2xsV2lkdGggKiAwLjk3NSkpIHtcbiAgICAgICAgLy8gICAgICAgICBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJkaXYuc2Nyb2xsLW5vdGljZVwiKVxuICAgICAgICAvLyAgICAgICAgICAgICAuY2xhc3NlZCh7XG4gICAgICAgIC8vICAgICAgICAgICAgICAgICBcImhpZGRlblwiIDogdHJ1ZVxuICAgICAgICAvLyAgICAgICAgICAgICB9KTtcbiAgICAgICAgLy8gICAgIH0gZWxzZSB7XG4gICAgICAgIC8vICAgICAgICAgZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0QWxsKFwiZGl2LnNjcm9sbC1ub3RpY2VcIilcbiAgICAgICAgLy8gICAgICAgICAgICAgLmNsYXNzZWQoe1xuICAgICAgICAvLyAgICAgICAgICAgICAgICAgXCJoaWRkZW5cIiA6IGZhbHNlXG4gICAgICAgIC8vICAgICAgICAgICAgIH0pO1xuICAgICAgICAvLyAgICAgfVxuICAgICAgICAvLyB9KVxuICAgICAgICAvLyAvKiogRU5EIFNDUk9MTCBOT1RJQ0UgKiovXG5cbiAgICAgICAgLy8gLy8gYWRkIGhvdmVyIGVmZmVjdHMgLSB1c2UgY2xhc3NlcyBcImhpZ2hsaWdodFwiIGFuZCBcImxvd2xpZ2h0XCJcbiAgICAgICAgLy8gZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0QWxsKFwiZy5lbnRyeSwgZy50aW1lc2VyaWVzLWxpbmVzID4gcGF0aCwgZy50aW1lc2VyaWVzLXBvaW50cyA+IHBhdGhcIilcbiAgICAgICAgLy8gLm9uKFwibW91c2VvdmVyXCIsIGZ1bmN0aW9uKCl7XG4gICAgICAgIC8vICAgICB2YXIgY2xhc3NUb0hpZ2hsaWdodCA9IGQzLnNlbGVjdCh0aGlzKS5hdHRyKFwiZGF0YS1jbGFzc1wiKTtcblxuICAgICAgICAvLyAgICAgLy8gbG93bGlnaHQgYWxsIGVsZW1lbnRzXG4gICAgICAgIC8vICAgICBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJnLmVudHJ5LCBnLnRpbWVzZXJpZXMtbGluZXMgPiBwYXRoLCBnLnRpbWVzZXJpZXMtcG9pbnRzID4gcGF0aCwgZGl2LnNjcm9sbC1ub3RpY2VcIilcbiAgICAgICAgLy8gICAgIC5jbGFzc2VkKHtcbiAgICAgICAgLy8gICAgICAgICBcImxvd2xpZ2h0XCIgOiB0cnVlLFxuICAgICAgICAvLyAgICAgICAgIFwiaGlnaGxpZ2h0XCIgOiBmYWxzZVxuICAgICAgICAvLyAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgLy8gICAgIC8vIGhpZ2hsaWdodCBhbGwgZWxlbWVudHMgd2l0aCBtYXRjaGluZyBkYXRhLWNsYXNzXG4gICAgICAgIC8vICAgICBkMy5zZWxlY3QoY29udGFpbmVyKS5zZWxlY3RBbGwoXCJnLmVudHJ5LlwiK2NsYXNzVG9IaWdobGlnaHQrXCIsIGcudGltZXNlcmllcy1saW5lcyA+IHBhdGguXCIrY2xhc3NUb0hpZ2hsaWdodCtcIiwgZy50aW1lc2VyaWVzLXBvaW50cyBwYXRoLlwiK2NsYXNzVG9IaWdobGlnaHQpXG4gICAgICAgIC8vICAgICAuY2xhc3NlZCh7XG4gICAgICAgIC8vICAgICAgICAgXCJsb3dsaWdodFwiIDogZmFsc2UsXG4gICAgICAgIC8vICAgICAgICAgXCJoaWdobGlnaHRcIiA6IHRydWVcbiAgICAgICAgLy8gICAgIH0pO1xuICAgICAgICAvLyB9KVxuICAgICAgICAvLyAub24oXCJtb3VzZW91dFwiLCBmdW5jdGlvbigpe1xuICAgICAgICAvLyAgICAgLy8gcmVtb3ZlIGFsbCBoaWdobGlnaHQvbG93bGlnaHQgY2xhc3Nlc1xuICAgICAgICAvLyAgICAgZDMuc2VsZWN0KGNvbnRhaW5lcikuc2VsZWN0QWxsKFwiZy5lbnRyeSwgZy50aW1lc2VyaWVzLWxpbmVzID4gcGF0aCwgZy50aW1lc2VyaWVzLXBvaW50cyA+IHBhdGgsIGRpdi5zY3JvbGwtbm90aWNlXCIpXG4gICAgICAgIC8vICAgICAuY2xhc3NlZCh7XG4gICAgICAgIC8vICAgICAgICAgXCJsb3dsaWdodFwiIDogZmFsc2UsXG4gICAgICAgIC8vICAgICAgICAgXCJoaWdobGlnaHRcIiA6IGZhbHNlXG4gICAgICAgIC8vICAgICB9KTtcbiAgICAgICAgLy8gfSk7XG5cbiAgICAgICAgZnVuY3Rpb24gbWFrZUxlZ2VuZChzZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIHNlbGVjdGlvbi5lYWNoKGZ1bmN0aW9uKGxlZ2VuZERhdGEpIHtcbiAgICAgICAgICAgICAgICAvLyBjb2xvciBzY2FsZVxuICAgICAgICAgICAgICAgIGNvbG9ycyA9IGQzLnNjYWxlLm9yZGluYWwoKVxuICAgICAgICAgICAgICAgICAgICAucmFuZ2UoW1wiIzFFQUNGMVwiLCBcIiNCOTRBNDhcIl0pXG4gICAgICAgICAgICAgICAgICAgIC5kb21haW4obGluZUtleXMpO1xuXG4gICAgICAgICAgICAgICAgdmFyIGxlZ2VuZEVudHJpZXMgPSBkMy5zZWxlY3QodGhpcykuc2VsZWN0QWxsKFwiZGl2LnRpbWVzZXJpZXMtbGVnZW5kLWVudHJ5XCIpXG4gICAgICAgICAgICAgICAgICAgIC5kYXRhKGxlZ2VuZERhdGEpXG4gICAgICAgICAgICAgICAgICAgIC5lbnRlcigpXG4gICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJkaXZcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwidGltZXNlcmllcy1sZWdlbmQtZW50cnlcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kYXR1bShmdW5jdGlvbihkKSB7IHJldHVybiBkOyB9KVxuXG4gICAgICAgICAgICAgICAgbGVnZW5kRW50cmllcy5lYWNoKGZ1bmN0aW9uKGVudHJ5RGF0YSkge1xuICAgICAgICAgICAgICAgICAgICBkMy5zZWxlY3QodGhpcykuYXBwZW5kKFwic3BhblwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJ0aW1lc2VyaWVzLWxlZ2VuZC1lbnRyeS1jb2xvclwiLCB0cnVlKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnN0eWxlKFwiYmFja2dyb3VuZC1jb2xvclwiLCBjb2xvcnMoZW50cnlEYXRhKSk7XG5cbiAgICAgICAgICAgICAgICAgICAgZDMuc2VsZWN0KHRoaXMpLmFwcGVuZChcInNwYW5cIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwidGltZXNlcmllcy1sZWdlbmQtZW50cnktbGFiZWxcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC50ZXh0KGVudHJ5RGF0YSk7XG4gICAgICAgICAgICAgICAgfSlcblxuICAgICAgICAgICAgICAgIC8vIGFsbCBzcGFucyBhcmUgYnkgZGVmYXVsdCB1bnN0eWxlZCwgd2l0aCBubyB3YXkgdG8gZG8gaXQgaW4gamV0cGFjayxcbiAgICAgICAgICAgICAgICAvLyBzbyBpbiBvcmRlciB0byBmaWdodCB0aGUgaGFuZ2luZyBpbmRlbnQgZWZmZWN0LCBtb3ZlIHRoZW0gb3ZlciA4IHB4XG4gICAgICAgICAgICAgICAgLy8gZDMuc2VsZWN0QWxsKFwidHNwYW5cIikuYXR0cihcImR4XCIsIDgpXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZ1bmN0aW9uIG1ha2VUaW1lU2VyaWVzKHNlbGVjdGlvbikge1xuICAgICAgICAgICAgc2VsZWN0aW9uLmVhY2goZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgIC8vIHNpemluZyBhbmQgbWFyZ2luIHZhcnNcbiAgICAgICAgICAgICAgICB2YXIgQkJveCA9IHRoaXMuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCksXG4gICAgICAgICAgICAgICAgICAgIG1hcmdpbiA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIFwidG9wXCIgOiBCQm94LmhlaWdodCAqIDAuMDUsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInJpZ2h0XCIgOiBCQm94LndpZHRoICogMC4wNSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYm90dG9tXCIgOiBCQm94LmhlaWdodCAqIDAuMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibGVmdFwiIDogZDMubWF4KFtCQm94LndpZHRoICogMC4wNSwgNTVdKVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB3aWR0aCA9IEJCb3gud2lkdGggLSAobWFyZ2luLmxlZnQgKyBtYXJnaW4ucmlnaHQpXG4gICAgICAgICAgICAgICAgICAgIGhlaWdodCA9IEJCb3guaGVpZ2h0IC0gKG1hcmdpbi50b3AgKyBtYXJnaW4uYm90dG9tKSxcblxuICAgICAgICAgICAgICAgICAgICAvLyBjb250YWluZXJzXG4gICAgICAgICAgICAgICAgICAgIHN2ZyA9IGQzLnNlbGVjdCh0aGlzKS5hcHBlbmQoXCJzdmdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIEJCb3guaGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ3aWR0aFwiLCBCQm94LndpZHRoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2xhdGUoMCwgMClcIiksXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0ID0gc3ZnLmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwiaGVpZ2h0XCIsIGhlaWdodClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hdHRyKFwid2lkdGhcIiwgd2lkdGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsIFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKSxcblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gdGVzdGluZyBzdHVmZiAtIGRyYXdzIG91dGxpbmVzIGFyb3VuZCBzdmcgYW5kIGNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAvLyBzdmdPdXRsaW5lID0gc3ZnLmFwcGVuZChcInJlY3RcIilcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5hdHRyKFwiaGVpZ2h0XCIsIHN2Zy5hdHRyKFwiaGVpZ2h0XCIpKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJ3aWR0aFwiLCBzdmcuYXR0cihcIndpZHRoXCIpKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJmaWxsXCIsIFwicmdiYSgwLDAsMCwwKVwiKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJzdHJva2VcIiwgXCJyZWRcIiksXG4gICAgICAgICAgICAgICAgICAgIC8vIGNoYXJ0T3V0bGluZSA9IHN2Zy5hcHBlbmQoXCJyZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZShcIiArIG1hcmdpbi5sZWZ0ICsgXCIsIFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJoZWlnaHRcIiwgY2hhcnQuYXR0cihcImhlaWdodFwiKSlcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5hdHRyKFwid2lkdGhcIiwgY2hhcnQuYXR0cihcIndpZHRoXCIpKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJmaWxsXCIsIFwicmdiYSgwLDAsMCwwKVwiKVxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLmF0dHIoXCJzdHJva2VcIiAsXCJibHVlXCIpLFxuXG4gICAgICAgICAgICAgICAgICAgIC8vIGNvbG9yIHNjYWxlXG4gICAgICAgICAgICAgICAgICAgIGNvbG9ycyA9IGQzLnNjYWxlLm9yZGluYWwoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnJhbmdlKFtcIiMxRUFDRjFcIiwgXCIjQjk0QTQ4XCJdKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRvbWFpbihsaW5lS2V5cyksXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gcG9pbnQgc2hhcGUgXCJzY2FsZVwiXG4gICAgICAgICAgICAgICAgICAgIHN5bWJvbFNjYWxlID0gZDMuc2NhbGUub3JkaW5hbCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmFuZ2UoZDMuc3ZnLnN5bWJvbFR5cGVzKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmRvbWFpbihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5lS2V5c1xuICAgICAgICAgICAgICAgICAgICAgICAgKSxcblxuICAgICAgICAgICAgICAgICAgICAvLyB4IGFuZCB5IHNjYWxlc1xuICAgICAgICAgICAgICAgICAgICB0aW1lRm9ybWF0ID0gZDMudGltZS5mb3JtYXQoXCIlWVwiKSxcbiAgICAgICAgICAgICAgICAgICAgdGltZVJhbmdlID0gbG9kYXNoLmNoYWluKGRhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5ZZWFyO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC52YWx1ZSgpLFxuICAgICAgICAgICAgICAgICAgICB4ID0gZDMudGltZS5zY2FsZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAucmFuZ2UoWzEyLCB3aWR0aF0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZG9tYWluKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQzLmV4dGVudCh0aW1lUmFuZ2UpLm1hcChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aW1lRm9ybWF0LnBhcnNlKHQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgICAgICB5ID0gZDMuc2NhbGUubGluZWFyKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5yYW5nZShbaGVpZ2h0LCAwXSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5kb21haW4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZDMuZXh0ZW50KFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2Rhc2guY2hhaW4oZGF0YSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsaW5lS2V5cy5tYXAoZnVuY3Rpb24oayl7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiArZFtrXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZmxhdHRlbigpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAudW5pcXVlKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC52YWx1ZSgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKS8vLm1hcChmdW5jdGlvbih2LCBpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGlmIChpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICByZXR1cm4gKE1hdGguY2VpbCh2LzEwKSAqIDEwKSAtIDEwO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgcmV0dXJuIChNYXRoLmZsb29yKHYvMTApICogMTApICsgMTA7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLm5pY2UoNSwgMTApLFxuXG4gICAgICAgICAgICAgICAgICAgIC8vIC8vIGF4aXMgZnVuY3Rpb25zXG4gICAgICAgICAgICAgICAgICAgIHhBeGlzID0gZDMuc3ZnLmF4aXMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnNjYWxlKHgpXG4gICAgICAgICAgICAgICAgICAgICAgICAub3JpZW50KFwiYm90dG9tXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGlja3MoZDMudGltZS55ZWFyLCAxKSxcbiAgICAgICAgICAgICAgICAgICAgeUF4aXMgPSBkMy5zdmcuYXhpcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc2NhbGUoeSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5vcmllbnQoXCJsZWZ0XCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuaW5uZXJUaWNrU2l6ZSgtd2lkdGgpXG4gICAgICAgICAgICAgICAgICAgICAgICAudGlja1BhZGRpbmcoMTApXG4gICAgICAgICAgICAgICAgICAgICAgICAudGlja0Zvcm1hdChmdW5jdGlvbih0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQzLmZvcm1hdChcImZcIikodCkgKyBcIiVcIjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIC8vIGxpbmUgY2hhcnRpbmcgZnVuY3Rpb25cbiAgICAgICAgICAgICAgICAgICAgbGluZSA9IGQzLnN2Zy5saW5lKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC54KGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4geChkLlllYXIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAueShmdW5jdGlvbihkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHkoZC5WYWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcblxuICAgICAgICAgICAgICAgICAgICAvLyAvLyBzbHVnIGZ1bmN0aW9uIGZvciBjbGFzc2luZyBhbmQgaGlnaGxpZ2h0aW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIHNsdWdnaWZ5ID0gZnVuY3Rpb24odGV4dCkge1xuICAgICAgICAgICAgICAgICAgICAvLyAgICAgcmV0dXJuIHRleHQudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMvZywgXCJfXCIpO1xuICAgICAgICAgICAgICAgICAgICAvLyB9O1xuXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlc2hhcGUgZGF0YSBmb3IgbGluZXNcbiAgICAgICAgICAgICAgICAgICAgZGF0YSA9IGxpbmVLZXlzLm1hcChmdW5jdGlvbihrKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiS2V5XCIgOiBrLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZhbHVlcyA6IGxvZGFzaC5tYXAoZGF0YSwgZnVuY3Rpb24oZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcIlllYXJcIiA6IHRpbWVGb3JtYXQucGFyc2UoZC5ZZWFyKSwgXCJWYWx1ZVwiIDogK2Rba119XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgICAgICAgICAgLy8gLy8gdGVzdCBvdXRwdXQgZm9yIHRyb3VibGVzaG9vdGluZyB0aGUgZGF0YSBzdHVmZlxuICAgICAgICAgICAgICAgICAgICAvLyBkMy5zZWxlY3QodGhpcykuYXBwZW5kKFwicHJlXCIpXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAudGV4dChKU09OLnN0cmluZ2lmeShkYXRhLCBudWxsLCA0KSlcbiAgICAgICAgICAgICAgICAgICAgLy8gcmV0dXJuO1xuXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0LmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIngtYXhpc1wiIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImF4aXNcIiA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLCBcIiArIGhlaWdodCArIFwiKVwiKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmNhbGwoeEF4aXMpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0LmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInktYXhpc1wiIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImF4aXNcIiA6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgtMTIsIDApXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuY2FsbCh5QXhpcyk7XG5cbiAgICAgICAgICAgICAgICAgICAgY2hhcnQuc2VsZWN0QWxsKFwiZy50aW1lc2VyaWVzLWxpbmVzXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZGF0YShkYXRhKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmVudGVyKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJ0aW1lc2VyaWVzLWxpbmVzXCIsIHRydWUpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmFwcGVuZChcInBhdGhcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzZWQoXCJ0aW1lc2VyaWVzLXBhdGhcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJkXCIsIGZ1bmN0aW9uKGQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBsaW5lKGQuVmFsdWVzKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgZnVuY3Rpb24oZCwgaSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNvbG9ycyhkLktleSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIHZhciBwb2ludERhdGEgPSBkYXRhLm1hcChmdW5jdGlvbihkLCBkaSwgZGEpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkLlZhbHVlcy5tYXAoZnVuY3Rpb24odiwgdmksIHZhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdi5LZXkgPSBkLktleTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdjtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICBwb2ludERhdGEgPSBsb2Rhc2guZmxhdHRlbihwb2ludERhdGEpO1xuXG4gICAgICAgICAgICAgICAgICAgIGNoYXJ0LmFwcGVuZChcImdcIilcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jbGFzc2VkKFwidGltZXNlcmllcy1wb2ludHNcIiwgdHJ1ZSlcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoXCJnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZGF0YShwb2ludERhdGEpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZW50ZXIoKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hcHBlbmQoXCJwYXRoXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJzdHJva2VcIiwgZnVuY3Rpb24oZCwgaSkge3JldHVybiBjb2xvcnMoZC5LZXkpOyB9IClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXR0cihcImRcIiwgZDMuc3ZnLnN5bWJvbCgpLnR5cGUoXCJjaXJjbGVcIikuc2l6ZSg2NSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoXCJ0cmFuc2Zvcm1cIiwgZnVuY3Rpb24oZCkgeyByZXR1cm4gXCJ0cmFuc2xhdGUoXCIgKyB4KGQuWWVhcikgKyBcIiwgXCIgKyB5KGQuVmFsdWUpICtcIilcIjt9KTtcblxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aW1lc2VyaWVzU2VydmljZTtcbn1dKVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignQWJvdXRQYWdlQ29udHJvbGxlcicsXG4gICAgWyckc2NvcGUnLCAnJGh0dHAnLCAnJGxvZycsICckbG9jYXRpb24nLC8qICckYW5jaG9yU2Nyb2xsJywgJyRyb290U2NvcGUnLCovICckcm91dGVQYXJhbXMnLCAnc2lkZWJhckRpc3BsYXknLCAnY29udHJpYnV0b3JzJyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkbG9nLCAkbG9jYXRpb24sLyogJGFuY2hvclNjcm9sbCwgJHJvb3RTY29wZSwqLyAkcm91dGVQYXJhbXMsIHNpZGViYXJEaXNwbGF5LCBjb250cmlidXRvcnMpe1xuICAgICAgICAkc2NvcGUudG9nZ2xlID0gc2lkZWJhckRpc3BsYXkudG9nZ2xlO1xuXG4gICAgICAgIHZhciBjb250cmlidXRvclByb21pc2UgPSBjb250cmlidXRvcnMuZ2V0Q29udHJpYnV0b3JzKFwiYWxsXCIpO1xuICAgICAgICBjb250cmlidXRvclByb21pc2UudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICRzY29wZS5jb250cmlidXRvcnMgPSBjb250cmlidXRvcnMubGlzdDtcbiAgICAgICAgfSwgZnVuY3Rpb24ocmVqZWN0aW9uKSB7XG4gICAgICAgICAgICBhbGVydChcInByb21pc2UgcmVqZWN0ZWQhXCIpO1xuICAgICAgICB9KTtcblxuICAgICAgICAkc2NvcGUuJG9uKCckdmlld0NvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgJHNjb3BlLnRvZ2dsZS5vcGVuID0gZmFsc2U7XG4gICAgICAgICAgICBzaWRlYmFyRGlzcGxheS5zZWN0aW9uID0gJ0ludHJvZHVjdGlvbic7XG4gICAgICAgICAgICAkc2NvcGUubmV4dFNlY3Rpb24gPSAnQ2l2aWMgRW5nYWdlbWVudCc7XG4gICAgICAgICAgICAkc2NvcGUubmV4dFNlY3Rpb25UZWFzZXIgPSAnVGVzdGluZyc7XG4gICAgICAgICAgICAkc2NvcGUubmV4dFNlY3Rpb25VUkwgPSAnIy9jaXZpYy1lbmdhZ2VtZW50JztcbiAgICAgICAgfSk7XG5cbn1dKVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignQ2FsbFRvQWN0aW9uUGFnZUNvbnRyb2xsZXInLFxuICAgIFsnJHNjb3BlJywgJyRodHRwJywgJyRsb2cnLCAnJGxvY2F0aW9uJywgJ3NpZGViYXJEaXNwbGF5JyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkbG9nLCAkbG9jYXRpb24sIHNpZGViYXJEaXNwbGF5KXtcbiAgICAgICAgJHNjb3BlLnRvZ2dsZSA9IHNpZGViYXJEaXNwbGF5LnRvZ2dsZTtcblxuICAgICAgICAkc2NvcGUuJG9uKCckdmlld0NvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgJHNjb3BlLnRvZ2dsZS5vcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIHNpZGViYXJEaXNwbGF5LnNlY3Rpb24gPSAnQ2FsbCBUbyBBY3Rpb24nO1xuICAgICAgICB9KTtcblxufV0pXG5cbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0NvaGVzaW9uUGFnZUNvbnRyb2xsZXInLFxuICAgIFsnJHNjb3BlJywgJyRodHRwJywgJyRsb2cnLCAnJGxvY2F0aW9uJywgJ3NpZGViYXJEaXNwbGF5JyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRodHRwLCAkbG9nLCAkbG9jYXRpb24sIHNpZGViYXJEaXNwbGF5KXtcbiAgICAgICAgJHNjb3BlLnRvZ2dsZSA9IHNpZGViYXJEaXNwbGF5LnRvZ2dsZTtcblxuICAgICAgICAkc2NvcGUuJG9uKCckdmlld0NvbnRlbnRMb2FkZWQnLCBmdW5jdGlvbihldmVudCkge1xuICAgICAgICAgICAgJHNjb3BlLnRvZ2dsZS5vcGVuID0gdHJ1ZTtcbiAgICAgICAgICAgIHNpZGViYXJEaXNwbGF5LnNlY3Rpb24gPSAnU29jaWFsIE5ldHdvcmtzIGFuZCBDb21tdW5pdHkgQ29oZXNpb24nO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uID0gJ0luc3RpdHV0aW9uYWwgUHJlc2VuY2UnO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uVGVhc2VyID0gXCJTdHVmZiBhYm91dCBpbnN0aXR1dGlvbnNcIjtcbiAgICAgICAgICAgICRzY29wZS5uZXh0U2VjdGlvblVSTCA9ICcjL2luc3RpdHV0aW9uYWwtcHJlc2VuY2UnO1xuICAgICAgICB9KTtcblxufV0pXG5cbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ0VuZ2FnZW1lbnRQYWdlQ29udHJvbGxlcicsXG4gICAgWyckc2NvcGUnLCAnJGh0dHAnLCAnJGxvZycsICckbG9jYXRpb24nLC8qICckYW5jaG9yU2Nyb2xsJywgJyRyb290U2NvcGUnLCAnJHJvdXRlUGFyYW1zJywqLyAnc2lkZWJhckRpc3BsYXknLFxuICAgIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICRsb2csICRsb2NhdGlvbiwvKiAkYW5jaG9yU2Nyb2xsLCAkcm9vdFNjb3BlLCAkcm91dGVQYXJhbXMsKi8gc2lkZWJhckRpc3BsYXkpe1xuICAgICAgICAkc2NvcGUudG9nZ2xlID0gc2lkZWJhckRpc3BsYXkudG9nZ2xlO1xuXG4gICAgICAgICRzY29wZS4kb24oJyR2aWV3Q29udGVudExvYWRlZCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAkc2NvcGUudG9nZ2xlLm9wZW4gPSB0cnVlO1xuICAgICAgICAgICAgc2lkZWJhckRpc3BsYXkuc2VjdGlvbiA9ICdDaXZpYyBFbmdhZ2VtZW50JztcbiAgICAgICAgICAgICRzY29wZS5uZXh0U2VjdGlvbiA9ICdQb2xpdGljYWwgUGFydGljaXBhdGlvbic7XG4gICAgICAgICAgICAkc2NvcGUubmV4dFNlY3Rpb25UZWFzZXIgPSBcIlN0dWZmIGFib3V0IHBvbGl0aWNhbCBwYXJ0aWNpcGF0aW9uXCI7XG4gICAgICAgICAgICAkc2NvcGUubmV4dFNlY3Rpb25VUkwgPSAnIy9wb2xpdGljYWwtcGFydGljaXBhdGlvbic7XG4gICAgICAgIH0pO1xuXG59XSlcblxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4uY29udHJvbGxlcignUGFydGljaXBhdGlvblBhZ2VDb250cm9sbGVyJyxcbiAgICBbJyRzY29wZScsICckaHR0cCcsICckbG9nJywgJyRsb2NhdGlvbicsICdzaWRlYmFyRGlzcGxheScsXG4gICAgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJGxvZywgJGxvY2F0aW9uLCBzaWRlYmFyRGlzcGxheSl7XG4gICAgICAgICRzY29wZS50b2dnbGUgPSBzaWRlYmFyRGlzcGxheS50b2dnbGU7XG5cbiAgICAgICAgJHNjb3BlLiRvbignJHZpZXdDb250ZW50TG9hZGVkJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICRzY29wZS50b2dnbGUub3BlbiA9IHRydWU7XG4gICAgICAgICAgICBzaWRlYmFyRGlzcGxheS5zZWN0aW9uID0gJ1BvbGl0aWNhbCBQYXJ0aWNpcGF0aW9uJztcbiAgICAgICAgICAgICRzY29wZS5uZXh0U2VjdGlvbiA9ICdDb21tdW5pdHkgQ29oZXNpb24nO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uVGVhc2VyID0gXCJTdHVmZiBhYm91dCBjb2hlc2lvblwiO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uVVJMID0gJyMvY29tbXVuaXR5LWNvaGVzaW9uJztcbiAgICAgICAgfSk7XG5cbn1dKVxuXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdQYXJ0bmVyc1BhZ2VDb250cm9sbGVyJyxcbiAgICBbJyRzY29wZScsICckaHR0cCcsICckbG9nJywgJyRsb2NhdGlvbicsLyogJyRhbmNob3JTY3JvbGwnLCAnJHJvb3RTY29wZScsKi8gJyRyb3V0ZVBhcmFtcycsICdzaWRlYmFyRGlzcGxheScsICdjb250cmlidXRvcnMnLFxuICAgIGZ1bmN0aW9uKCRzY29wZSwgJGh0dHAsICRsb2csICRsb2NhdGlvbiwvKiAkYW5jaG9yU2Nyb2xsLCAkcm9vdFNjb3BlLCovICRyb3V0ZVBhcmFtcywgc2lkZWJhckRpc3BsYXksIGNvbnRyaWJ1dG9ycyl7XG4gICAgICAgICRzY29wZS50b2dnbGUgPSBzaWRlYmFyRGlzcGxheS50b2dnbGU7XG5cbiAgICAgICAgdmFyIGNvbnRyaWJ1dG9yUHJvbWlzZSA9IGNvbnRyaWJ1dG9ycy5nZXRDb250cmlidXRvcnMoXCJhbGxcIik7XG4gICAgICAgIGNvbnRyaWJ1dG9yUHJvbWlzZS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICAgICAgJHNjb3BlLmNvbnRyaWJ1dG9ycyA9IGNvbnRyaWJ1dG9ycy5saXN0O1xuICAgICAgICB9LCBmdW5jdGlvbihyZWplY3Rpb24pIHtcbiAgICAgICAgICAgIGFsZXJ0KFwicHJvbWlzZSByZWplY3RlZCFcIik7XG4gICAgICAgIH0pO1xuXG4gICAgICAgICRzY29wZS4kb24oJyR2aWV3Q29udGVudExvYWRlZCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgICAgICAkc2NvcGUudG9nZ2xlLm9wZW4gPSB0cnVlO1xuICAgICAgICAgICAgc2lkZWJhckRpc3BsYXkuc2VjdGlvbiA9ICdQYXJ0bmVycyc7XG4gICAgICAgICAgICAkc2NvcGUubmV4dFNlY3Rpb24gPSAnUmF3IERhdGEnO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uVGVhc2VyID0gXCJTdHVmZiBhYm91dCByYXcgZGF0YVwiO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uVVJMID0gJyMvcmF3LWRhdGEnO1xuICAgICAgICB9KTtcblxufV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5jb250cm9sbGVyKCdJbnN0aXR1dGlvblBhZ2VDb250cm9sbGVyJyxcbiAgICBbJyRzY29wZScsICckaHR0cCcsICckbG9nJywgJyRsb2NhdGlvbicsICdzaWRlYmFyRGlzcGxheScsXG4gICAgZnVuY3Rpb24oJHNjb3BlLCAkaHR0cCwgJGxvZywgJGxvY2F0aW9uLCBzaWRlYmFyRGlzcGxheSl7XG4gICAgICAgICRzY29wZS50b2dnbGUgPSBzaWRlYmFyRGlzcGxheS50b2dnbGU7XG5cbiAgICAgICAgJHNjb3BlLiRvbignJHZpZXdDb250ZW50TG9hZGVkJywgZnVuY3Rpb24oZXZlbnQpIHtcbiAgICAgICAgICAgICRzY29wZS50b2dnbGUub3BlbiA9IHRydWU7XG4gICAgICAgICAgICBzaWRlYmFyRGlzcGxheS5zZWN0aW9uID0gJ0luc3RpdHV0aW9uYWwgUHJlc2VuY2UnO1xuICAgICAgICAgICAgJHNjb3BlLm5leHRTZWN0aW9uID0gJ0NhbGwgdG8gQWN0aW9uJztcbiAgICAgICAgICAgICRzY29wZS5uZXh0U2VjdGlvblRlYXNlciA9IFwiU3R1ZmYgYWJvdXQgY2FsbCB0byBhY3Rpb25cIjtcbiAgICAgICAgICAgICRzY29wZS5uZXh0U2VjdGlvblVSTCA9ICcjL2NhbGwtdG8tYWN0aW9uJztcbiAgICAgICAgfSk7XG5cbn1dKVxuXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdjYXRlZ29yaWVzJywgWyckaHR0cCcsICckcScsICdsb2Rhc2gnLCBmdW5jdGlvbigkaHR0cCwgJHEsIGxvZGFzaCkge1xuICAgIHZhciBjYXRlZ29yaWVzID0ge307XG4gICAgY2F0ZWdvcmllcy5saXN0ID0gW107XG5cbiAgICBjYXRlZ29yaWVzLnRvZ2dsZSA9IGZ1bmN0aW9uKGNhdGVnb3J5KSB7XG4gICAgICAgIHBvc2l0aW9uID0gbG9kYXNoLmZpbmRJbmRleChjYXRlZ29yaWVzLmxpc3QsIGZ1bmN0aW9uKGxpc3RjYXQpIHtcbiAgICAgICAgICAgIHJldHVybiBsaXN0Y2F0Lm5hbWUgPT0gY2F0ZWdvcnkubmFtZTtcbiAgICAgICAgfSk7XG4gICAgICAgIGNhdGVnb3JpZXMubGlzdFtwb3NpdGlvbl0uc2VsZWN0ZWQgPSAhY2F0ZWdvcmllcy5saXN0W3Bvc2l0aW9uXS5zZWxlY3RlZDtcbiAgICB9O1xuXG4gICAgY2F0ZWdvcmllcy5nZXRDYXRlZ29yaWVzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChjYXRlZ29yaWVzLmxpc3QubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gaWYgdGhpcyBvYmplY3QgYWxyZWFkeSBoYXMgZGF0YSwganVzdCB1c2Ugd2hhdCdzIGN1cnJlbnRseSBhdmFpbGFibGVcbiAgICAgICAgICAgIHJldHVybiAkcShmdW5jdGlvbihyZXNvbHZlKXtyZXNvbHZlKGNhdGVnb3JpZXMpfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBvdGhlcndpc2UgZ2V0IGRhdGEgZnJlc2ggZnJvbSBmaWxlXG4gICAgICAgICAgICByZXR1cm4gJHEoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgJGh0dHAuZ2V0KCcvc3RhdGljL2Rpc3QvZGF0YS9kYXRhLmpzb24nKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGlzdCA9IGxvZGFzaC5tYXAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gc29ydCBjYXRlZ29yaWVzIGJ5IHJhbmtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2Rhc2guc29ydEJ5KHJlc3BvbnNlLCBcInJhbmtcIiksIGZ1bmN0aW9uKG8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgZWFjaCBpbmRpY2F0b3IgaW4gZWFjaCBjYXRlZ29yeSwgc29ydCAnbGV2ZWxzJyBieSBhIHJhbmsgYXMgd2VsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uZGF0YS5mb3JFYWNoKGZ1bmN0aW9uKGluZGljYXRvciwgaWksIGlhKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG8uZGF0YVtpaV0uZGF0YSA9IGxvZGFzaC5zb3J0QnlBbGwoby5kYXRhW2lpXS5kYXRhLCBcInJhbmtcIilcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBleHRlbmQgZWFjaCBjYXRlZ29yeSB0byBoYXZlIGEgXCJzZWxlY3RlZFwiIHZhbHVlLCBkZWZhdWx0IHRvIHRydWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvID0gbG9kYXNoLmV4dGVuZCh7fSwgbywge1wic2VsZWN0ZWRcIiA6IHRydWV9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZXQgY2F0ZWdvcmllcy5saXN0IHRvIGEgc29ydGVkIGFycmF5XG4gICAgICAgICAgICAgICAgICAgICAgICBjYXRlZ29yaWVzLmxpc3QgPSBsaXN0O1xuXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlKGNhdGVnb3JpZXMpO1xuICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZWplY3QoXCJUaGVyZSB3YXMgYW4gZXJyb3IgZ2V0dGluZyBjYXRlZ29yaWVzXCIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBjYXRlZ29yaWVzO1xufV0pXG4iLCJhbmd1bGFyLm1vZHVsZSgnYXBwJylcbi5zZXJ2aWNlKCdjb250cmlidXRvcnMnLCBbJyRodHRwJywgJyRxJywgZnVuY3Rpb24oJGh0dHAsICRxKSB7XG4gICAgdmFyIGNvbnRyaWJ1dG9ycyA9IHt9O1xuICAgIGNvbnRyaWJ1dG9ycy5saXN0ID0gW107XG5cbiAgICBjb250cmlidXRvcnMuZ2V0Q29udHJpYnV0b3JzID0gZnVuY3Rpb24oKSB7XG4gICAgICAgIGlmIChjb250cmlidXRvcnMubGlzdC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAvLyBpZiB0aGlzIG9iamVjdCBhbHJlYWR5IGhhcyBkYXRhLCBqdXN0IHVzZSB3aGF0J3MgY3VycmVudGx5IGF2YWlsYWJsZVxuICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUpe3Jlc29sdmUoY29udHJpYnV0b3JzKX0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gb3RoZXJ3aXNlIGdldCBkYXRhIGZyZXNoIGZyb20gZmlsZVxuICAgICAgICAgICAgcmV0dXJuICRxKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgICAgICRodHRwLmdldCgnL3N0YXRpYy9kaXN0L2RhdGEvY29udHJpYnV0b3JzLmpzb24nKVxuICAgICAgICAgICAgICAgICAgICAuc3VjY2VzcyhmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJpYnV0b3JzLmxpc3QgPSByZXNwb25zZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoY29udHJpYnV0b3JzKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmVycm9yKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVqZWN0KFwiVGhlcmUgd2FzIGFuIGVycm9yIGdldHRpbmcgY29udHJpYnV0b3JzXCIpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcblxuICAgIHJldHVybiBjb250cmlidXRvcnM7XG59XSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLmNvbnRyb2xsZXIoJ1NpZGViYXJDb250cm9sbGVyJyxcbiAgICBbJyRzY29wZScsICckbG9nJywnbG9kYXNoJywgJ2NhdGVnb3JpZXMnLCAnY29udHJpYnV0b3JzJyxcbiAgICBmdW5jdGlvbigkc2NvcGUsICRsb2csIGxvZGFzaCwgY2F0ZWdvcmllcywgY29udHJpYnV0b3JzKSB7XG4gICAgICAgIC8vICRzY29wZS5zdGF0dXMgPSB7XG4gICAgICAgIC8vICAgICBpc29wZW46IGZhbHNlXG4gICAgICAgIC8vIH07XG5cbiAgICAgICAgdmFyIGNhdGVnb3J5UHJvbWlzZSA9IGNhdGVnb3JpZXMuZ2V0Q2F0ZWdvcmllcygpO1xuICAgICAgICBjYXRlZ29yeVByb21pc2UudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICAgICRzY29wZS5jYXRlZ29yaWVzID0gY2F0ZWdvcmllcy5saXN0O1xuICAgICAgICB9LCBmdW5jdGlvbihyZWplY3Rpb24pIHtcbiAgICAgICAgICAgIGFsZXJ0KFwicHJvbWlzZSByZWplY3RlZCFcIik7XG4gICAgICAgIH0pXG5cbiAgICAgICAgdmFyIGNvbnRyaWJ1dG9yUHJvbWlzZSA9IGNvbnRyaWJ1dG9ycy5nZXRDb250cmlidXRvcnMoKTtcbiAgICAgICAgY29udHJpYnV0b3JQcm9taXNlLnRoZW4oZnVuY3Rpb24ocmVzdWx0KSB7XG4gICAgICAgICAgICAkc2NvcGUuY29udHJpYnV0b3JzID0gY29udHJpYnV0b3JzLmxpc3Q7XG4gICAgICAgIH0sIGZ1bmN0aW9uKHJlamVjdGlvbikge1xuICAgICAgICAgICAgYWxlcnQoXCJwcm9taXNlIHJlamVjdGVkIVwiKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgLy8gRnVuY3Rpb25zIGZvciBtYW5hZ2luZyB0aGUgcHJlc2VudGF0aW9uIG9mIHRoZSBzZWxlY3RlZCBpdGVtcyBpblxuICAgICAgICAvLyB0aGUgc2lkZWJhciBhbmQgcHJvcGlnYXRpbmcgc2VsZWN0aW9ucyB0aHJvdWdoIHRoZSBjYXRnb3JpZXMgc2VydmljZVxuICAgICAgICAkc2NvcGUudXBkYXRlU2VsZWN0ZWQgPSBmdW5jdGlvbihjYXRlZ29yeSkge1xuICAgICAgICAgICAgY2F0ZWdvcmllcy50b2dnbGUoY2F0ZWdvcnkpO1xuICAgICAgICB9O1xuXG4gICAgICAgICRzY29wZS5jaGVja1NlbGVjdGVkID0gZnVuY3Rpb24oYm9vbCkge1xuICAgICAgICAgICAgaWYgKGJvb2wpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJzZWxlY3RlZFwiO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gXCJkZXNlbGVjdGVkXCI7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgICRzY29wZS4kd2F0Y2hDb2xsZWN0aW9uKGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgcmV0dXJuICRzY29wZS50b2dnbGU7XG4gICAgICAgIH0sIGZ1bmN0aW9uKCkge1xuICAgICAgICAgICAgY29uc29sZS5sb2coXCJ0b2dnbGVkIHRyaWdnZXJlZCBmcm9tIHNpZGViYXJcIik7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygkc2NvcGUudG9nZ2xlKTtcbiAgICAgICAgfSk7XG59XSlcbiIsImFuZ3VsYXIubW9kdWxlKCdhcHAnKVxuLnNlcnZpY2UoJ3NpZGViYXJEaXNwbGF5JywgZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdG9nZ2xlOiB7IG9wZW46IHRydWUgfSxcbiAgICAgICAgc2VjdGlvbjogJ0ludHJvZHVjdGlvbidcbiAgICB9XG59KVxuIiwiYW5ndWxhci5tb2R1bGUoJ2FwcCcpXG4gICAgLmNvbnRyb2xsZXIoJ1dyYXBDb250cm9sbGVyJywgWyckc2NvcGUnLCAnc2lkZWJhckRpc3BsYXknLCBmdW5jdGlvbiAoJHNjb3BlLCBzaWRlYmFyRGlzcGxheSkge1xuICAgICAgICAkc2NvcGUudG9nZ2xlID0gc2lkZWJhckRpc3BsYXkudG9nZ2xlO1xuICAgICAgICAkc2NvcGUuc2VjdGlvbiA9IHNpZGViYXJEaXNwbGF5LnNlY3Rpb247XG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuICRzY29wZS50b2dnbGU7XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwidG9nZ2xlZCB0cmlnZ2VyZWQgZnJvbSB3cmFwXCIpO1xuICAgICAgICAgICAgY29uc29sZS5sb2coJHNjb3BlLnRvZ2dsZSk7XG4gICAgICAgIH0pO1xuXG5cbiAgICAgICAgJHNjb3BlLiR3YXRjaENvbGxlY3Rpb24oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHNpZGViYXJEaXNwbGF5LnNlY3Rpb247XG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICRzY29wZS5zZWN0aW9uID0gc2lkZWJhckRpc3BsYXkuc2VjdGlvbjtcbiAgICAgICAgfSk7XG4gICAgfV0pXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
